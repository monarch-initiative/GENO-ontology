Prefix(:=<http://purl.obolibrary.org/obo/geno.owl#>)
Prefix(dce:=<http://purl.org/dc/elements/1.1/>)
Prefix(obi:=<http://purl.obolibrary.org/obo/obi.owl#>)
Prefix(obo:=<http://purl.obolibrary.org/obo/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(terms:=<http://purl.org/dc/terms/>)
Prefix(dcterms:=<http://purl.org/dc/terms/>)
Prefix(protege:=<http://protege.stanford.edu/plugins/owl/protege#>)
Prefix(oboInOwl:=<http://www.geneontology.org/formats/oboInOwl#>)
Prefix(property:=<http://property/>)
Prefix(urigen-plugin:=<http://urigen-plugin/>)
Prefix(genotype_model:=<http://www.lamhdi.org/obo/genotype_model/>)


Ontology(<http://purl.obolibrary.org/obo/geno.owl>
Import(<http://purl.obolibrary.org/obo/geno/imports/omo_import.owl>)
Annotation(dce:description "GENO is an OWL model of genotypes, their more fundamental sequence components, and links to related biological and experimental entities.  At present many parts of the model are exploratory and set to undergo refactoring.  In addition, many classes and properties have GENO URIs but are place holders for classes that will be imported from an external ontology (e.g. SO, ChEBI, OBI, etc).  Furthermore, ongoing work will implement a model of genotype-to-phenotype associations. This will support description of asserted and inferred relationships between a genotypes, phenotypes, and environments, and the evidence/provenance behind these associations. 

Documentation is under development as well, and for now a slidedeck is available at http://www.slideshare.net/mhb120/brush-icbo-2013")
Annotation(dce:title "GENO ontology")
Annotation(dcterms:license <https://creativecommons.org/licenses/by/4.0/>)

Declaration(Class(<http://biohackathon.org/resource/faldo#BothStrandsPosition>))
Declaration(Class(<http://biohackathon.org/resource/faldo#ExactPosition>))
Declaration(Class(<http://biohackathon.org/resource/faldo#ForwardStrandPosition>))
Declaration(Class(<http://biohackathon.org/resource/faldo#Position>))
Declaration(Class(<http://biohackathon.org/resource/faldo#Region>))
Declaration(Class(<http://biohackathon.org/resource/faldo#ReverseStrandPosition>))
Declaration(Class(<http://biohackathon.org/resource/faldo#StrandedPosition>))
Declaration(Class(obo:BFO_0000001))
Declaration(Class(obo:BFO_0000002))
Declaration(Class(obo:BFO_0000003))
Declaration(Class(obo:BFO_0000004))
Declaration(Class(obo:BFO_0000015))
Declaration(Class(obo:BFO_0000016))
Declaration(Class(obo:BFO_0000017))
Declaration(Class(obo:BFO_0000019))
Declaration(Class(obo:BFO_0000020))
Declaration(Class(obo:BFO_0000023))
Declaration(Class(obo:BFO_0000031))
Declaration(Class(obo:BFO_0000040))
Declaration(Class(obo:CHEBI_23367))
Declaration(Class(obo:CHEBI_33696))
Declaration(Class(obo:CLO_0000031))
Declaration(Class(obo:CL_0000000))
Declaration(Class(obo:ENVO_01000254))
Declaration(Class(obo:GENO_0000000))
Declaration(Class(obo:GENO_0000002))
Declaration(Class(obo:GENO_0000009))
Declaration(Class(obo:GENO_0000010))
Declaration(Class(obo:GENO_0000014))
Declaration(Class(obo:GENO_0000017))
Declaration(Class(obo:GENO_0000019))
Declaration(Class(obo:GENO_0000022))
Declaration(Class(obo:GENO_0000029))
Declaration(Class(obo:GENO_0000030))
Declaration(Class(obo:GENO_0000033))
Declaration(Class(obo:GENO_0000036))
Declaration(Class(obo:GENO_0000037))
Declaration(Class(obo:GENO_0000042))
Declaration(Class(obo:GENO_0000047))
Declaration(Class(obo:GENO_0000054))
Declaration(Class(obo:GENO_0000057))
Declaration(Class(obo:GENO_0000060))
Declaration(Class(obo:GENO_0000091))
Declaration(Class(obo:GENO_0000092))
Declaration(Class(obo:GENO_0000093))
Declaration(Class(obo:GENO_0000106))
Declaration(Class(obo:GENO_0000108))
Declaration(Class(obo:GENO_0000111))
Declaration(Class(obo:GENO_0000112))
Declaration(Class(obo:GENO_0000113))
Declaration(Class(obo:GENO_0000118))
Declaration(Class(obo:GENO_0000119))
Declaration(Class(obo:GENO_0000125))
Declaration(Class(obo:GENO_0000131))
Declaration(Class(obo:GENO_0000132))
Declaration(Class(obo:GENO_0000133))
Declaration(Class(obo:GENO_0000134))
Declaration(Class(obo:GENO_0000135))
Declaration(Class(obo:GENO_0000136))
Declaration(Class(obo:GENO_0000137))
Declaration(Class(obo:GENO_0000138))
Declaration(Class(obo:GENO_0000139))
Declaration(Class(obo:GENO_0000140))
Declaration(Class(obo:GENO_0000141))
Declaration(Class(obo:GENO_0000142))
Declaration(Class(obo:GENO_0000143))
Declaration(Class(obo:GENO_0000144))
Declaration(Class(obo:GENO_0000145))
Declaration(Class(obo:GENO_0000146))
Declaration(Class(obo:GENO_0000147))
Declaration(Class(obo:GENO_0000148))
Declaration(Class(obo:GENO_0000149))
Declaration(Class(obo:GENO_0000150))
Declaration(Class(obo:GENO_0000152))
Declaration(Class(obo:GENO_0000160))
Declaration(Class(obo:GENO_0000164))
Declaration(Class(obo:GENO_0000165))
Declaration(Class(obo:GENO_0000166))
Declaration(Class(obo:GENO_0000169))
Declaration(Class(obo:GENO_0000170))
Declaration(Class(obo:GENO_0000171))
Declaration(Class(obo:GENO_0000172))
Declaration(Class(obo:GENO_0000173))
Declaration(Class(obo:GENO_0000174))
Declaration(Class(obo:GENO_0000175))
Declaration(Class(obo:GENO_0000324))
Declaration(Class(obo:GENO_0000338))
Declaration(Class(obo:GENO_0000339))
Declaration(Class(obo:GENO_0000343))
Declaration(Class(obo:GENO_0000344))
Declaration(Class(obo:GENO_0000345))
Declaration(Class(obo:GENO_0000346))
Declaration(Class(obo:GENO_0000351))
Declaration(Class(obo:GENO_0000391))
Declaration(Class(obo:GENO_0000392))
Declaration(Class(obo:GENO_0000393))
Declaration(Class(obo:GENO_0000394))
Declaration(Class(obo:GENO_0000402))
Declaration(Class(obo:GENO_0000415))
Declaration(Class(obo:GENO_0000458))
Declaration(Class(obo:GENO_0000460))
Declaration(Class(obo:GENO_0000476))
Declaration(Class(obo:GENO_0000477))
Declaration(Class(obo:GENO_0000480))
Declaration(Class(obo:GENO_0000481))
Declaration(Class(obo:GENO_0000482))
Declaration(Class(obo:GENO_0000491))
Declaration(Class(obo:GENO_0000492))
Declaration(Class(obo:GENO_0000494))
Declaration(Class(obo:GENO_0000495))
Declaration(Class(obo:GENO_0000497))
Declaration(Class(obo:GENO_0000498))
Declaration(Class(obo:GENO_0000499))
Declaration(Class(obo:GENO_0000500))
Declaration(Class(obo:GENO_0000501))
Declaration(Class(obo:GENO_0000502))
Declaration(Class(obo:GENO_0000504))
Declaration(Class(obo:GENO_0000506))
Declaration(Class(obo:GENO_0000511))
Declaration(Class(obo:GENO_0000512))
Declaration(Class(obo:GENO_0000513))
Declaration(Class(obo:GENO_0000515))
Declaration(Class(obo:GENO_0000516))
Declaration(Class(obo:GENO_0000524))
Declaration(Class(obo:GENO_0000525))
Declaration(Class(obo:GENO_0000527))
Declaration(Class(obo:GENO_0000528))
Declaration(Class(obo:GENO_0000529))
Declaration(Class(obo:GENO_0000533))
Declaration(Class(obo:GENO_0000534))
Declaration(Class(obo:GENO_0000536))
Declaration(Class(obo:GENO_0000575))
Declaration(Class(obo:GENO_0000602))
Declaration(Class(obo:GENO_0000603))
Declaration(Class(obo:GENO_0000604))
Declaration(Class(obo:GENO_0000605))
Declaration(Class(obo:GENO_0000606))
Declaration(Class(obo:GENO_0000611))
Declaration(Class(obo:GENO_0000614))
Declaration(Class(obo:GENO_0000616))
Declaration(Class(obo:GENO_0000618))
Declaration(Class(obo:GENO_0000619))
Declaration(Class(obo:GENO_0000620))
Declaration(Class(obo:GENO_0000621))
Declaration(Class(obo:GENO_0000622))
Declaration(Class(obo:GENO_0000623))
Declaration(Class(obo:GENO_0000624))
Declaration(Class(obo:GENO_0000625))
Declaration(Class(obo:GENO_0000628))
Declaration(Class(obo:GENO_0000629))
Declaration(Class(obo:GENO_0000632))
Declaration(Class(obo:GENO_0000633))
Declaration(Class(obo:GENO_0000637))
Declaration(Class(obo:GENO_0000638))
Declaration(Class(obo:GENO_0000640))
Declaration(Class(obo:GENO_0000642))
Declaration(Class(obo:GENO_0000644))
Declaration(Class(obo:GENO_0000645))
Declaration(Class(obo:GENO_0000646))
Declaration(Class(obo:GENO_0000647))
Declaration(Class(obo:GENO_0000649))
Declaration(Class(obo:GENO_0000659))
Declaration(Class(obo:GENO_0000660))
Declaration(Class(obo:GENO_0000666))
Declaration(Class(obo:GENO_0000667))
Declaration(Class(obo:GENO_0000680))
Declaration(Class(obo:GENO_0000681))
Declaration(Class(obo:GENO_0000684))
Declaration(Class(obo:GENO_0000685))
Declaration(Class(obo:GENO_0000688))
Declaration(Class(obo:GENO_0000701))
Declaration(Class(obo:GENO_0000702))
Declaration(Class(obo:GENO_0000713))
Declaration(Class(obo:GENO_0000714))
Declaration(Class(obo:GENO_0000715))
Declaration(Class(obo:GENO_0000719))
Declaration(Class(obo:GENO_0000720))
Declaration(Class(obo:GENO_0000721))
Declaration(Class(obo:GENO_0000722))
Declaration(Class(obo:GENO_0000724))
Declaration(Class(obo:GENO_0000725))
Declaration(Class(obo:GENO_0000736))
Declaration(Class(obo:GENO_0000737))
Declaration(Class(obo:GENO_0000768))
Declaration(Class(obo:GENO_0000770))
Declaration(Class(obo:GENO_0000772))
Declaration(Class(obo:GENO_0000773))
Declaration(Class(obo:GENO_0000777))
Declaration(Class(obo:GENO_0000778))
Declaration(Class(obo:GENO_0000779))
Declaration(Class(obo:GENO_0000780))
Declaration(Class(obo:GENO_0000781))
Declaration(Class(obo:GENO_0000782))
Declaration(Class(obo:GENO_0000788))
Declaration(Class(obo:GENO_0000815))
Declaration(Class(obo:GENO_0000818))
Declaration(Class(obo:GENO_0000823))
Declaration(Class(obo:GENO_0000833))
Declaration(Class(obo:GENO_0000839))
Declaration(Class(obo:GENO_0000848))
Declaration(Class(obo:GENO_0000850))
Declaration(Class(obo:GENO_0000856))
Declaration(Class(obo:GENO_0000861))
Declaration(Class(obo:GENO_0000870))
Declaration(Class(obo:GENO_0000871))
Declaration(Class(obo:GENO_0000872))
Declaration(Class(obo:GENO_0000873))
Declaration(Class(obo:GENO_0000874))
Declaration(Class(obo:GENO_0000875))
Declaration(Class(obo:GENO_0000876))
Declaration(Class(obo:GENO_0000877))
Declaration(Class(obo:GENO_0000878))
Declaration(Class(obo:GENO_0000879))
Declaration(Class(obo:GENO_0000880))
Declaration(Class(obo:GENO_0000881))
Declaration(Class(obo:GENO_0000882))
Declaration(Class(obo:GENO_0000883))
Declaration(Class(obo:GENO_0000885))
Declaration(Class(obo:GENO_0000886))
Declaration(Class(obo:GENO_0000887))
Declaration(Class(obo:GENO_0000888))
Declaration(Class(obo:GENO_0000889))
Declaration(Class(obo:GENO_0000890))
Declaration(Class(obo:GENO_0000891))
Declaration(Class(obo:GENO_0000892))
Declaration(Class(obo:GENO_0000893))
Declaration(Class(obo:GENO_0000897))
Declaration(Class(obo:GENO_0000898))
Declaration(Class(obo:GENO_0000899))
Declaration(Class(obo:GENO_0000901))
Declaration(Class(obo:GENO_0000902))
Declaration(Class(obo:GENO_0000904))
Declaration(Class(obo:GENO_0000907))
Declaration(Class(obo:GENO_0000910))
Declaration(Class(obo:GENO_0000911))
Declaration(Class(obo:GENO_0000912))
Declaration(Class(obo:GENO_0000914))
Declaration(Class(obo:GENO_0000915))
Declaration(Class(obo:GENO_0000916))
Declaration(Class(obo:GENO_0000918))
Declaration(Class(obo:GENO_0000919))
Declaration(Class(obo:GENO_0000920))
Declaration(Class(obo:GENO_0000921))
Declaration(Class(obo:GENO_0000922))
Declaration(Class(obo:GENO_0000923))
Declaration(Class(obo:GENO_0000924))
Declaration(Class(obo:GENO_0000925))
Declaration(Class(obo:GENO_0000926))
Declaration(Class(obo:GENO_0000927))
Declaration(Class(obo:GENO_0000928))
Declaration(Class(obo:GENO_0000929))
Declaration(Class(obo:GENO_0000930))
Declaration(Class(obo:GENO_0000931))
Declaration(Class(obo:GENO_0000932))
Declaration(Class(obo:GENO_0000933))
Declaration(Class(obo:GENO_0000934))
Declaration(Class(obo:GENO_0000935))
Declaration(Class(obo:GENO_0000936))
Declaration(Class(obo:GENO_0000937))
Declaration(Class(obo:GENO_0000938))
Declaration(Class(obo:GENO_0000939))
Declaration(Class(obo:GENO_0000941))
Declaration(Class(obo:GENO_0000942))
Declaration(Class(obo:GENO_0000943))
Declaration(Class(obo:GENO_0000944))
Declaration(Class(obo:GENO_0000945))
Declaration(Class(obo:GENO_0000946))
Declaration(Class(obo:GENO_0000947))
Declaration(Class(obo:GENO_0000948))
Declaration(Class(obo:GENO_0000949))
Declaration(Class(obo:GENO_0000952))
Declaration(Class(obo:GENO_0000953))
Declaration(Class(obo:GENO_0000954))
Declaration(Class(obo:GENO_0000955))
Declaration(Class(obo:GENO_0000956))
Declaration(Class(obo:GENO_0000960))
Declaration(Class(obo:GENO_0000961))
Declaration(Class(obo:GENO_0000962))
Declaration(Class(obo:GENO_0000963))
Declaration(Class(obo:GENO_0000964))
Declaration(Class(obo:GENO_0000965))
Declaration(Class(obo:GENO_0000969))
Declaration(Class(obo:GENO_0000970))
Declaration(Class(obo:GENO_0000971))
Declaration(Class(obo:GENO_0000972))
Declaration(Class(obo:GENO_0000974))
Declaration(Class(obo:GENO_0000975))
Declaration(Class(obo:GENO_0000976))
Declaration(Class(obo:GENO_0000978))
Declaration(Class(obo:GO_0032502))
Declaration(Class(obo:HP_0000118))
Declaration(Class(obo:HsapDv_0000000))
Declaration(Class(obo:IAO_0000030))
Declaration(Class(obo:IAO_0000102))
Declaration(Class(obo:MP_0000001))
Declaration(Class(obo:NCBITaxon_10090))
Declaration(Class(obo:NCBITaxon_10239))
Declaration(Class(obo:NCBITaxon_7955))
Declaration(Class(obo:NCBITaxon_8090))
Declaration(Class(obo:NCBITaxon_9606))
Declaration(Class(obo:OBI_0000011))
Declaration(Class(obo:OBI_0000086))
Declaration(Class(obo:OBI_0000181))
Declaration(Class(obo:OBI_0100026))
Declaration(Class(obo:PATO_0000016))
Declaration(Class(obo:PATO_0000383))
Declaration(Class(obo:PATO_0000384))
Declaration(Class(obo:PATO_0001894))
Declaration(Class(obo:PCO_0000000))
Declaration(Class(obo:PCO_0000020))
Declaration(Class(obo:SO_0000034))
Declaration(Class(obo:SO_0000105))
Declaration(Class(obo:SO_0000110))
Declaration(Class(obo:SO_0000143))
Declaration(Class(obo:SO_0000149))
Declaration(Class(obo:SO_0000159))
Declaration(Class(obo:SO_0000165))
Declaration(Class(obo:SO_0000167))
Declaration(Class(obo:SO_0000199))
Declaration(Class(obo:SO_0000207))
Declaration(Class(obo:SO_0000248))
Declaration(Class(obo:SO_0000281))
Declaration(Class(obo:SO_0000289))
Declaration(Class(obo:SO_0000337))
Declaration(Class(obo:SO_0000340))
Declaration(Class(obo:SO_0000341))
Declaration(Class(obo:SO_0000577))
Declaration(Class(obo:SO_0000637))
Declaration(Class(obo:SO_0000667))
Declaration(Class(obo:SO_0000694))
Declaration(Class(obo:SO_0000699))
Declaration(Class(obo:SO_0000704))
Declaration(Class(obo:SO_0000771))
Declaration(Class(obo:SO_0000783))
Declaration(Class(obo:SO_0000804))
Declaration(Class(obo:SO_0000830))
Declaration(Class(obo:SO_0000902))
Declaration(Class(obo:SO_0001013))
Declaration(Class(obo:SO_0001019))
Declaration(Class(obo:SO_0001026))
Declaration(Class(obo:SO_0001059))
Declaration(Class(obo:SO_0001218))
Declaration(Class(obo:SO_0001410))
Declaration(Class(obo:SO_0001477))
Declaration(Class(obo:SO_0001478))
Declaration(Class(obo:SO_0001479))
Declaration(Class(obo:SO_0001483))
Declaration(Class(obo:SO_0001500))
Declaration(Class(obo:SO_0001505))
Declaration(Class(obo:SO_0001742))
Declaration(Class(obo:SO_0001743))
Declaration(Class(obo:SO_0001744))
Declaration(Class(obo:SO_0001745))
Declaration(Class(obo:SO_0001746))
Declaration(Class(obo:SO_0001784))
Declaration(Class(obo:SO_0001785))
Declaration(Class(obo:SO_0005836))
Declaration(Class(obo:SO_1000002))
Declaration(Class(obo:SO_1000005))
Declaration(Class(obo:SO_1000008))
Declaration(Class(obo:SO_1000009))
Declaration(Class(obo:SO_1000010))
Declaration(Class(obo:SO_1000011))
Declaration(Class(obo:SO_1000012))
Declaration(Class(obo:SO_1000013))
Declaration(Class(obo:SO_1000014))
Declaration(Class(obo:SO_1000015))
Declaration(Class(obo:SO_1000016))
Declaration(Class(obo:SO_1000017))
Declaration(Class(obo:SO_1000018))
Declaration(Class(obo:SO_1000019))
Declaration(Class(obo:SO_1000020))
Declaration(Class(obo:SO_1000021))
Declaration(Class(obo:SO_1000022))
Declaration(Class(obo:SO_1000023))
Declaration(Class(obo:SO_1000024))
Declaration(Class(obo:SO_1000025))
Declaration(Class(obo:SO_1000026))
Declaration(Class(obo:SO_1000027))
Declaration(Class(obo:SO_1000032))
Declaration(Class(obo:SO_1000035))
Declaration(Class(obo:SO_1000036))
Declaration(Class(obo:SO_1000039))
Declaration(Class(obo:SO_1000040))
Declaration(Class(obo:SO_1000173))
Declaration(Class(obo:UBERON_0000105))
Declaration(Class(obo:UBERON_0001062))
Declaration(Class(obo:UPHENO_0001001))
Declaration(Class(obo:WBPhenotype_0000886))
Declaration(Class(obo:ZP_0000199))
Declaration(Class(obo:ZP_0000386))
Declaration(Class(obo:ZP_0000755))
Declaration(Class(obo:ZP_0005531))
Declaration(Class(obo:ZP_0005692))
Declaration(Class(<http://purl.org/oban/association>))
Declaration(Class(<http://www.ncbi.nlm.nih.gov/gene/20423>))
Declaration(Class(<http://www.ncbi.nlm.nih.gov/gene/30269>))
Declaration(Class(<http://www.ncbi.nlm.nih.gov/gene/399483>))
Declaration(Class(<http://www.ncbi.nlm.nih.gov/gene/6469>))
Declaration(ObjectProperty(<http://biohackathon.org/resource/faldo#begin>))
Declaration(ObjectProperty(<http://biohackathon.org/resource/faldo#end>))
Declaration(ObjectProperty(<http://biohackathon.org/resource/faldo#location>))
Declaration(ObjectProperty(<http://biohackathon.org/resource/faldo#reference>))
Declaration(ObjectProperty(obo:BFO_0000050))
Declaration(ObjectProperty(obo:BFO_0000051))
Declaration(ObjectProperty(obo:GENO_0000207))
Declaration(ObjectProperty(obo:GENO_0000211))
Declaration(ObjectProperty(obo:GENO_0000220))
Declaration(ObjectProperty(obo:GENO_0000222))
Declaration(ObjectProperty(obo:GENO_0000231))
Declaration(ObjectProperty(obo:GENO_0000239))
Declaration(ObjectProperty(obo:GENO_0000242))
Declaration(ObjectProperty(obo:GENO_0000243))
Declaration(ObjectProperty(obo:GENO_0000244))
Declaration(ObjectProperty(obo:GENO_0000248))
Declaration(ObjectProperty(obo:GENO_0000251))
Declaration(ObjectProperty(obo:GENO_0000252))
Declaration(ObjectProperty(obo:GENO_0000253))
Declaration(ObjectProperty(obo:GENO_0000359))
Declaration(ObjectProperty(obo:GENO_0000368))
Declaration(ObjectProperty(obo:GENO_0000382))
Declaration(ObjectProperty(obo:GENO_0000383))
Declaration(ObjectProperty(obo:GENO_0000385))
Declaration(ObjectProperty(obo:GENO_0000387))
Declaration(ObjectProperty(obo:GENO_0000408))
Declaration(ObjectProperty(obo:GENO_0000410))
Declaration(ObjectProperty(obo:GENO_0000411))
Declaration(ObjectProperty(obo:GENO_0000413))
Declaration(ObjectProperty(obo:GENO_0000414))
Declaration(ObjectProperty(obo:GENO_0000418))
Declaration(ObjectProperty(obo:GENO_0000443))
Declaration(ObjectProperty(obo:GENO_0000445))
Declaration(ObjectProperty(obo:GENO_0000447))
Declaration(ObjectProperty(obo:GENO_0000449))
Declaration(ObjectProperty(obo:GENO_0000486))
Declaration(ObjectProperty(obo:GENO_0000488))
Declaration(ObjectProperty(obo:GENO_0000580))
Declaration(ObjectProperty(obo:GENO_0000608))
Declaration(ObjectProperty(obo:GENO_0000610))
Declaration(ObjectProperty(obo:GENO_0000626))
Declaration(ObjectProperty(obo:GENO_0000634))
Declaration(ObjectProperty(obo:GENO_0000639))
Declaration(ObjectProperty(obo:GENO_0000641))
Declaration(ObjectProperty(obo:GENO_0000650))
Declaration(ObjectProperty(obo:GENO_0000651))
Declaration(ObjectProperty(obo:GENO_0000652))
Declaration(ObjectProperty(obo:GENO_0000653))
Declaration(ObjectProperty(obo:GENO_0000654))
Declaration(ObjectProperty(obo:GENO_0000655))
Declaration(ObjectProperty(obo:GENO_0000661))
Declaration(ObjectProperty(obo:GENO_0000683))
Declaration(ObjectProperty(obo:GENO_0000708))
Declaration(ObjectProperty(obo:GENO_0000726))
Declaration(ObjectProperty(obo:GENO_0000740))
Declaration(ObjectProperty(obo:GENO_0000741))
Declaration(ObjectProperty(obo:GENO_0000742))
Declaration(ObjectProperty(obo:GENO_0000743))
Declaration(ObjectProperty(obo:GENO_0000761))
Declaration(ObjectProperty(obo:GENO_0000767))
Declaration(ObjectProperty(obo:GENO_0000783))
Declaration(ObjectProperty(obo:GENO_0000784))
Declaration(ObjectProperty(obo:GENO_0000790))
Declaration(ObjectProperty(obo:GENO_0000791))
Declaration(ObjectProperty(obo:GENO_0000793))
Declaration(ObjectProperty(obo:GENO_0000794))
Declaration(ObjectProperty(obo:GENO_0000840))
Declaration(ObjectProperty(obo:GENO_0000841))
Declaration(ObjectProperty(obo:GENO_0000842))
Declaration(ObjectProperty(obo:GENO_0000843))
Declaration(ObjectProperty(obo:GENO_0000844))
Declaration(ObjectProperty(obo:GENO_0000845))
Declaration(ObjectProperty(obo:GENO_0000846))
Declaration(ObjectProperty(obo:GENO_0000847))
Declaration(ObjectProperty(obo:GENO_0000849))
Declaration(ObjectProperty(obo:GENO_0000903))
Declaration(ObjectProperty(obo:GENO_0000906))
Declaration(ObjectProperty(obo:GENO_0000957))
Declaration(ObjectProperty(obo:GENO_0000958))
Declaration(ObjectProperty(obo:GENO_0000959))
Declaration(ObjectProperty(obo:GENO_0000966))
Declaration(ObjectProperty(obo:GENO_0000967))
Declaration(ObjectProperty(obo:GENO_0000968))
Declaration(ObjectProperty(obo:IAO_0000136))
Declaration(ObjectProperty(obo:IAO_0000219))
Declaration(ObjectProperty(obo:OBI_0000293))
Declaration(ObjectProperty(obo:OBI_0000299))
Declaration(ObjectProperty(obo:RO_0000052))
Declaration(ObjectProperty(obo:RO_0000053))
Declaration(ObjectProperty(obo:RO_0000056))
Declaration(ObjectProperty(obo:RO_0000057))
Declaration(ObjectProperty(obo:RO_0000059))
Declaration(ObjectProperty(obo:RO_0000086))
Declaration(ObjectProperty(obo:RO_0000087))
Declaration(ObjectProperty(obo:RO_0000091))
Declaration(ObjectProperty(obo:RO_0001000))
Declaration(ObjectProperty(obo:RO_0002091))
Declaration(ObjectProperty(obo:RO_0002093))
Declaration(ObjectProperty(obo:RO_0002131))
Declaration(ObjectProperty(obo:RO_0002162))
Declaration(ObjectProperty(obo:RO_0002200))
Declaration(ObjectProperty(obo:RO_0002201))
Declaration(ObjectProperty(obo:RO_0002222))
Declaration(ObjectProperty(obo:RO_0002233))
Declaration(ObjectProperty(obo:RO_0002234))
Declaration(ObjectProperty(obo:RO_0002350))
Declaration(ObjectProperty(obo:RO_0002351))
Declaration(ObjectProperty(obo:RO_0002352))
Declaration(ObjectProperty(obo:RO_0002353))
Declaration(ObjectProperty(obo:RO_0002354))
Declaration(ObjectProperty(obo:RO_000244))
Declaration(ObjectProperty(obo:RO_0002522))
Declaration(ObjectProperty(obo:RO_0002524))
Declaration(ObjectProperty(obo:RO_0002525))
Declaration(ObjectProperty(obo:RO_0002526))
Declaration(ObjectProperty(obo:RO_0002528))
Declaration(ObjectProperty(obo:RO_0002529))
Declaration(ObjectProperty(obo:RO_0003301))
Declaration(ObjectProperty(obo:RO_0003302))
Declaration(ObjectProperty(obo:RO_0003303))
Declaration(ObjectProperty(obo:RO_0003304))
Declaration(ObjectProperty(obo:RO_0003305))
Declaration(ObjectProperty(obo:RO_0003306))
Declaration(ObjectProperty(obo:RO_0003307))
Declaration(ObjectProperty(obo:RO_0003308))
Declaration(ObjectProperty(<http://purl.org/oban/association_has_object>))
Declaration(ObjectProperty(<http://purl.org/oban/association_has_predicate>))
Declaration(ObjectProperty(<http://purl.org/oban/association_has_subject>))
Declaration(ObjectProperty(oboInOwl:ObsoleteProperty))
Declaration(DataProperty(<http://biohackathon.org/resource/faldo#position>))
Declaration(DataProperty(obo:GENO_0000678))
Declaration(DataProperty(obo:GENO_0000703))
Declaration(DataProperty(obo:GENO_0000712))
Declaration(DataProperty(obo:GENO_0000866))
Declaration(DataProperty(obo:GENO_0000894))
Declaration(DataProperty(obo:GENO_0000895))
Declaration(DataProperty(obo:GENO_0000896))
Declaration(DataProperty(obo:GENO_0000917))
Declaration(NamedIndividual(obo:GENO_0000484))
Declaration(NamedIndividual(obo:GENO_0000514))
Declaration(AnnotationProperty(obo:GENO_0000834))
Declaration(AnnotationProperty(obo:GENO_0000867))
Declaration(AnnotationProperty(obo:GENO_0000905))
Declaration(AnnotationProperty(obo:GENO_0000909))
Declaration(AnnotationProperty(obo:IAO_alt_id))
Declaration(AnnotationProperty(obo:IAO_created_by))
Declaration(AnnotationProperty(obo:IAO_creation_date))
Declaration(AnnotationProperty(obo:IAO_id))
Declaration(AnnotationProperty(obo:IAO_subset))
Declaration(AnnotationProperty(obo:IAO_xref))
Declaration(AnnotationProperty(dce:description))
Declaration(AnnotationProperty(dce:title))
Declaration(AnnotationProperty(dcterms:license))
Declaration(AnnotationProperty(dcterms:source))
Declaration(AnnotationProperty(oboInOwl:hasDbXref))
############################
#   Annotation Properties
############################

# Annotation Property: obo:GENO_0000834 (is_identity_criteria)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000834 "Used to annotation axioms that define identity criteria for instances of a class.")
AnnotationAssertion(rdfs:label obo:GENO_0000834 "is_identity_criteria"@en)
AnnotationPropertyRange(obo:GENO_0000834 xsd:boolean)

# Annotation Property: obo:GENO_0000867 (proabalistic_quantifier)

AnnotationAssertion(rdfs:label obo:GENO_0000867 "proabalistic_quantifier"@en)

# Annotation Property: obo:GENO_0000905 (mixin)

AnnotationAssertion(rdfs:comment obo:GENO_0000905 "Used to flag terms that are created for organizational purposes, e.g. to support groupings useful for defining GENO-based data models.")
AnnotationAssertion(rdfs:label obo:GENO_0000905 "mixin"@en)
AnnotationPropertyRange(obo:GENO_0000905 xsd:boolean)

# Annotation Property: obo:GENO_0000909 (gene symbol)

AnnotationAssertion(rdfs:label obo:GENO_0000909 "gene symbol"@en)


############################
#   Object Properties
############################

# Object Property: <http://biohackathon.org/resource/faldo#begin> (begin)

AnnotationAssertion(rdfs:label <http://biohackathon.org/resource/faldo#begin> "begin"@en)
SubObjectPropertyOf(<http://biohackathon.org/resource/faldo#begin> obo:GENO_0000708)

# Object Property: <http://biohackathon.org/resource/faldo#end> (end)

AnnotationAssertion(rdfs:label <http://biohackathon.org/resource/faldo#end> "end"@en)
SubObjectPropertyOf(<http://biohackathon.org/resource/faldo#end> obo:GENO_0000708)

# Object Property: <http://biohackathon.org/resource/faldo#location> (location)

AnnotationAssertion(rdfs:label <http://biohackathon.org/resource/faldo#location> "location"@en)
SubObjectPropertyOf(<http://biohackathon.org/resource/faldo#location> obo:GENO_0000708)

# Object Property: <http://biohackathon.org/resource/faldo#reference> (reference (faldo))

AnnotationAssertion(obo:IAO_0000115 <http://biohackathon.org/resource/faldo#reference> "The reference is the resource that the position value is anchored to.  For example, a contig or chromosome in a genome assembly.")
AnnotationAssertion(rdfs:label <http://biohackathon.org/resource/faldo#reference> "reference (faldo)")
SubObjectPropertyOf(<http://biohackathon.org/resource/faldo#reference> obo:GENO_0000708)

# Object Property: obo:BFO_0000050 (is part of)

AnnotationAssertion(rdfs:label obo:BFO_0000050 "is part of")
SubObjectPropertyOf(obo:BFO_0000050 obo:RO_0002131)
InverseObjectProperties(obo:BFO_0000050 obo:BFO_0000051)
TransitiveObjectProperty(obo:BFO_0000050)

# Object Property: obo:BFO_0000051 (has part)

AnnotationAssertion(rdfs:label obo:BFO_0000051 "has part")
SubObjectPropertyOf(obo:BFO_0000051 obo:RO_0002131)
TransitiveObjectProperty(obo:BFO_0000051)

# Object Property: obo:GENO_0000207 (has_sequence_attribute)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000207 "A relation used to link sequence entities (sequences, features, qualified features, and collections thereof) to their 'attributes'.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000207 "Used in lieu of RO/BFO has_quality as this relation is definend to apply to independent contiinuant bearers, wheras sequence entities are generically dependent continuants.")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000207 "http://purl.obolibrary.org/obo/so_has_quality")
AnnotationAssertion(rdfs:label obo:GENO_0000207 "has_sequence_attribute")
SubObjectPropertyOf(obo:GENO_0000207 owl:topObjectProperty)
ObjectPropertyDomain(obo:GENO_0000207 ObjectUnionOf(obo:GENO_0000701 obo:GENO_0000702 obo:GENO_0000713))

# Object Property: obo:GENO_0000211 (bears_concretization_of)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000211 "A relation between a material information bearer or material genetic sequence bearer and generically dependent continuant that carries information or sequence content that the bearer encodes")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000211 "materializes")
AnnotationAssertion(rdfs:comment obo:GENO_0000211 "Shortcut relation expanding to bearer_of some (concretizes some . . . ), linking a material information bearer or sequence macromolecule to some ICE or GDC sequence.")
AnnotationAssertion(rdfs:label obo:GENO_0000211 "bears_concretization_of")

# Object Property: obo:GENO_0000220 (is_genotype_of)

AnnotationAssertion(rdfs:label obo:GENO_0000220 "is_genotype_of")
InverseObjectProperties(obo:GENO_0000220 obo:GENO_0000222)

# Object Property: obo:GENO_0000222 (has_genotype)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000222 "A relationship that holds between a biological entity and some level of genetic variation present in its genome.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000222 "This relation aims to be equally as broad/inclusive as RO:0002200 ! has_phenotype.")
AnnotationAssertion(rdfs:comment obo:GENO_0000222 "The biological entity can be an organism, a group of organism that share common genotype, or organism-derived entities such as cell lines or  biospecimens. The genotype can be any of the various flavors of genotypes/allelotypes defined in GENO (intrinsic genotype, extrinsic genotype, effective genotype), or any genetic variation component of a genotype including variant alleles or sequence alterations.")
AnnotationAssertion(rdfs:label obo:GENO_0000222 "has_genotype")
ObjectPropertyDomain(obo:GENO_0000222 ObjectUnionOf(obo:GENO_0000536 ObjectSomeValuesFrom(obo:BFO_0000050 obo:GENO_0000536)))

# Object Property: obo:GENO_0000231 (has_proper_part)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000231 "An antisymmetric, irreflexive (normally transitive) relation between a whole and a distinct part (source: SIO)")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000231 "No proper part relation anymore in RO/BFO?")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000231 "http://semanticscience.org/resource/SIO_000053")
AnnotationAssertion(rdfs:label obo:GENO_0000231 "has_proper_part")
SubObjectPropertyOf(obo:GENO_0000231 obo:BFO_0000051)
InverseObjectProperties(obo:GENO_0000231 obo:GENO_0000248)
TransitiveObjectProperty(obo:GENO_0000231)

# Object Property: obo:GENO_0000239 (has_sequence)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000239 "A relationship between an entity that carries a sequence (e.g. a sequence feature or collection), and the sequence it bears.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000239 "has_sequence_component")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000239 "has_state")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000239 "VMC:state")
AnnotationAssertion(rdfs:comment obo:GENO_0000239 "'Sequence' in the context of GENO is an abstract entity representing an ordered collection of monomeric units as carried in a biological macromolecule.")
AnnotationAssertion(rdfs:label obo:GENO_0000239 "has_sequence")
InverseObjectProperties(obo:GENO_0000239 obo:GENO_0000251)
ObjectPropertyRange(obo:GENO_0000239 obo:GENO_0000702)

# Object Property: obo:GENO_0000242 (obsolete_specifies)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000242 "A geno:intrinnsic genotype 'specifies' a SO:genome.
A geno:karyotype 'specifies' a geno:karyotype feature collection.")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000242 "A relationship between an information content entity representing a specification, and the entity it specifies.")
AnnotationAssertion(rdfs:label obo:GENO_0000242 "obsolete_specifies")
AnnotationAssertion(owl:deprecated obo:GENO_0000242 "true"^^xsd:boolean)
SubObjectPropertyOf(obo:GENO_0000242 oboInOwl:ObsoleteProperty)

# Object Property: obo:GENO_0000243 (obsolete_approximates_sequence)

AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000243 "Created subproperties 'approximates_sequence' and 'resolves to sequence'. Genotypes and other sequence variant artifacts are not always expected to completely specify a sequence, but rather provide some approximation based on available knowledge. The 'resolves_to_sequence' property can be used when the sequence variant artifact is able to completely resolve a sequence, and the 'approximates_sequence' property can be used when it does not. ")
AnnotationAssertion(rdfs:label obo:GENO_0000243 "obsolete_approximates_sequence")
AnnotationAssertion(owl:deprecated obo:GENO_0000243 "true"^^xsd:boolean)
SubObjectPropertyOf(obo:GENO_0000243 oboInOwl:ObsoleteProperty)

# Object Property: obo:GENO_0000244 (obsolete_resolves_to_sequence)

AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000244 "Created subproperties 'approximates_sequence' and 'resolves to sequence'. Genotypes and other sequence variant artifacts are not always expected to completely specify a sequence, but rather provide some approximation based on available knowledge. The 'resolves_to_sequence' property can be used when the sequence variant artifact is able to completely resolve a sequence, and the 'approximates_sequence' property can be used when it does not. ")
AnnotationAssertion(rdfs:label obo:GENO_0000244 "obsolete_resolves_to_sequence")
AnnotationAssertion(owl:deprecated obo:GENO_0000244 "true"^^xsd:boolean)
SubObjectPropertyOf(obo:GENO_0000244 oboInOwl:ObsoleteProperty)

# Object Property: obo:GENO_0000248 (is_proper_part_of)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000248 "An asymmetric, irreflexive (normally transitive) relation between a part and its distinct whole.")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000248 "http://semanticscience.org/resource/SIO_000093")
AnnotationAssertion(rdfs:label obo:GENO_0000248 "is_proper_part_of")
SubObjectPropertyOf(obo:GENO_0000248 obo:BFO_0000050)

# Object Property: obo:GENO_0000251 (is_sequence_of)

AnnotationAssertion(rdfs:label obo:GENO_0000251 "is_sequence_of")
ObjectPropertyDomain(obo:GENO_0000251 obo:GENO_0000702)

# Object Property: obo:GENO_0000252 (is_subject_of)

AnnotationAssertion(rdfs:label obo:GENO_0000252 "is_subject_of")
InverseObjectProperties(obo:GENO_0000252 obo:IAO_0000136)

# Object Property: obo:GENO_0000253 (obsolete_is_specified_by)

AnnotationAssertion(rdfs:label obo:GENO_0000253 "obsolete_is_specified_by")
AnnotationAssertion(owl:deprecated obo:GENO_0000253 "true"^^xsd:boolean)
SubObjectPropertyOf(obo:GENO_0000253 oboInOwl:ObsoleteProperty)

# Object Property: obo:GENO_0000359 (obsolete_is_phenotype_of_genotype)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000359 "shortcut relation used to link a phenotype directly to a genotype of an organism")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000359 "is_phenotype_of_organism_with_genotype")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000359 "is_phenotype_with_genotype")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000359 "phenotype_has_genotype")
AnnotationAssertion(rdfs:comment obo:GENO_0000359 "Might expand to something like:

phenotype and (is_phenotype_of some (organism and (has_part some ('material genome' and (is_subject_of some (genome and (is_specified_by some genotype)))))))")
AnnotationAssertion(rdfs:label obo:GENO_0000359 "obsolete_is_phenotype_of_genotype")
AnnotationAssertion(owl:deprecated obo:GENO_0000359 "true"^^xsd:boolean)
SubObjectPropertyOf(obo:GENO_0000359 oboInOwl:ObsoleteProperty)

# Object Property: obo:GENO_0000368 (obsolete_participates_in_inheritance_process)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000368 "A relation to link variant loci, phenotypes, or disease to the type of inheritance process they are involved in, based on how the genetic interactions between alleles at the causative locus determine the pattern of inheritance of a specific phenotype/disease from one generation to the next.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000368 "Exploratory/temporary property, as we formalize our phenotypic inheritance model.")
AnnotationAssertion(rdfs:label obo:GENO_0000368 "obsolete_participates_in_inheritance_process")
AnnotationAssertion(owl:deprecated obo:GENO_0000368 "true"^^xsd:boolean)
SubObjectPropertyOf(obo:GENO_0000368 oboInOwl:ObsoleteProperty)
ObjectPropertyRange(obo:GENO_0000368 obo:GENO_0000141)

# Object Property: obo:GENO_0000382 (has_variant_part)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000382 "A relation between a sequence entity (i.e. a sequence, feature, or qualified feature) and a part of this entity that is variant in terms of its sequence, position, or expression.")
AnnotationAssertion(rdfs:label obo:GENO_0000382 "has_variant_part"@en)
SubObjectPropertyOf(obo:GENO_0000382 obo:GENO_0000654)
InverseObjectProperties(obo:GENO_0000382 obo:GENO_0000383)
TransitiveObjectProperty(obo:GENO_0000382)

# Object Property: obo:GENO_0000383 (is_variant_part_of)

AnnotationAssertion(rdfs:label obo:GENO_0000383 "is_variant_part_of"@en)
SubObjectPropertyOf(obo:GENO_0000383 obo:GENO_0000655)
TransitiveObjectProperty(obo:GENO_0000383)

# Object Property: obo:GENO_0000385 (has_reference_part)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000385 "A relation between a sequence entity (i.e. a sequence, feature, or qualified feature) and a part of this entity that is not variant.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000385 "has_reference_sequence_part")
AnnotationAssertion(rdfs:label obo:GENO_0000385 "has_reference_part")
SubObjectPropertyOf(obo:GENO_0000385 obo:GENO_0000654)
InverseObjectProperties(obo:GENO_0000385 obo:GENO_0000387)
TransitiveObjectProperty(obo:GENO_0000385)

# Object Property: obo:GENO_0000387 (is_reference_part_of)

AnnotationAssertion(rdfs:label obo:GENO_0000387 "is_reference_part_of")
SubObjectPropertyOf(obo:GENO_0000387 obo:GENO_0000655)

# Object Property: obo:GENO_0000408 (is_allele_of)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000408 "<fgf8a^ti282a>  is_allele_of  the 'danio rerio fgf8a' gene locus.")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000408 "A relation linking an instance of a variable feature (aka an allele) to a genomic location/locus it occupies. This is typically a gene locus, but a feature may be an allele of other types of named loci such as QTLs, or alleles of some unnamed locus of arbitrary size.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000408 "Domain = allele 
Range = genomic locus (but in practice it is common to use a punned gene class IRI as the subject of this relation).")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000408 "Note that  the allele <fgf8a^ti282a>  is not necessarily an instance of the danio rerio fgf8a gene class, given that we adopt the SO definition of genes as 'producing a functional product'.  If the <fgf8a^ti282a> allele is nonfunctional or null, it is an allele_of the danio rerio fgf8a gene class, but not an instance (rdf:type) of this class. It would, however, bean instance of  a  'danio rerio fgf8a gene allele' class - because being a 'gene allele' as defined in GENO requires only occupying the genomic position where for a gene, but not necessarily producing a functional product.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000408 "is_sequence_variant_of")
AnnotationAssertion(rdfs:comment obo:GENO_0000408 "To allow users to make important distinctions in discourse and modeling, GENO clearly separates the notions/levels of 'biological sequence', 'sequence feature', and 'sequence location' ('genomic locus' when found in a genome). This sets up an important terminological nuance when it comes to alleles, where we believe it correct to say that a particular genomic feature is an alleles_of some genomic locus (as opposed to an allele_of some sequence or some feature). This is typically a gene locus, but even insertions falling outside of genes are considered alleles_of the locus they alter (e.g. alleles of other types of named loci such as QTLs, or alleles of some unnamed locus of arbitrary size).

While conceptually it is most correct to say features are alleles_of some genomic locus, it is common practice to say that they are alleles of the class of feature defined to reside at that locus (typically a gene).  Accordingly, we may write things like \"fgf8a<ti282a> is an allele of the Danio rerio fgf8a gene\", and we may create data where fgf8a<ti282a> is asserted as an allele_of  the fgf8a gene class IRI. But here we mean more precisely that it is an allele of the locus at which the fgf8a gene resides.  Allowing for this means that we dont have to create 'feature-based location/locus' terms mirroing all feature class terms already in exiistence (e.g. for every gene).

It is important to be clear that the location/locus that a feature is an allele_of is defined exclusively by its genomic position, and not on the sequence it may contains. This is particularly relevant when considering transgenic insertions. For example, this means that the insertion of the S. cerevisiae GAL4 gene sequence within the D. melanogaster Bx gene locus would create an allele of the D. melanogaster Bx gene, but not an allele of the S. cerevisiae GAL4 gene. The transgene that results from such an insertion, while expressing S. cerevisiae GAL4 gene sequence, is not an allele of this gene because it does not reside at the S. cerevisiae GAL4 locus. 

This departs from how some databases use the term 'allele' - where transgenes expressing an exogenous gene are considered to be alleles of the exogenous genes they carry.  For example, in the example above, Flybase describes the S. cerevisiae GAL4 transgene as an allele_of the  S. cerevisiae GAL4 gene (and gives it the allele identifier FBal0040476). A GENO representation on the other hand would say that the S. cerevisiae GAL4 transgene derives_sequence_from the S. cerevisiae GAL4 gene, but is not an allele_of this gene. In a GENO model, FBal0040476 would be typed as a transgene insertion, but not considered an allele_of the Scer\\GAL4 gene.

At the end of the day, it's just semantics, but worth clarifying given the ubiquity and variable use of the term 'allele'. The GENO model attempts to define and adhere to the principled notion of positionally-defined 'alleles', and functionally-defined 'transgenes'.")
AnnotationAssertion(rdfs:label obo:GENO_0000408 "is_allele_of")
SubObjectPropertyOf(obo:GENO_0000408 obo:GENO_0000418)
InverseObjectProperties(obo:GENO_0000408 obo:GENO_0000413)
ObjectPropertyDomain(obo:GENO_0000408 obo:GENO_0000481)

# Object Property: obo:GENO_0000410 (obsolete_is_genetic_variant_of)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000410 "A relation used to link a variant locus instance to the gene class it is a variant of (in terms of its sequence or expression level).")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000410 "is_variant_instance_of")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000410 "formerly grouped is_allele_of and is_expression_variant_of proerpties under feature to class proeprty (now renmaed has_affected_locus)")
AnnotationAssertion(rdfs:comment obo:GENO_0000410 "Domain = genomic feature instance
Range = punned gene class IRI")
AnnotationAssertion(rdfs:label obo:GENO_0000410 "obsolete_is_genetic_variant_of")
AnnotationAssertion(owl:deprecated obo:GENO_0000410 "true"^^xsd:boolean)
SubObjectPropertyOf(obo:GENO_0000410 oboInOwl:ObsoleteProperty)

# Object Property: obo:GENO_0000411 (obsolete_has_genetic_variant)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000411 "A relation linking a gene class to a sequence-varaint or expression-variant of the gene.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000411 "has_variant_instance")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000411 "formerly grouped has_allele and has_expression_variant proerpties under cllass to feature property (now renamed locus_affected_by)")
AnnotationAssertion(rdfs:comment obo:GENO_0000411 "Domain = punned gene class
Range = genomic feature")
AnnotationAssertion(rdfs:label obo:GENO_0000411 "obsolete_has_genetic_variant")
AnnotationAssertion(owl:deprecated obo:GENO_0000411 "true"^^xsd:boolean)
SubObjectPropertyOf(obo:GENO_0000411 oboInOwl:ObsoleteProperty)

# Object Property: obo:GENO_0000413 (has_allele)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000413 "A relation linking a gene class to one of its sequence-variant alleles.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000413 "Domain = punned gene class
Range = allele")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000413 "has_sequence_variant")
AnnotationAssertion(rdfs:label obo:GENO_0000413 "has_allele")
SubObjectPropertyOf(obo:GENO_0000413 obo:GENO_0000445)

# Object Property: obo:GENO_0000414 (targets_gene)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000414 "A relation between a gene targeting reagent (e.g. a morpholino or RNAi) and the class of gene it targets.")
AnnotationAssertion(rdfs:comment obo:GENO_0000414 "This is intended to be used as an instance-class relation, used for linking an instance of a gene targeting reagent to the class of gene whose instances it targets.")
AnnotationAssertion(rdfs:label obo:GENO_0000414 "targets_gene")
SubObjectPropertyOf(obo:GENO_0000414 obo:GENO_0000418)
InverseObjectProperties(obo:GENO_0000414 obo:GENO_0000447)

# Object Property: obo:GENO_0000418 (has_affected_feature)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000418 "A relation that holds between an instance of a geneetic variation and a genomic feature (typically a gene class) that is affected in its sequence or expression.")
AnnotationAssertion(rdfs:comment obo:GENO_0000418 "This class to organizes all relations used to link genetic variation instances of any type to genomic feature classes they effect. For example, is_allele_of links a gene allele instance to its gene class (genes are represented as classes in our OWL model). Such links support phenotype propagation from alleles to genes for Monarch Initiative use cases. Use of these properties effectively puns gene class IRIs into owl:individuals in a given rdf datset.")
AnnotationAssertion(rdfs:label obo:GENO_0000418 "has_affected_feature")
InverseObjectProperties(obo:GENO_0000418 obo:GENO_0000445)

# Object Property: obo:GENO_0000443 (is_expression_variant_of)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000443 "A relation between an expression-variant gene (ie integrated transgenes or knockdown reagent targeted genes), and the class of gene it represents.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000443 "Domain = expression variant feature.
Range = punned gene class")
AnnotationAssertion(rdfs:comment obo:GENO_0000443 "This relation links an expression-variant gene instance (targeted or transgenic) to the class of gene that it preresents. For transient transgenes, this is the gene, the coding sequence need only to contain as part an expressed region from a given gene to stand in an is_expression_variant_of relation to the gene class.")
AnnotationAssertion(rdfs:label obo:GENO_0000443 "is_expression_variant_of")
SubObjectPropertyOf(obo:GENO_0000443 obo:GENO_0000418)
InverseObjectProperties(obo:GENO_0000443 obo:GENO_0000449)

# Object Property: obo:GENO_0000445 (is_feature_affected_by)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000445 "A relation between a genomic feature class (typically a gene class) and an instance of a sequence feature or qualified sequence feature that represents or affects some change in the sequence or expression of the genomic feature.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000445 "class_to_feature_relation")
AnnotationAssertion(rdfs:comment obo:GENO_0000445 "This is an organizational grouping class to collect all relations used to link genomic feature classes (typically genes) to instance of a genomic feature sequence feature or qualified sequence feature. For example, linking a gene class IRI to an instance of an allele of that gene class. Such links support phenotype propagation from features/variants to genes (e.g. for Monarch Initiative use cases)")
AnnotationAssertion(rdfs:label obo:GENO_0000445 "is_feature_affected_by")

# Object Property: obo:GENO_0000447 (is_gene_target_of)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000447 "A relation between a gene class and a gene targeting reagent that targets it.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000447 "is_target_of")
AnnotationAssertion(rdfs:comment obo:GENO_0000447 "Domain = punned gene class
Range = gene knockdown reagent")
AnnotationAssertion(rdfs:label obo:GENO_0000447 "is_gene_target_of")
SubObjectPropertyOf(obo:GENO_0000447 obo:GENO_0000445)

# Object Property: obo:GENO_0000449 (has_expression_variant)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000449 "A relation linking a gene class to one of an expression-variant of that gene..")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000449 "Domain = punned gene class
Range = expression variant feature")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000449 "has_expression_variant_instance")
AnnotationAssertion(rdfs:label obo:GENO_0000449 "has_expression_variant")
SubObjectPropertyOf(obo:GENO_0000449 obo:GENO_0000445)

# Object Property: obo:GENO_0000486 (obsolete_is_variant_with)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000486 "A relation between two sequence features at a given genomic locus that vary in their sequence or level of expression.")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000486 "Decided there was no need for a contrasting is_expression_variant_with property, so removed it and this parent grouping property.")
AnnotationAssertion(rdfs:comment obo:GENO_0000486 "This proeprty is most commonly used to relate two different alleles of a given gene.  It is not a relation between an allele and the gene it is a variant of.")
AnnotationAssertion(rdfs:label obo:GENO_0000486 "obsolete_is_variant_with"@en)
AnnotationAssertion(owl:deprecated obo:GENO_0000486 "true"^^xsd:boolean)
SubObjectPropertyOf(obo:GENO_0000486 oboInOwl:ObsoleteProperty)

# Object Property: obo:GENO_0000488 (obsolete_is_expression_variant_with)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000488 "A relation between two instances of a given gene that vary in their level of expression as a result of external factors influencing expression (e.g. gnee-knockdown reagents, epigenetic modification, alteration of endogenous gene-regulation pathways).")
AnnotationAssertion(rdfs:label obo:GENO_0000488 "obsolete_is_expression_variant_with"@en)
AnnotationAssertion(owl:deprecated obo:GENO_0000488 "true"^^xsd:boolean)
SubObjectPropertyOf(obo:GENO_0000488 oboInOwl:ObsoleteProperty)

# Object Property: obo:GENO_0000580 (has_qualifier)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000580 "A relation used to describe  a context or conditions that define and/or identify an entity.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000580 "Used in Monarch Data to link associations to qualifying contexts (e.g. environments or developmental stages) where the association applies. For example, a qualifying environment represents a context where genotype-phenotype associations apply - where the environment is an identity criteria for the association.

Used in GENO to describe physical context of materialized sequence features that represent identifying criteria for instances of qualified sequence features.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000580 "has_qualifying_context")
AnnotationAssertion(rdfs:label obo:GENO_0000580 "has_qualifier")

# Object Property: obo:GENO_0000608 (has_zygosity)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000608 "a relation to link a single locus complement to its zygosity.")
AnnotationAssertion(rdfs:label obo:GENO_0000608 "has_zygosity"@en)
SubObjectPropertyOf(obo:GENO_0000608 obo:GENO_0000207)
ObjectPropertyDomain(obo:GENO_0000608 obo:GENO_0000516)
ObjectPropertyRange(obo:GENO_0000608 obo:GENO_0000133)

# Object Property: obo:GENO_0000610 (is_reference_allele_of)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000610 "A relationship between a reference locus/allele and the gene class it is an allele of.")
AnnotationAssertion(rdfs:label obo:GENO_0000610 "is_reference_allele_of"@en)
SubObjectPropertyOf(obo:GENO_0000610 obo:GENO_0000408)
ObjectPropertyDomain(obo:GENO_0000610 obo:GENO_0000036)

# Object Property: obo:GENO_0000626 (has_staining_intensity)

AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000626 "Consider obsoleting - it is likely sufficeint to use the parent has_sequence_attribute property - a separate proeprty to link to the staining intensity attribute is not really needed.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000626 "has_color_value"@en)
AnnotationAssertion(rdfs:comment obo:GENO_0000626 "Used to link a gross chromosomal sequence feature (chromosome part) to a color value quality that inheres in the sequence feature in virtue of the staining pattern of the chromosomal DNA in which the sequence is materialized.")
AnnotationAssertion(rdfs:label obo:GENO_0000626 "has_staining_intensity")
SubObjectPropertyOf(obo:GENO_0000626 obo:GENO_0000207)

# Object Property: obo:GENO_0000634 (is_targeted_by)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000634 "Used to link a gene targeting reagent such as a morpholino, to an instance of a reagent targeted gene variant.")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000634 "relation between an molecular agent and its molecular target")
AnnotationAssertion(rdfs:label obo:GENO_0000634 "is_targeted_by"@en)

# Object Property: obo:GENO_0000639 (sequence_derives_from)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000639 "1. Used to specify derivation of transgene components from a gene class, or a engineered construct instance. 

2. Used to specify the genetic background/strain of origin of an allele  (i.e. that an allele was originally isolated from a specific background strain, and propagated into new genetic backgrounds.

3. Used to indicate derivation of a variant mouse genotype from an ES cell line used in generating the modified mice (IMPC)")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000639 "Relationship between a sequence feature and a distinct, non-overlapping feature from which it derives part or all of its sequence.")
AnnotationAssertion(rdfs:label obo:GENO_0000639 "sequence_derives_from"@en)
SubObjectPropertyOf(obo:GENO_0000639 owl:topObjectProperty)

# Object Property: obo:GENO_0000641 (is_variant_allele_of)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000641 "A relationship between a variant allele and the gene class it is an allele of.")
AnnotationAssertion(rdfs:label obo:GENO_0000641 "is_variant_allele_of"@en)
SubObjectPropertyOf(obo:GENO_0000641 obo:GENO_0000408)
ObjectPropertyDomain(obo:GENO_0000641 obo:GENO_0000002)

# Object Property: obo:GENO_0000650 (has_sex_agnostic_part)

AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000650 "Relationship between a sex-qualified genotype and intrinsic genotype, created specifically to support propagation of phenotypes asserted on the former to the later for Monarch Initiative use cases.")
AnnotationAssertion(rdfs:label obo:GENO_0000650 "has_sex_agnostic_part"@en)
SubObjectPropertyOf(obo:GENO_0000650 obo:GENO_0000654)
InverseObjectProperties(obo:GENO_0000650 obo:GENO_0000661)

# Object Property: obo:GENO_0000651 (is_mutant_allele_of)

AnnotationAssertion(rdfs:comment obo:GENO_0000651 "A relation between a mutant allele (ie rare variant present in less than  1% of a population, or an experimentally-altered variant such as a knocked-out gene in a model organism), and the gene it is a variant of.")
AnnotationAssertion(rdfs:label obo:GENO_0000651 "is_mutant_allele_of"@en)
SubObjectPropertyOf(obo:GENO_0000651 obo:GENO_0000641)
ObjectPropertyDomain(obo:GENO_0000651 obo:GENO_0000491)

# Object Property: obo:GENO_0000652 (is_polymorphic_allele_of)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000652 "A relationship between a polymorphic allele and the gene class it is an allele of.")
AnnotationAssertion(rdfs:label obo:GENO_0000652 "is_polymorphic_allele_of"@en)
SubObjectPropertyOf(obo:GENO_0000652 obo:GENO_0000641)
ObjectPropertyDomain(obo:GENO_0000652 obo:GENO_0000497)

# Object Property: obo:GENO_0000653 (is_wild_type_allele_of)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000653 "A relationship between a wild-type allele and the gene class it is an allele of.")
AnnotationAssertion(rdfs:label obo:GENO_0000653 "is_wild_type_allele_of"@en)
SubObjectPropertyOf(obo:GENO_0000653 obo:GENO_0000408)
ObjectPropertyDomain(obo:GENO_0000653 obo:GENO_0000501)

# Object Property: obo:GENO_0000654 (has_sequence_part)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000654 "An organizational class to hold relations of parthood between sequences/features.")
AnnotationAssertion(rdfs:label obo:GENO_0000654 "has_sequence_part"@en)
SubObjectPropertyOf(obo:GENO_0000654 obo:BFO_0000051)
InverseObjectProperties(obo:GENO_0000654 obo:GENO_0000655)

# Object Property: obo:GENO_0000655 (is_sequence_part_of)

AnnotationAssertion(rdfs:label obo:GENO_0000655 "is_sequence_part_of"@en)
SubObjectPropertyOf(obo:GENO_0000655 obo:BFO_0000050)

# Object Property: obo:GENO_0000661 (is_sex_agnostic_part_of)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000661 "Relationship between an intrinsic genotype and a sex-qualified genotype, created specifically to support propagation of phenotypes asserted on the latter to the former for Monarch Initiative use cases.")
AnnotationAssertion(rdfs:label obo:GENO_0000661 "is_sex_agnostic_part_of"@en)
SubObjectPropertyOf(obo:GENO_0000661 obo:GENO_0000655)

# Object Property: obo:GENO_0000683 (varies_with)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000683 "A relation that holds between two sequence features at a particular genomic location that vary in their sequence.  These features will have the same position when mapped onto a reference sequence, but vary in their sequence (in whole or in part).")
AnnotationAssertion(rdfs:comment obo:GENO_0000683 "This property is most commonly used to relate two different alleles of a given gene (e.g. a wt and mutant instance of the BRCA2 gene).  It is not a relation between an allele and the class-level gene it is a variant of (for this use is_allele_of)")
AnnotationAssertion(rdfs:label obo:GENO_0000683 "varies_with"@en)
SymmetricObjectProperty(obo:GENO_0000683)

# Object Property: obo:GENO_0000708 (faldo properties)

AnnotationAssertion(rdfs:comment obo:GENO_0000708 "organizational property to hold imports from faldo.")
AnnotationAssertion(rdfs:label obo:GENO_0000708 "faldo properties"@en)

# Object Property: obo:GENO_0000726 (has_sequence_feature)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000726 "A relation linking a qualified sequence feature to its component sequence feature.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000726 "has_sequence_feature_component")
AnnotationAssertion(rdfs:comment obo:GENO_0000726 "In GENO we define three levels of sequence artifacts: (1) biological sequences, (2) sequence features, and (3) qualified sequence features. The identify criteria for a 'biological sequence' include only its inherent sequence (the ordered string of units that comprise it). The identity criteria for a 'sequence feature' include its sequence and position (where it resides - i.e. its location based on how it maps to a reference or standard) The identity criteria for a 'qualified sequence feature' include its component sequence feature (defined by its sequence and position), and the material context of its bearer in a cell or organism. This context can include direct epigenetic modification, or being targeted by gene knockdown reagents such as morpholinos or RNAi, or being transiently overexpressed from a transgenic construct in a cell or organism.")
AnnotationAssertion(rdfs:label obo:GENO_0000726 "has_sequence_feature"@en)
ObjectPropertyDomain(obo:GENO_0000726 ObjectUnionOf(obo:GENO_0000919 obo:GENO_0000920))
ObjectPropertyRange(obo:GENO_0000726 obo:SO_0000110)

# Object Property: obo:GENO_0000740 (has_inferred_phenotype)

AnnotationAssertion(rdfs:label obo:GENO_0000740 "has_inferred_phenotype"@en)
SubObjectPropertyOf(obo:GENO_0000740 obo:RO_0002200)

# Object Property: obo:GENO_0000741 (obsolete_has_regulatory_part)

AnnotationAssertion(rdfs:comment obo:GENO_0000741 "Proposal for a property linking variants to smaller components that are regulatory, and therefore should not inherit phenotypes.")
AnnotationAssertion(rdfs:label obo:GENO_0000741 "obsolete_has_regulatory_part"@en)
AnnotationAssertion(owl:deprecated obo:GENO_0000741 "true"^^xsd:boolean)
SubObjectPropertyOf(obo:GENO_0000741 oboInOwl:ObsoleteProperty)

# Object Property: obo:GENO_0000742 (obsolete_is_alteration_within)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000742 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000742 "A relation linking a sequence_alteration to the gene it alters.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000742 "is_within_allele_of")
AnnotationAssertion(rdfs:label obo:GENO_0000742 "obsolete_is_alteration_within"@en)
AnnotationAssertion(owl:deprecated obo:GENO_0000742 "true"^^xsd:boolean)
SubObjectPropertyOf(obo:GENO_0000742 oboInOwl:ObsoleteProperty)

# Object Property: obo:GENO_0000743 (has_asserted_phenotype)

AnnotationAssertion(rdfs:label obo:GENO_0000743 "has_asserted_phenotype"@en)
SubObjectPropertyOf(obo:GENO_0000743 obo:RO_0002200)

# Object Property: obo:GENO_0000761 (is_regulatory_part_of)

AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000761 "Proposal for a property linking regulatory elements to larger features of which they are a part.")
AnnotationAssertion(rdfs:label obo:GENO_0000761 "is_regulatory_part_of"@en)
SubObjectPropertyOf(obo:GENO_0000761 obo:GENO_0000655)

# Object Property: obo:GENO_0000767 (obsolete_has_position_component)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000767 "A relation linking a sequence feature to its component Position that represents an identifying criteria for sequence feature instances.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000767 "For representing positional data, we advocate use of the FALDO model, which links to positional information through an instance of a Region class that represents the mapping of the feature onto some reference sequence.  The positional_component property in GENO is meant primarily to formalize the identity criteria or sequence features and qualified sequence features, to illustrate the distinction between them.")
AnnotationAssertion(rdfs:label obo:GENO_0000767 "obsolete_has_position_component"@en)
AnnotationAssertion(owl:deprecated obo:GENO_0000767 "true"^^xsd:boolean)
SubObjectPropertyOf(obo:GENO_0000767 oboInOwl:ObsoleteProperty)

# Object Property: obo:GENO_0000783 (has_sequence_unit)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000783 "A relation between a nucleic acid or amino acid sequence or sequence feature, and one of its monomeric units (nucleotide or amino acid residues)")
AnnotationAssertion(rdfs:label obo:GENO_0000783 "has_sequence_unit"@en)
SubObjectPropertyOf(obo:GENO_0000783 obo:GENO_0000654)

# Object Property: obo:GENO_0000784 (completely_varies_with)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000784 "A relation between two seqeunces or features that are considered variant with each other along their entire extents.")
AnnotationAssertion(rdfs:label obo:GENO_0000784 "completely_varies_with"@en)
SubObjectPropertyOf(obo:GENO_0000784 obo:GENO_0000683)
SymmetricObjectProperty(obo:GENO_0000784)

# Object Property: obo:GENO_0000790 (related_condition)

AnnotationAssertion(rdfs:label obo:GENO_0000790 "related_condition"@en)

# Object Property: obo:GENO_0000791 (inferred_to_cause_condition)

AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000791 "Note that we currently do not have a property chain to propagate phenotypes to genes across sequence_derives_from relation (e.g. in cases where a Tg insertion derives expressed sequence from some gene)")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000791 "The property chains below are defined as explicitly as possible, but many could be shortened if we used the inferred_to_cause_condition property to construct the property chains.  Where this is the case, it is noted in the annotations on the property chains.

Below are the different kinds/paths of propagation we desire:
1. Propagation 'down' a genotype (from larger components to smaller ones)
2. Propagation 'up' a genotype (from smaller components to larger ones)
3. From sex-qualified genotypes down to the sex-agnostic genotype and its components (but not 'up' to a sex-qualified genotype).
4. From an effective genotype to its intrinsic and extrinsic components.
5. From genotype components to genes (note here that a separate chain is needed to propagate conditions asserted on a sequence alteration to the gene, because of the fact that the link to the gene is from the variant locus/allele).
6. (Exploratory). There are cases where we may also want inter-genotype propagation (i.e. propagation that extends beyond moving up or down a single genotype). For example, if a phenotype is asserted on a sex-qualified intrinsic genotype, we want it to infer down through its component sex-agnostic intrinsic genotype and then up to any effective genotypes of which this sex-agnostic intrinsic genotype is a part. Given the data in hand, however, the conditions for this will likely never occur, so probably ok not to implement a chain to support this.

Note that we do not want to propagate phenotypes up from sex-agnostic genotyeps to sex-qualified ones (e.g.from shha<tbx392>/shha<tbx392> [AB] to shha<tbx392>/shha<tbx392> [AB](male)) - because it may not be the case that a phenotype assessed without consideratioon to sex will apply on a sex-specific background.  So we would not create a property chain to propagate inferred condition associations from sex-agnaostic intrinsic genotypes and their parts to sex-qualified intrinsic genotypes and effective genotypes that contain them (such as:  has_variant_part o has_sex_agnostic_part o has_variant_part o 'causes condition')")
AnnotationAssertion(rdfs:label obo:GENO_0000791 "inferred_to_cause_condition"@en)
SubObjectPropertyOf(obo:GENO_0000791 obo:GENO_0000790)

# Object Property: obo:GENO_0000793 (inferred_to_contribute_to_condition)

AnnotationAssertion(rdfs:label obo:GENO_0000793 "inferred_to_contribute_to_condition"@en)
SubObjectPropertyOf(obo:GENO_0000793 obo:GENO_0000790)

# Object Property: obo:GENO_0000794 (inferred_to_correlate_with_condition)

AnnotationAssertion(rdfs:label obo:GENO_0000794 "inferred_to_correlate_with_condition"@en)
SubObjectPropertyOf(obo:GENO_0000794 obo:GENO_0000790)

# Object Property: obo:GENO_0000840 (pathogenic_for_condition)

AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000840 "LOINC:LA6668-3")
AnnotationAssertion(rdfs:label obo:GENO_0000840 "pathogenic_for_condition"@en)
SubObjectPropertyOf(obo:GENO_0000840 obo:RO_0003303)

# Object Property: obo:GENO_0000841 (likely_pathogenic_for_condition)

AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000841 "LOINC:LA26332-9")
AnnotationAssertion(rdfs:label obo:GENO_0000841 "likely_pathogenic_for_condition"@en)
SubObjectPropertyOf(obo:GENO_0000841 obo:RO_0003303)

# Object Property: obo:GENO_0000842 (non-causal_for_condition)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000842 "Relation between an entity and a condition (disease, phenotype) which it does not cause or contribute to.")
AnnotationAssertion(rdfs:label obo:GENO_0000842 "non-causal_for_condition"@en)
SubObjectPropertyOf(obo:GENO_0000842 obo:GENO_0000790)

# Object Property: obo:GENO_0000843 (benign_for_condition)

AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000843 "LOINC:LA6675-8")
AnnotationAssertion(rdfs:label obo:GENO_0000843 "benign_for_condition"@en)
SubObjectPropertyOf(obo:GENO_0000843 obo:GENO_0000842)

# Object Property: obo:GENO_0000844 (likely_benign_for_condition)

AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000844 "LOINC:LA26334-5")
AnnotationAssertion(rdfs:label obo:GENO_0000844 "likely_benign_for_condition"@en)
SubObjectPropertyOf(obo:GENO_0000844 obo:GENO_0000842)

# Object Property: obo:GENO_0000845 (has_uncertain_significance_for_condition)

AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000845 "LOINC:LA26333-7")
AnnotationAssertion(rdfs:label obo:GENO_0000845 "has_uncertain_significance_for_condition"@en)
SubObjectPropertyOf(obo:GENO_0000845 obo:GENO_0000790)

# Object Property: obo:GENO_0000846 (has_qualifying_process)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000846 "A relation used to describe  a process contextualizing the identity of an entity.")
AnnotationAssertion(rdfs:label obo:GENO_0000846 "has_qualifying_process"@en)
SubObjectPropertyOf(obo:GENO_0000846 obo:GENO_0000580)

# Object Property: obo:GENO_0000847 (has_qualifying_environment)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000847 "A relation used to describe  an environment contextualizing the identity of an entity.")
AnnotationAssertion(rdfs:label obo:GENO_0000847 "has_qualifying_environment"@en)
SubObjectPropertyOf(obo:GENO_0000847 obo:GENO_0000580)

# Object Property: obo:GENO_0000849 (is_candidate_variant_for)

AnnotationAssertion(rdfs:label obo:GENO_0000849 "is_candidate_variant_for"@en)
SubObjectPropertyOf(obo:GENO_0000849 obo:GENO_0000790)

# Object Property: obo:GENO_0000903 (has_location)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000903 "A relation linking a sequence feature to the location it occupies on some reference sequence.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000903 "occupies")
AnnotationAssertion(rdfs:label obo:GENO_0000903 "has_location"@en)
ObjectPropertyDomain(obo:GENO_0000903 obo:SO_0000110)
ObjectPropertyRange(obo:GENO_0000903 obo:GENO_0000815)

# Object Property: obo:GENO_0000906 (on strand)

AnnotationAssertion(rdfs:comment obo:GENO_0000906 "Can be used to a genomic feature to the chromosomal strand it resides on in the genome (+ or - strand, or both strands). Commonly used to link a gene to the strand it is transcribed from.")
AnnotationAssertion(rdfs:label obo:GENO_0000906 "on strand"@en)

# Object Property: obo:GENO_0000957 (has_defining_location)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000957 "Holds between a copy number complement or functional copy number complement, and a genomic location that serves as a proxy for the sequence or functional element that defines the complement.")
AnnotationAssertion(rdfs:comment obo:GENO_0000957 "Copy number complements represent sets of all copies of a particular biological sequence present in a particular genome. Their \"identity\" is based on their defining sequence, and the count of this sequence in the genome.The has_defining_location property is used to specify the sequence defining a copy number complement -  by using a 'sequence location' as a proxy for a specific sequence that is found at this location.

For copy number complements, it is the sequence at this location on some reference that defines sequences in a genome of interest that qualify for membership in the complement. For functional copy number complements (aka genetic dosage), it is the canonical function(s) performed by the sequence at this location (typically that of a gene) that helps to define sequences in a genome of interest that qualify for membership in the complement.")
AnnotationAssertion(rdfs:label obo:GENO_0000957 "has_defining_location"@en)
ObjectPropertyDomain(obo:GENO_0000957 ObjectUnionOf(obo:GENO_0000961 obo:GENO_0000963))
ObjectPropertyRange(obo:GENO_0000957 obo:GENO_0000815)

# Object Property: obo:GENO_0000958 (has_defining_sequence)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000958 "Holds between a copy number complement or functional copy number complement, and the biological sequence that defines the complement.")
AnnotationAssertion(rdfs:comment obo:GENO_0000958 "Copy number complements represent sets of all copies of a particular biological sequence present in a particular genome. Their \"identity\" is based on their defining sequence, and the count of this sequence in the genome.The has_defining_sequence property is used to specify the sequence defining a copy number complement.")
AnnotationAssertion(rdfs:label obo:GENO_0000958 "has_defining_sequence"@en)
ObjectPropertyDomain(obo:GENO_0000958 ObjectUnionOf(obo:GENO_0000961 obo:GENO_0000963))
ObjectPropertyRange(obo:GENO_0000958 obo:GENO_0000702)

# Object Property: obo:GENO_0000959 (has_defining_feature)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000959 "Holds between a copy number complement or functional copy number complement and a genomic feature that serves as a proxy for the sequence that defines the complement.")
AnnotationAssertion(rdfs:comment obo:GENO_0000959 "Copy number complements represent sets of all copies of a particular biological sequence present in a particular genome. Their \"identity\" is based on their defining sequence, and the count of this sequence in the genome.The has_defining_feature property is used to specify the sequence defining a copy number complement -  by using a 'sequence feature' as a proxy for the specific sequence of this feature on some reference.

For copy number complements, it is the sequence of this proxy feature on some reference that defines sequences in a genome of interest that qualify for membership in the complement. For functional copy number complements (aka genetic dosage), it is the canonical function(s) performed by the sequence of this proxy feature (typically a gene) that helps to define sequences in a genome of interest that qualify for membership in the complement.")
AnnotationAssertion(rdfs:label obo:GENO_0000959 "has_defining_feature"@en)
ObjectPropertyDomain(obo:GENO_0000959 ObjectUnionOf(obo:GENO_0000961 obo:GENO_0000963))
ObjectPropertyRange(obo:GENO_0000959 obo:SO_0000110)

# Object Property: obo:GENO_0000966 (has_interval)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000966 "Relates a sequence feature location to an interval that defines its start and end position.")
AnnotationAssertion(rdfs:comment obo:GENO_0000966 "Can be used when Interval objects are employed in representing sequence location.  But start and end positions can also be directly attached to a location, avoiding the use of Interval objects.")
AnnotationAssertion(rdfs:label obo:GENO_0000966 "has_interval")
ObjectPropertyDomain(obo:GENO_0000966 obo:GENO_0000815)

# Object Property: obo:GENO_0000967 (has_reference_sequence)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000967 "Relates a  'sequence feature location' to a sequence that it is anchored to.")
AnnotationAssertion(rdfs:label obo:GENO_0000967 "has_reference_sequence")

# Object Property: obo:GENO_0000968 (sequence role)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000968 "A role assigned to a sequence feature, collection, or genotype, e.g. serving as a 'reference' against with other  sequences are compared.")
AnnotationAssertion(rdfs:comment obo:GENO_0000968 "The RO:0000087 (has role) property cannot be used here because its domain is explicitly constrained to independent continuants, and sequence features in GENO are generically dependent contnuants.")
AnnotationAssertion(rdfs:label obo:GENO_0000968 "sequence role")
SubObjectPropertyOf(obo:GENO_0000968 obo:RO_0000053)

# Object Property: obo:IAO_0000136 (is about)

AnnotationAssertion(obo:IAO_0000115 obo:IAO_0000136 "is_about is a (currently) primitive relation that relates an information artifact to an entity.")
AnnotationAssertion(rdfs:label obo:IAO_0000136 "is about")

# Object Property: obo:IAO_0000219 (denotes)

AnnotationAssertion(obo:IAO_0000115 obo:IAO_0000219 "Denotes is a primitive, instance-level, relation obtaining between an information content entity and some portion of reality. Denotation is what happens when someone creates an information content entity E in order to specifically refer to something. The only relation between E and the thing is that E can be used to 'pick out' the thing. This relation connects those two together. Freedictionary.com sense 3: To signify directly; refer to specifically")
AnnotationAssertion(obo:IAO_0000116 obo:IAO_0000219 "Consdier if this is the best relation for linking genotypes to the genomic entities they specify.  We could use the more generic 'is about', or define a new 'specifies' relation that holds between ICEs and something it specifies the nature or creation of.")
AnnotationAssertion(rdfs:label obo:IAO_0000219 "denotes")
SubObjectPropertyOf(obo:IAO_0000219 obo:IAO_0000136)

# Object Property: obo:OBI_0000293 (has_specified_input)

AnnotationAssertion(obo:IAO_0000115 obo:OBI_0000293 "A relation between a planned process and a continuant participating in that process that is not created during  the process. The presence of the continuant during the process is explicitly specified in the plan specification which the process realizes the concretization of.")
AnnotationAssertion(rdfs:label obo:OBI_0000293 "has_specified_input")
SubObjectPropertyOf(obo:OBI_0000293 obo:RO_0002233)

# Object Property: obo:OBI_0000299 (has_specified_output)

AnnotationAssertion(obo:IAO_0000115 obo:OBI_0000299 "A relation between a planned process and a continuant participating in that process. The presence of the continuant at the end of the process is explicitly specified in the objective specification which the process realizes the concretization of.")
AnnotationAssertion(rdfs:label obo:OBI_0000299 "has_specified_output")
SubObjectPropertyOf(obo:OBI_0000299 obo:RO_0002234)

# Object Property: obo:RO_0000052 (inheres_in)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0000052 "a relation between a specifically dependent continuant (the dependent) and an independent continuant (the bearer), in which the dependent specifically depends on the bearer for its existence")
AnnotationAssertion(rdfs:label obo:RO_0000052 "inheres_in")

# Object Property: obo:RO_0000053 (bearer of)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0000053 "a relation between an independent continuant (the bearer) and a specifically dependent continuant (the dependent), in which the dependent specifically depends on the bearer for its existence")
AnnotationAssertion(rdfs:label obo:RO_0000053 "bearer of"@en)

# Object Property: obo:RO_0000056 (participates in)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0000056 "a relation between a continuant and a process, in which the continuant is somehow involved in the process")
AnnotationAssertion(rdfs:label obo:RO_0000056 "participates in")
InverseObjectProperties(obo:RO_0000056 obo:RO_0000057)

# Object Property: obo:RO_0000057 (has participant)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0000057 "a relation between a process and a continuant, in which the continuant is somehow involved in the process")
AnnotationAssertion(rdfs:label obo:RO_0000057 "has participant")

# Object Property: obo:RO_0000059 (concretizes)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0000059 "A journal article is an information artifact that inheres in some number of printed journals. For each copy of the printed journal there is some quality that carries the journal article, such as a pattern of ink. The quality (a specifically dependent continuant) concretizes the journal article (a generically dependent continuant), and both depend on that copy of the printed journal (an independent continuant).")
AnnotationAssertion(obo:IAO_0000115 obo:RO_0000059 "A relationship between a specifically dependent continuant and a generically dependent continuant, in which the generically dependent continuant depends on some independent continuant in virtue of the fact that the specifically dependent continuant also depends on that same independent continuant. Multiple specifically dependent continuants can concretize the same generically dependent continuant.")
AnnotationAssertion(rdfs:label obo:RO_0000059 "concretizes"@en)

# Object Property: obo:RO_0000086 (has quality)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0000086 "a relation between an independent continuant (the bearer) and a quality, in which the quality specifically depends on the bearer for its existence")
AnnotationAssertion(rdfs:label obo:RO_0000086 "has quality")
SubObjectPropertyOf(obo:RO_0000086 obo:RO_0000053)

# Object Property: obo:RO_0000087 (has role)

AnnotationAssertion(rdfs:label obo:RO_0000087 "has role")
SubObjectPropertyOf(obo:RO_0000087 obo:RO_0000053)

# Object Property: obo:RO_0000091 (has disposition)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0000091 "a relation between an independent continuant (the bearer) and a disposition, in which the disposition specifically depends on the bearer for its existence")
AnnotationAssertion(rdfs:label obo:RO_0000091 "has disposition")
SubObjectPropertyOf(obo:RO_0000091 obo:RO_0000053)

# Object Property: obo:RO_0001000 (derives from)

AnnotationAssertion(rdfs:label obo:RO_0001000 "derives from")

# Object Property: obo:RO_0002091 (starts during)

AnnotationAssertion(rdfs:label obo:RO_0002091 "starts during")
SubObjectPropertyOf(obo:RO_0002091 obo:RO_0002222)

# Object Property: obo:RO_0002093 (ends during)

AnnotationAssertion(rdfs:label obo:RO_0002093 "ends during")
SubObjectPropertyOf(obo:RO_0002093 obo:RO_0002222)

# Object Property: obo:RO_0002131 (overlaps)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0002131 "x overlaps y if and only if there exists some z such that x has part z and z part of y")
AnnotationAssertion(rdfs:label obo:RO_0002131 "overlaps"@en)
SymmetricObjectProperty(obo:RO_0002131)

# Object Property: obo:RO_0002162 (in taxon)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0002162 "x is in taxon y if an only if y is an organism, and the relationship between x and y is one of: part of (reflexive), developmentally preceded by, derives from, secreted by, expressed.")
AnnotationAssertion(rdfs:label obo:RO_0002162 "in taxon"@en)

# Object Property: obo:RO_0002200 (has phenotype)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0002200 "A relationship that holds between a biological entity and a phenotype. Here a phenotype is construed broadly as any kind of quality of an organism part, a collection of these qualities, or a change in quality or qualities (e.g. abnormally increased temperature). The subject of this relationship can be an organism (where the organism has the phenotype, i.e. the qualities inhere in parts of this organism), a genomic entity such as a gene or genotype (if modifications of the gene or the genotype causes the phenotype), or a condition such as a disease (such that if the condition inheres in an organism, then the organism has the phenotype).")
AnnotationAssertion(rdfs:label obo:RO_0002200 "has phenotype")
InverseObjectProperties(obo:RO_0002200 obo:RO_0002201)
ObjectPropertyRange(obo:RO_0002200 obo:UPHENO_0001001)

# Object Property: obo:RO_0002201 (phenotype of)

AnnotationAssertion(rdfs:label obo:RO_0002201 "phenotype of"@en)
ObjectPropertyDomain(obo:RO_0002201 obo:UPHENO_0001001)

# Object Property: obo:RO_0002222 (temporally related to)

AnnotationAssertion(rdfs:label obo:RO_0002222 "temporally related to"@en)

# Object Property: obo:RO_0002233 (has input)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0002233 "p has direct input c iff c is a participant in p, c is present at the start of p, and the state of c is modified during p.")
AnnotationAssertion(rdfs:label obo:RO_0002233 "has input"@en)
SubObjectPropertyOf(obo:RO_0002233 obo:RO_0000057)

# Object Property: obo:RO_0002234 (has output)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0002234 "p has output c iff c is a participant in p, c is present at the end of p, and c is not present at the beginning of p.")
AnnotationAssertion(rdfs:label obo:RO_0002234 "has output"@en)
SubObjectPropertyOf(obo:RO_0002234 obo:RO_0000057)
InverseObjectProperties(obo:RO_0002234 obo:RO_0002353)

# Object Property: obo:RO_0002350 (is member of)

AnnotationAssertion(rdfs:label obo:RO_0002350 "is member of")
SubObjectPropertyOf(obo:RO_0002350 obo:BFO_0000050)
InverseObjectProperties(obo:RO_0002350 obo:RO_0002351)

# Object Property: obo:RO_0002351 (has member)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0002351 "Example 1: a collection of sequences such as a genome being comprised of separate sequences of chromosomes

Example 2: a collection of information entities such as a genotype being comprised of a background component and a variant component")
AnnotationAssertion(obo:IAO_0000115 obo:RO_0002351 "has member is a mereological relation between a collection and an item.")
AnnotationAssertion(rdfs:label obo:RO_0002351 "has member")
SubObjectPropertyOf(obo:RO_0002351 obo:BFO_0000051)

# Object Property: obo:RO_0002352 (input of)

AnnotationAssertion(rdfs:label obo:RO_0002352 "input of"@en)
SubObjectPropertyOf(obo:RO_0002352 obo:RO_0000056)

# Object Property: obo:RO_0002353 (output of)

AnnotationAssertion(rdfs:label obo:RO_0002353 "output of"@en)
SubObjectPropertyOf(obo:RO_0002353 obo:RO_0000056)

# Object Property: obo:RO_0002354 (obsolete_formed as result of)

AnnotationAssertion(rdfs:label obo:RO_0002354 "obsolete_formed as result of"@en)
SubObjectPropertyOf(obo:RO_0002354 oboInOwl:ObsoleteProperty)

# Object Property: obo:RO_000244 (molecularly controls)

AnnotationAssertion(obo:IAO_0000115 obo:RO_000244 "Holds between molecular entities a and b when the execution of a activates or inhibits the activity of b")
AnnotationAssertion(rdfs:label obo:RO_000244 "molecularly controls"@en)

# Object Property: obo:RO_0002522 (bounds sequence of)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0002522 "x bounds the sequence of y iff the upstream-most part of x is upstream of or coincident with the upstream-most part of y, and the downstream-most part of x is downstream of or coincident with the downstream-most part of y")
AnnotationAssertion(obo:IAO_0000117 obo:RO_0002522 "Chris Mungall")
AnnotationAssertion(rdfs:label obo:RO_0002522 "bounds sequence of")
SubObjectPropertyOf(obo:RO_0002522 obo:GENO_0000654)

# Object Property: obo:RO_0002524 (has subsequence)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0002524 "x has subsequence y iff all of the sequence parts of x are sequence parts of y")
AnnotationAssertion(rdfs:label obo:RO_0002524 "has subsequence"@en)
SubObjectPropertyOf(obo:RO_0002524 obo:GENO_0000654)
InverseObjectProperties(obo:RO_0002524 obo:RO_0002525)

# Object Property: obo:RO_0002525 (is subsequence of)

AnnotationAssertion(rdfs:label obo:RO_0002525 "is subsequence of"@en)
SubObjectPropertyOf(obo:RO_0002525 obo:GENO_0000655)

# Object Property: obo:RO_0002526 (overlaps sequence of)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0002526 "x overlaps the sequence of x if and only if x has a subsequence z and z is a subsequence of y.")
AnnotationAssertion(dcterms:source obo:RO_0002526 "http://biorxiv.org/content/early/2014/06/27/006650.abstract")
AnnotationAssertion(rdfs:label obo:RO_0002526 "overlaps sequence of")
SubObjectPropertyOf(obo:RO_0002526 obo:RO_0002131)

# Object Property: obo:RO_0002528 (is upstream of sequence of)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0002528 "inverse of downstream of sequence of")
AnnotationAssertion(rdfs:label obo:RO_0002528 "is upstream of sequence of"@en)

# Object Property: obo:RO_0002529 (is downstream of sequence of)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0002529 "x is downstream of the sequence of y iff either (1) x and y have sequence units, and all units of x are downstream of all units of y, or (2) x and y are sequence units, and x is either immediately downstream of y, or transitively downstream of y.")
AnnotationAssertion(rdfs:label obo:RO_0002529 "is downstream of sequence of"@en)

# Object Property: obo:RO_0003301 (is model of)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0003301 "Relation between a research artifact and an entity it is used to study, in virtue of its replicating or approximating features of the studied entity.")
AnnotationAssertion(obo:IAO_0000116 obo:RO_0003301 "To Do: decide on scope of this relation - inclusive of computational models in domain, or only physical models?  Restricted to linking biological systems and phenomena?  Inclusive of only diseases in range, or broader?")
AnnotationAssertion(obo:IAO_0000117 obo:RO_0003301 "Matthew Brush")
AnnotationAssertion(rdfs:comment obo:RO_0003301 "The driving use case for this relation was to link a biological model system such as a cell line or model organism to a disease it is used to investigate, in virtue of the model system exhibiting features similar to that of the disease of interest.")
AnnotationAssertion(rdfs:label obo:RO_0003301 "is model of"@en)

# Object Property: obo:RO_0003302 (causes or contributes to condition)

AnnotationAssertion(obo:IAO_0000112 obo:RO_0003302 "The genetic variant 'NM_007294.3(BRCA1):c.110C>A (p.Thr37Lys)' casues or contributes to the disease  'familial breast-ovarian cancer'.

An environment of exposure to arsenic causes or contributes to the phenotype of patchy skin hyperpigmentation, and the disease 'skin cancer'.")
AnnotationAssertion(obo:IAO_0000115 obo:RO_0003302 "A relationship between an entity (a genotype, genetic variation or environment) and a condition (a phenotype or disease) where the entity has some causal or contributing role that influences the condition.")
AnnotationAssertion(obo:IAO_0000116 obo:RO_0003302 "Note that relationships of phenotypes to organisms/strains that bear them, or diseases they are manifest in, should continue to use RO:0002200 ! 'has phenotype' and RO:0002201 ! 'phenotype of'.")
AnnotationAssertion(rdfs:comment obo:RO_0003302 "Genetic variations can span any level of granularity from a full genome or genotype to an individual gene  or sequence alteration.  These variations can be represented at the physical level (DNA/RNA macromolecules or their parts, as in the ChEBI ontology and Molecular Sequence Ontology) or at the abstract level (generically dependent continuant sequence features that are carried by these macromolecules, as in the Sequence Ontology and Genotype Ontology).  The causal relations in this hierarchy can be used in linking either physical or abstract genetic variations to phenotypes or diseases they cause or contribute to.

Environments include natural environments or exposures, experimentally applied conditions, or clinical interventions.")
AnnotationAssertion(rdfs:label obo:RO_0003302 "causes or contributes to condition"@en)
SubObjectPropertyOf(obo:RO_0003302 obo:GENO_0000790)

# Object Property: obo:RO_0003303 (causes condition)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0003303 "A relationship between an entity (a genotype, genetic variation or environment) and a condition (a phenotype or disease) where the entity has a causal role for the condition.")
AnnotationAssertion(rdfs:label obo:RO_0003303 "causes condition"@en)
SubObjectPropertyOf(obo:RO_0003303 obo:RO_0003302)

# Object Property: obo:RO_0003304 (contributes to condition)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0003304 "A relationship between an entity (a genotype, genetic variation or environment) and a condition (a phenotype or disease) where the entity has some contributing role in the manifestation of the condition.")
AnnotationAssertion(rdfs:label obo:RO_0003304 "contributes to condition"@en)
SubObjectPropertyOf(obo:RO_0003304 obo:RO_0003302)

# Object Property: obo:RO_0003305 (contributes to severity of condition)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0003305 "A relationship between an entity (a genotype, genetic variation or environment) and a condition (a phenotype or disease) where the entity influences the severity with which a condition manifests in an individual.")
AnnotationAssertion(obo:IAO_0000118 obo:RO_0003305 "contributes to expressivity of condition")
AnnotationAssertion(rdfs:label obo:RO_0003305 "contributes to severity of condition"@en)
SubObjectPropertyOf(obo:RO_0003305 obo:RO_0003304)

# Object Property: obo:RO_0003306 (contributes to frequency of condition)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0003306 "A relationship between an entity (a genotype, genetic variation or environment) and a condition (a phenotype or disease) where the entity influences the frequency of the condition in a population.")
AnnotationAssertion(obo:IAO_0000118 obo:RO_0003306 "contributes to penetrance of condition")
AnnotationAssertion(rdfs:label obo:RO_0003306 "contributes to frequency of condition"@en)
SubObjectPropertyOf(obo:RO_0003306 obo:RO_0003304)

# Object Property: obo:RO_0003307 (is preventative for condition)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0003307 "A relationship between an entity (a genotype, genetic variation or environment) and a condition (a phenotype or disease) where the entity prevents or reduces the severity of a condition.")
AnnotationAssertion(rdfs:comment obo:RO_0003307 "Genetic variations can span any level of granularity from a full genome or genotype to an individual gene  or sequence alteration.  These variations can be represented at the physical level (DNA/RNA macromolecules or their parts, as in the ChEBI ontology and Molecular Sequence Ontology) or at the abstract level (generically dependent continuant sequence features that are carried by these macromolecules, as in the Sequence Ontology and Genotype Ontology).  The causal relations in this hierarchy can be used in linking either physical or abstract genetic variations to phenotypes or diseases they cause or contribute to. 

Environments include natural environments or exposures, experimentally applied conditions, or clinical interventions.")
AnnotationAssertion(rdfs:label obo:RO_0003307 "is preventative for condition"@en)
SubObjectPropertyOf(obo:RO_0003307 obo:GENO_0000790)

# Object Property: obo:RO_0003308 (correlated with condition)

AnnotationAssertion(obo:IAO_0000115 obo:RO_0003308 "A relationship between an entity and a condition (phenotype or disease) with which it exhibits a statistical dependence relationship.")
AnnotationAssertion(rdfs:label obo:RO_0003308 "correlated with condition"@en)
SubObjectPropertyOf(obo:RO_0003308 obo:GENO_0000790)

# Object Property: <http://purl.org/oban/association_has_object> (association has object)

AnnotationAssertion(rdfs:label <http://purl.org/oban/association_has_object> "association has object"@en)

# Object Property: <http://purl.org/oban/association_has_predicate> (association has predicate)

AnnotationAssertion(rdfs:label <http://purl.org/oban/association_has_predicate> "association has predicate"@en)

# Object Property: <http://purl.org/oban/association_has_subject> (association has subject)

AnnotationAssertion(rdfs:label <http://purl.org/oban/association_has_subject> "association has subject"@en)


############################
#   Data Properties
############################

# Data Property: <http://biohackathon.org/resource/faldo#position> (position)

AnnotationAssertion(rdfs:comment <http://biohackathon.org/resource/faldo#position> "The position value is the offset along the reference where this position is found. Thus the only the position value in combination with the reference determines where a position is.")
AnnotationAssertion(rdfs:label <http://biohackathon.org/resource/faldo#position> "position"@en)

# Data Property: obo:GENO_0000678 (has_extent)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000678 "Property linking a sequence or sequence feature to an integer representing its length in terms of the number of units in the sequence.")
AnnotationAssertion(rdfs:label obo:GENO_0000678 "has_extent"@en)
DataPropertyRange(obo:GENO_0000678 xsd:int)

# Data Property: obo:GENO_0000703 (has_sequence_string)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000703 "Shortcut relation linking a sequence feature directly to a string representing the 'state' of its sequence - i.e. the ordering of units that comprise it (e.g. 'atgcagctagctaccgtcgatcg').")
AnnotationAssertion(rdfs:label obo:GENO_0000703 "has_sequence_string"@en)
DataPropertyDomain(obo:GENO_0000703 obo:SO_0000110)
DataPropertyRange(obo:GENO_0000703 xsd:string)

# Data Property: obo:GENO_0000712 (ObsoleteDataProperty)

AnnotationAssertion(rdfs:label obo:GENO_0000712 "ObsoleteDataProperty"@en)
AnnotationAssertion(owl:deprecated obo:GENO_0000712 "true"^^xsd:boolean)

# Data Property: obo:GENO_0000866 (has_quantifier)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000866 "The 'rank' quantifier in Bgee gene-anatomy associations, that indicates the imporatnace/specificity of a gene expression in a given anatommy relative to expressionin other anatomies for  the same gene.")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000866 "Property to link an assertion or association with some value quantifying its relevance or  ranking.")
AnnotationAssertion(rdfs:label obo:GENO_0000866 "has_quantifier"@en)

# Data Property: obo:GENO_0000894 (start_position)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000894 "The starting position of a sequence feature or interval.")
AnnotationAssertion(rdfs:label obo:GENO_0000894 "start_position")

# Data Property: obo:GENO_0000895 (end_position)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000895 "The ending position of a sequence feature or interval.")
AnnotationAssertion(rdfs:label obo:GENO_0000895 "end_position")

# Data Property: obo:GENO_0000896 (has_string)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000896 "Property linking a biological sequence to a string representing the ordered units that comprise the sequence (e.g. 'atgcagctagctaccgtcgatcg').")
AnnotationAssertion(rdfs:label obo:GENO_0000896 "has_string")
DataPropertyDomain(obo:GENO_0000896 obo:GENO_0000702)
DataPropertyRange(obo:GENO_0000896 xsd:string)

# Data Property: obo:GENO_0000917 (has_member_count)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000917 "Describes the number of members in some set.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000917 "has_count")
AnnotationAssertion(rdfs:comment obo:GENO_0000917 "In GENO, this is used to describe things like the number of sequence features comprising a 'sequence feature set', the number of sequences in a 'biological sequence set', or the number of functional sequences defining a particular 'functional copy number complement'.")
AnnotationAssertion(rdfs:label obo:GENO_0000917 "has_member_count"@en)



############################
#   Classes
############################

# Class: <http://biohackathon.org/resource/faldo#BothStrandsPosition> (Both strands)

AnnotationAssertion(rdfs:label <http://biohackathon.org/resource/faldo#BothStrandsPosition> "Both strands"@en)
SubClassOf(<http://biohackathon.org/resource/faldo#BothStrandsPosition> <http://biohackathon.org/resource/faldo#StrandedPosition>)

# Class: <http://biohackathon.org/resource/faldo#ExactPosition> (Exact position)

AnnotationAssertion(obo:IAO_0000115 <http://biohackathon.org/resource/faldo#ExactPosition> "A position that is exactly known.")
AnnotationAssertion(rdfs:label <http://biohackathon.org/resource/faldo#ExactPosition> "Exact position"@en)
SubClassOf(<http://biohackathon.org/resource/faldo#ExactPosition> <http://biohackathon.org/resource/faldo#Position>)

# Class: <http://biohackathon.org/resource/faldo#ForwardStrandPosition> (Positive strand)

AnnotationAssertion(rdfs:label <http://biohackathon.org/resource/faldo#ForwardStrandPosition> "Positive strand"@en)
SubClassOf(<http://biohackathon.org/resource/faldo#ForwardStrandPosition> <http://biohackathon.org/resource/faldo#StrandedPosition>)

# Class: <http://biohackathon.org/resource/faldo#Position> (Position)

AnnotationAssertion(obo:IAO_0000115 <http://biohackathon.org/resource/faldo#Position> "Superclass for the general concept of a position on a sequence. The sequence is designated with the reference predicate.")
AnnotationAssertion(obo:IAO_0000116 <http://biohackathon.org/resource/faldo#Position> "We place the FALDO:Position class under GENO:genomic location, as it represents a type of genomic location with an extent of 1 (i.e.has the same start and end coordinates - representing a single position as opposed to a location spanning a longer region).")
AnnotationAssertion(obo:IAO_0000412 <http://biohackathon.org/resource/faldo#Position> "FALDO")
AnnotationAssertion(rdfs:label <http://biohackathon.org/resource/faldo#Position> "Position"@en)
SubClassOf(<http://biohackathon.org/resource/faldo#Position> obo:GENO_0000902)

# Class: <http://biohackathon.org/resource/faldo#Region> (Region)

AnnotationAssertion(obo:IAO_0000115 <http://biohackathon.org/resource/faldo#Region> "A region describes a length of sequence with a start position and end position that represents a feature on a sequence, e.g. a gene.")
AnnotationAssertion(obo:IAO_0000116 <http://biohackathon.org/resource/faldo#Region> "From what I can tell, feature instances in data whose position is to be defined using FALDO are always mapped to a Region, and then the position of this Region is defined according to its location within some larger reference sequence. The exception may be feature instances that are explicitly part of the reference sequence on which its location is being defined (such that no 'mapping' to a reference is required).  This suggests that, conceptually, we can think of a FALDO:Region as a subregion of a reference sequence that is mapped to from a feature of interest, in order to define its position with respect to that reference sequence.")
AnnotationAssertion(rdfs:label <http://biohackathon.org/resource/faldo#Region> "Region"@en)
SubClassOf(<http://biohackathon.org/resource/faldo#Region> obo:SO_0000110)
SubClassOf(<http://biohackathon.org/resource/faldo#Region> ObjectIntersectionOf(ObjectExactCardinality(1 <http://biohackathon.org/resource/faldo#begin> <http://biohackathon.org/resource/faldo#Position>) ObjectExactCardinality(1 <http://biohackathon.org/resource/faldo#end> <http://biohackathon.org/resource/faldo#Position>)))

# Class: <http://biohackathon.org/resource/faldo#ReverseStrandPosition> (Negative strand)

AnnotationAssertion(rdfs:label <http://biohackathon.org/resource/faldo#ReverseStrandPosition> "Negative strand"@en)
SubClassOf(<http://biohackathon.org/resource/faldo#ReverseStrandPosition> <http://biohackathon.org/resource/faldo#StrandedPosition>)

# Class: <http://biohackathon.org/resource/faldo#StrandedPosition> (Stranded position)

AnnotationAssertion(rdfs:comment <http://biohackathon.org/resource/faldo#StrandedPosition> "Part of the coordinate system denoting on which strand the feature can be found. If you do not yet know which stand the feature is on, you should tag the position with just this class. If you know more you should use one of the subclasses. This means a region described with a '.' in GFF3. A GFF3 unstranded position does not have this type in FALDO -- those are just a 'position'.")
AnnotationAssertion(rdfs:label <http://biohackathon.org/resource/faldo#StrandedPosition> "Stranded position"@en)
SubClassOf(<http://biohackathon.org/resource/faldo#StrandedPosition> <http://biohackathon.org/resource/faldo#Position>)

# Class: obo:BFO_0000001 (entity)

AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000001 "Julius Caesar"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000001 "Verdi’s Requiem"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000001 "the Second World War"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000001 "your body mass index"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000001 "BFO 2 Reference: In all areas of empirical inquiry we encounter general terms of two sorts. First are general terms which refer to universals or types:animaltuberculosissurgical procedurediseaseSecond, are general terms used to refer to groups of entities which instantiate a given universal but do not correspond to the extension of any subuniversal of that universal because there is nothing intrinsic to the entities in question by virtue of which they – and only they – are counted as belonging to the given group. Examples are: animal purchased by the Emperortuberculosis diagnosed on a Wednesdaysurgical procedure performed on a patient from Stockholmperson identified as candidate for clinical trial #2056-555person who is signatory of Form 656-PPVpainting by Leonardo da VinciSuch terms, which represent what are called ‘specializations’ in [81"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000001 "Entity doesn't have a closure axiom because the subclasses don't necessarily exhaust all possibilites. For example Werner Ceusters 'portions of reality' include 4 sorts, entities (as BFO construes them), universals, configurations, and relations. It is an open question as to whether entities as construed in BFO will at some point also include these other portions of reality. See, for example, 'How to track absolutely everything' at http://www.referent-tracking.com/_RTU/papers/CeustersICbookRevised.pdf"@en)
AnnotationAssertion(obo:IAO_0000600 obo:BFO_0000001 "An entity is anything that exists or has existed or will exist. (axiom label in BFO2 Reference: [001-001])"@en)
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000001 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000001 "entity"@en)

# Class: obo:BFO_0000002 (continuant)

AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000002 "BFO 2 Reference: Continuant entities are entities which can be sliced to yield parts only along the spatial dimension, yielding for example the parts of your table which we call its legs, its top, its nails. ‘My desk stretches from the window to the door. It has spatial parts, and can be sliced (in space) in two. With respect to time, however, a thing is a continuant.’ [60, p. 240"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000002 "Continuant doesn't have a closure axiom because the subclasses don't necessarily exhaust all possibilites. For example, in an expansion involving bringing in some of Ceuster's other portions of reality, questions are raised as to whether universals are continuants"@en)
AnnotationAssertion(obo:IAO_0000600 obo:BFO_0000002 "A continuant is an entity that persists, endures, or continues to exist through time while maintaining its identity. (axiom label in BFO2 Reference: [008-002])"@en)
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000002 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000002 "continuant")
AnnotationAssertion(rdfs:label obo:BFO_0000002 "continuant"@en)
SubClassOf(obo:BFO_0000002 obo:BFO_0000001)
DisjointClasses(obo:BFO_0000002 obo:BFO_0000003)

# Class: obo:BFO_0000003 (occurrent)

AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000003 "BFO 2 Reference: every occurrent that is not a temporal or spatiotemporal region is s-dependent on some independent continuant that is not a spatial region"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000003 "BFO 2 Reference: s-dependence obtains between every process and its participants in the sense that, as a matter of necessity, this process could not have existed unless these or those participants existed also. A process may have a succession of participants at different phases of its unfolding. Thus there may be different players on the field at different times during the course of a football game; but the process which is the entire game s-depends_on all of these players nonetheless. Some temporal parts of this process will s-depend_on on only some of the players."@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000003 "Occurrent doesn't have a closure axiom because the subclasses don't necessarily exhaust all possibilites. An example would be the sum of a process and the process boundary of another process."@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000003 "Simons uses different terminology for relations of occurrents to regions: Denote the spatio-temporal location of a given occurrent e by 'spn[e]' and call this region its span. We may say an occurrent is at its span, in any larger region, and covers any smaller region. Now suppose we have fixed a frame of reference so that we can speak not merely of spatio-temporal but also of spatial regions (places) and temporal regions (times). The spread of an occurrent, (relative to a frame of reference) is the space it exactly occupies, and its spell is likewise the time it exactly occupies. We write 'spr[e]' and `spl[e]' respectively for the spread and spell of e, omitting mention of the frame.")
AnnotationAssertion(obo:IAO_0000600 obo:BFO_0000003 "An occurrent is an entity that unfolds itself in time or it is the instantaneous boundary of such an entity (for example a beginning or an ending) or it is a temporal or spatiotemporal region which such an entity occupies_temporal_region or occupies_spatiotemporal_region. (axiom label in BFO2 Reference: [077-002])"@en)
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000003 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000003 "occurrent")
AnnotationAssertion(rdfs:label obo:BFO_0000003 "occurrent"@en)
SubClassOf(obo:BFO_0000003 obo:BFO_0000001)

# Class: obo:BFO_0000004 (independent continuant)

AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000004 "a chair"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000004 "a heart"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000004 "a leg"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000004 "a molecule"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000004 "a spatial region"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000004 "an atom"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000004 "an orchestra."@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000004 "an organism"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000004 "the bottom right portion of a human torso"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000004 "the interior of your mouth"@en)
AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000004 "b is an independent continuant = Def. b is a continuant which is such that there is no c and no t such that b s-depends_on c at t. (axiom label in BFO2 Reference: [017-002])"@en)
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000004 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000004 "independent continuant")
AnnotationAssertion(rdfs:label obo:BFO_0000004 "independent continuant"@en)
SubClassOf(obo:BFO_0000004 obo:BFO_0000002)

# Class: obo:BFO_0000015 (process)

AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000015 "a process of cell-division, \\ a beating of the heart"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000015 "a process of meiosis"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000015 "a process of sleeping"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000015 "the course of a disease"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000015 "the flight of a bird"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000015 "the life of an organism"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000015 "your process of aging."@en)
AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000015 "p is a process = Def. p is an occurrent that has temporal proper parts and for some time t, p s-depends_on some material entity at t. (axiom label in BFO2 Reference: [083-003])"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000015 "BFO 2 Reference: The realm of occurrents is less pervasively marked by the presence of natural units than is the case in the realm of independent continuants. Thus there is here no counterpart of ‘object’. In BFO 1.0 ‘process’ served as such a counterpart. In BFO 2.0 ‘process’ is, rather, the occurrent counterpart of ‘material entity’. Those natural – as contrasted with engineered, which here means: deliberately executed – units which do exist in the realm of occurrents are typically either parasitic on the existence of natural units on the continuant side, or they are fiat in nature. Thus we can count lives; we can count football games; we can count chemical reactions performed in experiments or in chemical manufacturing. We cannot count the processes taking place, for instance, in an episode of insect mating behavior.Even where natural units are identifiable, for example cycles in a cyclical process such as the beating of a heart or an organism’s sleep/wake cycle, the processes in question form a sequence with no discontinuities (temporal gaps) of the sort that we find for instance where billiard balls or zebrafish or planets are separated by clear spatial gaps. Lives of organisms are process units, but they too unfold in a continuous series from other, prior processes such as fertilization, and they unfold in turn in continuous series of post-life processes such as post-mortem decay. Clear examples of boundaries of processes are almost always of the fiat sort (midnight, a time of death as declared in an operating theater or on a death certificate, the initiation of a state of war)"@en)
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000015 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000015 "process")
AnnotationAssertion(rdfs:label obo:BFO_0000015 "process"@en)
SubClassOf(obo:BFO_0000015 obo:BFO_0000003)

# Class: obo:BFO_0000016 (disposition)

AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000016 "an atom of element X has the disposition to decay to an atom of element Y"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000016 "certain people have a predisposition to colon cancer"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000016 "children are innately disposed to categorize objects in certain ways."@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000016 "the cell wall is disposed to filter chemicals in endocitosis and exocitosis"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000016 "BFO 2 Reference: Dispositions exist along a strength continuum. Weaker forms of disposition are realized in only a fraction of triggering cases. These forms occur in a significant number of cases of a similar type [89"@en)
AnnotationAssertion(obo:IAO_0000600 obo:BFO_0000016 "b is a disposition means: b is a realizable entity & b’s bearer is some material entity & b is such that if it ceases to exist, then its bearer is physically changed, & b’s realization occurs when and because this bearer is in some special physical circumstances, & this realization occurs in virtue of the bearer’s physical make-up. (axiom label in BFO2 Reference: [062-002])"@en)
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000016 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000016 "disposition")
AnnotationAssertion(rdfs:label obo:BFO_0000016 "disposition"@en)
SubClassOf(obo:BFO_0000016 obo:BFO_0000017)
DisjointClasses(obo:BFO_0000016 obo:BFO_0000023)

# Class: obo:BFO_0000017 (realizable entity)

AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000017 "the disposition of this piece of metal to conduct electricity."@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000017 "the disposition of your blood to coagulate"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000017 "the function of your reproductive organs"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000017 "the role of being a doctor"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000017 "the role of this boundary to delineate where Utah and Colorado meet"@en)
AnnotationAssertion(obo:IAO_0000600 obo:BFO_0000017 "To say that b is a realizable entity is to say that b is a specifically dependent continuant that inheres in some independent continuant which is not a spatial region and is of a type instances of which are realized in processes of a correlated type. (axiom label in BFO2 Reference: [058-002])"@en)
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000017 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000017 "realizable entity")
AnnotationAssertion(rdfs:label obo:BFO_0000017 "realizable entity"@en)
SubClassOf(obo:BFO_0000017 obo:BFO_0000020)
DisjointClasses(obo:BFO_0000017 obo:BFO_0000019)

# Class: obo:BFO_0000019 (quality)

AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000019 "the ambient temperature of this portion of air"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000019 "the color of a tomato"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000019 "the length of the circumference of your waist"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000019 "the mass of this piece of gold."@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000019 "the shape of your nose"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000019 "the shape of your nostril"@en)
AnnotationAssertion(obo:IAO_0000600 obo:BFO_0000019 "a quality is a specifically dependent continuant that, in contrast to roles and dispositions, does not require any further process in order to be realized. (axiom label in BFO2 Reference: [055-001])"@en)
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000019 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000019 "quality")
AnnotationAssertion(rdfs:label obo:BFO_0000019 "quality"@en)
SubClassOf(obo:BFO_0000019 obo:BFO_0000020)

# Class: obo:BFO_0000020 (specifically dependent continuant)

AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000020 "Reciprocal specifically dependent continuants: the function of this key to open this lock and the mutually dependent disposition of this lock: to be opened by this key"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000020 "of one-sided specifically dependent continuants: the mass of this tomato"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000020 "of relational dependent continuants (multiple bearers): John’s love for Mary, the ownership relation between John and this statue, the relation of authority between John and his subordinates."@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000020 "the disposition of this fish to decay"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000020 "the function of this heart: to pump blood"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000020 "the mutual dependence of proton donors and acceptors in chemical reactions [79"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000020 "the mutual dependence of the role predator and the role prey as played by two organisms in a given interaction"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000020 "the pink color of a medium rare piece of grilled filet mignon at its center"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000020 "the role of being a doctor"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000020 "the shape of this hole."@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000020 "the smell of this portion of mozzarella"@en)
AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000020 "b is a relational specifically dependent continuant = Def. b is a specifically dependent continuant and there are n &gt; 1 independent continuants c1, … cn which are not spatial regions are such that for all 1  i &lt; j  n, ci  and cj share no common parts, are such that for each 1  i  n, b s-depends_on ci at every time t during the course of b’s existence (axiom label in BFO2 Reference: [131-004])"@en)
AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000020 "b is a specifically dependent continuant = Def. b is a continuant & there is some independent continuant c which is not a spatial region and which is such that b s-depends_on c at every time t during the course of b’s existence. (axiom label in BFO2 Reference: [050-003])"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000020 "Specifically dependent continuant doesn't have a closure axiom because the subclasses don't necessarily exhaust all possibilites. We're not sure what else will develop here, but for example there are questions such as what are promises, obligation, etc."@en)
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000020 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000020 "specifically dependent continuant")
AnnotationAssertion(rdfs:label obo:BFO_0000020 "specifically dependent continuant"@en)
SubClassOf(obo:BFO_0000020 obo:BFO_0000002)

# Class: obo:BFO_0000023 (role)

AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000023 "John’s role of husband to Mary is dependent on Mary’s role of wife to John, and both are dependent on the object aggregate comprising John and Mary as member parts joined together through the relational quality of being married."@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000023 "the priest role"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000023 "the role of a boundary to demarcate two neighboring administrative territories"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000023 "the role of a building in serving as a military target"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000023 "the role of a stone in marking a property boundary"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000023 "the role of subject in a clinical trial"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000023 "the student role"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000023 "BFO 2 Reference: One major family of examples of non-rigid universals involves roles, and ontologies developed for corresponding administrative purposes may consist entirely of representatives of entities of this sort. Thus ‘professor’, defined as follows,b instance_of professor at t =Def. there is some c, c instance_of professor role & c inheres_in b at t.denotes a non-rigid universal and so also do ‘nurse’, ‘student’, ‘colonel’, ‘taxpayer’, and so forth. (These terms are all, in the jargon of philosophy, phase sortals.) By using role terms in definitions, we can create a BFO conformant treatment of such entities drawing on the fact that, while an instance of professor may be simultaneously an instance of trade union member, no instance of the type professor role is also (at any time) an instance of the type trade union member role (any more than any instance of the type color is at any time an instance of the type length).If an ontology of employment positions should be defined in terms of roles following the above pattern, this enables the ontology to do justice to the fact that individuals instantiate the corresponding universals –  professor, sergeant, nurse – only during certain phases in their lives."@en)
AnnotationAssertion(obo:IAO_0000600 obo:BFO_0000023 "b is a role means: b is a realizable entity and b exists because there is some single bearer that is in some special physical, social, or institutional set of circumstances in which this bearer does not have to be and b is not such that, if it ceases to exist, then the physical make-up of the bearer is thereby changed. (axiom label in BFO2 Reference: [061-001])"@en)
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000023 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000023 "role")
AnnotationAssertion(rdfs:label obo:BFO_0000023 "role"@en)
SubClassOf(obo:BFO_0000023 obo:BFO_0000017)

# Class: obo:BFO_0000031 (generically dependent continuant)

AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000031 "The entries in your database are patterns instantiated as quality instances in your hard drive. The database itself is an aggregate of such patterns. When you create the database you create a particular instance of the generically dependent continuant type database. Each entry in the database is an instance of the generically dependent continuant type IAO: information content entity."@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000031 "the pdf file on your laptop, the pdf file that is a copy thereof on my laptop"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000031 "the sequence of this protein molecule; the sequence that is a copy thereof in that protein molecule."@en)
AnnotationAssertion(obo:IAO_0000115 obo:BFO_0000031 "b is a generically dependent continuant = Def. b is a continuant that g-depends_on one or more other entities. (axiom label in BFO2 Reference: [074-001])"@en)
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000031 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000031 "generically dependent continuant")
AnnotationAssertion(rdfs:label obo:BFO_0000031 "generically dependent continuant"@en)
SubClassOf(obo:BFO_0000031 obo:BFO_0000002)

# Class: obo:BFO_0000040 (material entity)

AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000040 "a flame"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000040 "a forest fire"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000040 "a human being"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000040 "a hurricane"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000040 "a photon"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000040 "a puff of smoke"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000040 "a sea wave"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000040 "a tornado"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000040 "an aggregate of human beings."@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000040 "an energy wave"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000040 "an epidemic"@en)
AnnotationAssertion(obo:IAO_0000112 obo:BFO_0000040 "the undetached arm of a human being"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000040 "BFO 2 Reference: Material entities (continuants) can preserve their identity even while gaining and losing material parts. Continuants are contrasted with occurrents, which unfold themselves in successive temporal parts or phases [60"@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000040 "BFO 2 Reference: Object, Fiat Object Part and Object Aggregate are not intended to be exhaustive of Material Entity. Users are invited to propose new subcategories of Material Entity."@en)
AnnotationAssertion(obo:IAO_0000116 obo:BFO_0000040 "BFO 2 Reference: ‘Matter’ is intended to encompass both mass and energy (we will address the ontological treatment of portions of energy in a later version of BFO). A portion of matter is anything that includes elementary particles among its proper or improper parts: quarks and leptons, including electrons, as the smallest particles thus far discovered; baryons (including protons and neutrons) at a higher level of granularity; atoms and molecules at still higher levels, forming the cells, organs, organisms and other material entities studied by biologists, the portions of rock studied by geologists, the fossils studied by paleontologists, and so on.Material entities are three-dimensional entities (entities extended in three spatial dimensions), as contrasted with the processes in which they participate, which are four-dimensional entities (entities extended also along the dimension of time).According to the FMA, material entities may have immaterial entities as parts – including the entities identified below as sites; for example the interior (or ‘lumen’) of your small intestine is a part of your body. BFO 2.0 embodies a decision to follow the FMA here."@en)
AnnotationAssertion(obo:IAO_0000600 obo:BFO_0000040 "A material entity is an independent continuant that has some portion of matter as proper or improper continuant part. (axiom label in BFO2 Reference: [019-002])"@en)
AnnotationAssertion(rdfs:isDefinedBy obo:BFO_0000040 obo:bfo.owl)
AnnotationAssertion(rdfs:label obo:BFO_0000040 "material entity")
AnnotationAssertion(rdfs:label obo:BFO_0000040 "material entity"@en)
SubClassOf(obo:BFO_0000040 obo:BFO_0000004)

# Class: obo:CHEBI_23367 (molecular entity)

AnnotationAssertion(obo:IAO_0000116 obo:CHEBI_23367 "Stub class to serve as root of hierarchy for imports of molecular entities from ChEBI ontology.")
AnnotationAssertion(rdfs:label obo:CHEBI_23367 "molecular entity")
SubClassOf(obo:CHEBI_23367 obo:BFO_0000040)

# Class: obo:CHEBI_33696 (nucleic acid)

AnnotationAssertion(rdfs:label obo:CHEBI_33696 "nucleic acid")
SubClassOf(obo:CHEBI_33696 obo:CHEBI_23367)

# Class: obo:CLO_0000031 (cell line)

AnnotationAssertion(obo:IAO_0000115 obo:CLO_0000031 "A cultured cell population that represents a genetically stable and homogenous population of cultured cells that shares a common propagation history (i.e. has been successively passaged together in culture).")
AnnotationAssertion(rdfs:label obo:CLO_0000031 "cell line"@en)
SubClassOf(obo:CLO_0000031 obo:BFO_0000040)
SubClassOf(obo:CLO_0000031 ObjectSomeValuesFrom(obo:RO_0001000 obo:OBI_0100026))

# Class: obo:CL_0000000 (cell)

AnnotationAssertion(rdfs:comment obo:CL_0000000 "Stub class to serve as root of hierarchy for imports of cell types from CL or other cell terminologies.")
AnnotationAssertion(rdfs:label obo:CL_0000000 "cell")
SubClassOf(obo:CL_0000000 obo:UBERON_0001062)

# Class: obo:ENVO_01000254 (environmental system)

AnnotationAssertion(obo:IAO_0000116 obo:ENVO_01000254 "1. Stub class to serve as root of hierarchy for imports from an ontology of environment and experimental conditions.

2. Need to consdier how to model environments in a way that covers ENVO and XCO content in a consistent and coherent way. A couple classes under Exploratory Class are relvant here. Consider how we might approach environments/condisitons using an EQ aproach analogous to how phenotypes are defined (i.e. consider environments/coonditions as qualities inhereing in some entity).")
AnnotationAssertion(rdfs:comment obo:ENVO_01000254 "In ENVO's alignment with the Basic Formal Ontology, this class is being considered as a subclass of a proposed BFO class \"system\". The relation \"environed_by\" is also under development. Roughly, a system which includes a material entity (at least partially) within its site and causally influences that entity may be considered to environ it. Following the completion of this alignment, this class' definition and the definitions of its subclasses will be revised.")
AnnotationAssertion(rdfs:label obo:ENVO_01000254 "environmental system")
SubClassOf(obo:ENVO_01000254 obo:BFO_0000040)

# Class: obo:GENO_0000000 (genomic genotype (sex-agnostic))

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000000 "Example zebrafish intrinsic genotype:

Genotype = fgf8a<ti282a/+>; shha<tb392/tb392> (AB)
reference component (genomic background) = AB 
variant component ('genomic variation complement') = fgf8a<ti282a/+>; shha<tb392/tb392>

. . . and within this variant component, there are two 'variant single locus complements' represented:

allele complement 1 = fgf8a<ti282a/+>
allele complement 2 = shha<tb392/tb392>

and within each of these 'variant single locus complements' there is one or more variant gene locus member:

in complement 1: fgf8a<ti282a>
in complement 2: shha<ttb392>")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000000 "A genomic genotype that does not specify the sex determining chromosomal features of its bearer (i.e. does not indicate the background sex chromosome complement)")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000000 "This modeling approach allows use to create separate genotype instances for data sources that report sex-specific phenotypes to ensure that sex-specific G2P differences are accurately described.  These sex-qualified genotypes can be linked to the more general sex-agnostic intrinsic genotype that is shared by make and female mice of the same strain, to aggregate associated phenotypes at this level, and allow aggregation with G2P association data about the same strains from sources that distinguish sex-specific phenotypes (e.g. IMPC) and those that do not (e.g. MGI).

Conceptually, a sex-qualified phenotype represents a superset of sequence features relative to a sex-agnostic intirnsic genotype, in that if specifies the background sex-chromosome complement of the genome. Thus, in the genotype partonomy, a sex-qualified genotype has as part a sex-agnostic genotype. This allows for the propagation of phenotypes associated with a sex-qualified genotype to the intrinsic genotype.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000000 "genotype")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000000 "organismal genotype")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000000 "sex-agnostic intrinsic genotype")
AnnotationAssertion(rdfs:comment obo:GENO_0000000 "In practice, most genotype instances classified as sex-agnostic genotypes because they are not sex-specific. When a genotype is indicated to be that of a male or female, it implies a known sex chromosome complement in the genomic background. This requires us to distinguish separate 'sex-qualified' genotype instances for males and females that share a common 'sex-agnostic' genotype. For example, male and female mice that of the same strain/background and containing the same set of genetic variations will have the same sex-agnostic intrinsic genotype, but different sex-qualified intrinsic genotypes (which take into account background sex chromosome sequence as identifying criteria for genotype instances).")
AnnotationAssertion(rdfs:label obo:GENO_0000000 "genomic genotype (sex-agnostic)")
SubClassOf(obo:GENO_0000000 obo:GENO_0000899)

# Class: obo:GENO_0000002 (variant allele)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000002 "An allele that varies in it sequence from what is considered the reference or canonical sequence at that location.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000002 "The use of the descriptor 'variant' here is consistent with naming recommendations from the ACMG Guidelines paper here: PMID:25741868.  Generally, the descriptive labels chosen for subtypes of variant allele conform  these recommendations as well, where 'variant' is used to cover mutant and polymorphic alleles.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000002 "alternate allele")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000002 "sequence-variant feature")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000002 "variant feature")
AnnotationAssertion(rdfs:comment obo:GENO_0000002 "Note that what is considered the 'reference' vs. 'variant' sequence at a given locus may be context-dependent - so being 'variant' is more a role played in a particular situation. A 'variant allele' contains a 'sequence alteration', or is itself a 'sequence alteration', that makes it vary_with some other allele to which it is being compared. But in any comparison of alternative sequences at a particular genomic location, the choice of a 'reference' vs the 'variant' is context-dependent - as comparisons in other contexts might consider a different feature to be the reference.  So being 'variant' is more a role played in a particular situation - as an allele that is variant in one context/analysis may be considered reference in another.

A variant allele can be variant along its entire extent, in which case it is considered a 'sequence alteration', or it can span a broader extent of sequence contains sequence alteration(s) as part.  And example of the former is a SNP, and an example of the latter is a variant gene allele that contains one or more point mutations in its sequence.")
AnnotationAssertion(rdfs:label obo:GENO_0000002 "variant allele")
EquivalentClasses(obo:GENO_0000002 ObjectIntersectionOf(obo:GENO_0000512 ObjectSomeValuesFrom(obo:GENO_0000683 obo:GENO_0000036)))
SubClassOf(obo:GENO_0000002 ObjectUnionOf(obo:SO_0001059 ObjectSomeValuesFrom(obo:RO_0002524 obo:SO_0001059)))

# Class: obo:GENO_0000009 (genomic variation complement)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000009 "A genomic feature set representing all 'variant single locus complements' in a single genome, which together constitute the 'variant' component of a genomic genotype.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000009 "Note that even a reference feature (e.g. a wild-type gene) that is a member of a single locus complement that contains a variant allele is included in this 'genomic variation complement'. Thus, the members of this 'genomic variation complement' (which is a sequence collection) are 'single locus variant complements'. Our axiom below uses has_part rather than has_member, however, to account for the fact that many 'genomic variation complements' have only one 'single locus variant complement' as members.  So because has_member is not reflexive, it is not appropriate for these cases.")
AnnotationAssertion(rdfs:comment obo:GENO_0000009 "A 'complement' refers to an exhaustive collection of *all* objects that make up some well-defined set. Such a complement may contain 0, 1, or more than one members. The notion of a complement is useful for defining many biologically-relevant sets of sequence features.  Here, a 'genomic variation complement' is the set of all 'single locus complements' in a particular genome that harbor some known variation.

In model organisms, the majority of genotypes describe variation at a single  location in the genome (ie only one 'single-locus variant complement')  that are variant realtive to some reference background. For example, the genotype instance 'fgf8a<t1282a/+>(AB)') exhibits a mutation at only one locus. But some genotypes describe variation at more than one location (e.g. a double mutant that has alterations in the fgf8a gene and the shh gene)).")
AnnotationAssertion(rdfs:label obo:GENO_0000009 "genomic variation complement")
EquivalentClasses(obo:GENO_0000009 ObjectIntersectionOf(obo:GENO_0000660 ObjectSomeValuesFrom(obo:GENO_0000382 obo:GENO_0000030)))

# Class: obo:GENO_0000010 (background genome)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000010 "The ZFIN background 'AB' that serves as a reference as part of the genotype fgf8a^ti282a/+ (AB)")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000010 "A reference genome that represents the sequence of a genome from which a variant genome is derived  (through the introduction of sequence alterations).")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000010 "Here, a 'genomic background' would differ form a 'reference genome' in that 'background' implies a derivation of the variant from the background (which is the case for most MOD strains), whereas a reference is simply meant as a target for comparison. But in a sense all background genomes are by default reference, in that the derived variant genome is compared against it.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000010 "genomic background")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000010 "OBI:genetic population background information")
AnnotationAssertion(rdfs:label obo:GENO_0000010 "background genome")
SubClassOf(obo:GENO_0000010 obo:GENO_0000914)

# Class: obo:GENO_0000014 (gene allele)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000014 "The reference/wild-type cd99l2 danio rerio gene allele spans bases 27,004,426-27,021,059 on Chromosome 7.  The \"mn004Gt\" represents an experimentally-created allele of this gene, in which sequence from a gene trap construct containing an RFP marker has been inserted at the cd99l2 gene locus. The resulting gene allele includes sequence from this construct that make it longer than the reference gene sequence, and also alter its seqauence in a way that prevents it from producing a functional product. The sequence extent of this cd99l2 gene allele is determined based on how its sequence aligns with that of the canonical gene and surrounding sequence in a reference genome.

http://useast.ensembl.org/Danio_rerio/Gene/Summary?g=ENSDARG00000056722

http://zfin.org/action/feature/feature-detail?zdbID=ZDB-ALT-111117-8")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000014 "A genomic feature that represents one of a set of versions of a gene (i.e. a haplotype whose extent is that of a gene)")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000014 "Regarding the distinction between a 'gene' and a 'gene allele':  Every zebrafish genome contains a 'gene allele' for every zebrafish gene. Many will be 'wild-type' or at least functional gene alleles. But some may be alleles that are mutated or truncated so as to lack functionality.  According to current SO criteria defining genes, a 'gene' no longer exists in the case of a non-functional or deleted variant. But the 'gene allele' does exist -  and its extent is that of the remaining/altered sequence based on alignment with a  reference gene.  Even for completely deleted genes, an allele of the gene exists (and here is equivalent to the junction corresponding to the where gene would live based on a reference alignment).

This design allows us to classify genes and any variants of those genes (be they functional or not) as the same type of thing (ie a 'gene allele'), since classification is based on genomic position rather than functional capacity. This is practical for representation of variant genotypes which often carry non-functional versions  of a gene at a particular locus. What is important here is specifying what is present at a locus associated with a particular gene, whether or not it is a functional gene or not.")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000014 "http://purl.obolibrary.org/obo/SO_0001023 ! allele")
AnnotationAssertion(rdfs:comment obo:GENO_0000014 "In SO, the concept of a 'gene' is functionally defined, in that a gene necessarily produces a functional product. By contrast, the concept of a 'gene allele' here is positionally defined - representing the sequence present at the location a gene resides in a reference genome (based on sequence alignment).  An Shh gene allele, for example, may be a fully functional wild-type version of the gene, a non-functional version carrying a deleterious point mutation, a truncated version of the gene, or even a complete deletion. In all these cases, an 'Shh gene allele' exists at the position where the canonical gene resides in the reference genome - even if the extent of this allele different than the wild-type, or even zero in the case of the complete deletion.

A genomic feature being an allele_of a gene is based on its location in a host genome - not on its sequence. This means, for example, that the insertion of the human SMN2 gene into the genome of a mouse (see http://www.informatics.jax.org/allele/MGI:3056903) DOES NOT represent an allele_of the human SMN2 gene according to the GENO model - because it is located in a mouse genome, not a human one.  Rather, this is a transgenic insertion that derives_sequence_from the human SMN2 gene.  If this human SMN2 gene is inserted within the mouse SMN2 gene locus (e.g. used to replace mouse SMN2 gene), the feature it creates is an allele_of the mouse SMN2 gene (one that happens to match the sequence of the human ortholog of the gene).  But again, it is not an allele_of the human SMN2 gene.")
AnnotationAssertion(rdfs:label obo:GENO_0000014 "gene allele")
SubClassOf(obo:GENO_0000014 obo:GENO_0000512)
SubClassOf(obo:GENO_0000014 ObjectSomeValuesFrom(obo:GENO_0000408 obo:SO_0000704))

# Class: obo:GENO_0000017 (reference sequence)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000017 "A sequence that serves as a standard against which other sequences at the same location are compared.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000017 "The notion of a 'reference' in GENO is implemented at the level of 'biological sequence' rather than at the level of a sequence feature - i.e.  we define a class for 'reference sequence' rather than reference sequence feature'. This is because it is at the *sequence* level that features of interest are determined to be variant or not.  It is taken for granted that the *location* of the feature of interest  is the same as that of the reference sequence to which it is compared, becasue an alignment process establishing common location always precedes the sequence comparison that determines if the feature is variant.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000017 "reference sequence")
AnnotationAssertion(rdfs:comment obo:GENO_0000017 "A reference sequence is one that serves as a standard against which 'variant' versions of the feature are compared, or against which located sequence features within the reference region are aligned in order to assign position information.  Being 'reference' does not imply anything about the frequency or function of features bearing the sequence. Only that some agent has used it to serve a reference role in defining a variant or locating a sequence.")
AnnotationAssertion(rdfs:label obo:GENO_0000017 "reference sequence")
EquivalentClasses(obo:GENO_0000017 ObjectIntersectionOf(obo:GENO_0000702 ObjectSomeValuesFrom(obo:GENO_0000968 obo:GENO_0000152)))

# Class: obo:GENO_0000019 (obsolete sequence feature collection)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000019 "a collection more than one sequence features (ie a collection of discontinuous sequence features)")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000019 "perhaps not same as SO:sequence collection, as here we explicitly include features that can have an extent of zero (and SO:sequence collection is a collection of regions that have an extent of at least one)")
AnnotationAssertion(rdfs:comment obo:GENO_0000019 "1. Note that members of this class can be features with extents of zero (e.g. junctions).  This is likely different than the SO:sequence feature class which has members that are regions.")
AnnotationAssertion(rdfs:label obo:GENO_0000019 "obsolete sequence feature collection"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000019 "true"^^xsd:boolean)

# Class: obo:GENO_0000022 (obsolete genomic feature collection)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000022 "A sequence feature collection comprised of discontiguous sequences from a single genome")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000022 "Previously called 'genetic locus collection'.  Difference between 'genetic' and 'genomic', as used here, is that 'genomic' implies a feature is a heritable part of some genome, while 'genetic' implies that it is part of some feature that is capable of contributing to gene expression in a cell or other biological system.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000022 "genomic feature collection")
AnnotationAssertion(rdfs:comment obo:GENO_0000022 "Conceptually, members of this collection are meant to be about the sum total genetic material in a single cell or organism. But these members need not be associated with an actual material in a real cell or organism individual.  For example, things like a 'reference genome' may not actually represent the material genome of any individual cell or organism in reality. Here, there may be no genomic material referents of the sequences in such a collection because the genome is tied to an idealized, hypothetical cell or organism instance. The key is that conceptually, they are still tied to the idea of being contained in a single genome. In the case of a genotype, the individual seqeunce members are not all about the genetic material of a singel cell or organism. Rather, it is the resolved sequence contained in the genotype that is meant to be about the total genomic sequence content of a genome - which we deem acceptable for classifying as a genetic locus collection.")
AnnotationAssertion(rdfs:label obo:GENO_0000022 "obsolete genomic feature collection"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000022 "true"^^xsd:boolean)

# Class: obo:GENO_0000029 (obsolete reference single locus complement)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000029 "A single locus complement that serves as a standard against which 'variant' sequences are compared")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000029 "reference allelic complement")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000029 "reference single locus feature complement")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000029 "Not required at present for any specific use case, so marking as exploratory and obsoleting for simplicity.

Eq Class axiom:
'single locus complement'
 and (has_sequence_attribute some reference)

SC axioms:
'has member' exactly 0 'variant allele'
'has member' only 'reference genomic feature'
'has member' some 'reference genomic feature'")
AnnotationAssertion(rdfs:label obo:GENO_0000029 "obsolete reference single locus complement"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000029 "true"^^xsd:boolean)

# Class: obo:GENO_0000030 (variant single locus complement)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000030 "A single locus complement in which at least one member allele is considered variant, and/or the total number of features in the complement deviates from the normal poloidy of the reference genome (e.g. trisomy 13).")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000030 "variant allelic complement"@en)
AnnotationAssertion(rdfs:comment obo:GENO_0000030 "Instances of this class are sets comprised of all allels at a specified genomic location where at least one allele is variant (non-reference). In diploid genomes this complement typically has two members.

Note that this class also covers cases where deviant numbers of genes or chromosomes are present in a genome (e.g. trisomy of chromosome 21), even if their sequence is not variant.")
AnnotationAssertion(rdfs:label obo:GENO_0000030 "variant single locus complement")
EquivalentClasses(obo:GENO_0000030 ObjectIntersectionOf(obo:GENO_0000516 ObjectSomeValuesFrom(obo:GENO_0000382 obo:GENO_0000002)))

# Class: obo:GENO_0000033 (variant genome)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000033 "A genome that varies at one or more loci from the sequence of some reference genome.")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000033 "http://purl.obolibrary.org/obo/SO_0001506 ! variant_genome (definition of SO term here is too vague to know if has same meaning as GENO class here)")
AnnotationAssertion(rdfs:label obo:GENO_0000033 "variant genome")
EquivalentClasses(obo:GENO_0000033 ObjectIntersectionOf(obo:SO_0001026 ObjectSomeValuesFrom(obo:GENO_0000683 obo:GENO_0000914)))
SubClassOf(obo:GENO_0000033 ObjectSomeValuesFrom(obo:GENO_0000382 obo:SO_0001059))

# Class: obo:GENO_0000036 (reference allele)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000036 "An allele whose sequence matches what is consdiered to be the reference sequence at that location in the genome.")
AnnotationAssertion(rdfs:comment obo:GENO_0000036 "Being a 'reference allele' is a role or status assigned in the context of a specific dataset or analysis.  In human variation datasets, 'reference' status is typically assigned based on factors such as being the most common in a population, being an ancestral allele, or being indentified first as a prototypical example of some feature or gene.  For example, 'reference alleles' in characterizing SNPs often represent the allele first characterized in a reference genome, or the most common allele in a population.

In model organism datasets, 'reference' alleles are typically (but not always) the 'wild-type' variant at a given locus, representing a functional and unaltered version of the feature that is part of a defined genomic background, and against which natural or experimentally-induced alterations are compared.")
AnnotationAssertion(rdfs:label obo:GENO_0000036 "reference allele")
EquivalentClasses(obo:GENO_0000036 ObjectIntersectionOf(obo:GENO_0000512 ObjectSomeValuesFrom(obo:GENO_0000968 obo:GENO_0000152)))

# Class: obo:GENO_0000037 (obsolete unspecified feature)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000037 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000037 "A genomic feature known to exist, but remaining uncharacterized with respect to its identity (e.g. which allele exists at a given gene locus).")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000037 "Uses as a term of convenience for describing data reporting unspecified alleles in a genotype (i.e. in cases where zygosoty for a given locus is not known).  Typlically recorded in genotype syntaxes as a ' /? '.")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000037 "Not required at present for any specific use case, so marking as exploratory and obsoleting for simplicity.

Eq Class def: 'genomic feature'
 and (has_sequence_attribute some unspecified)")
AnnotationAssertion(rdfs:comment obo:GENO_0000037 "An unspecified feature is known to exist as the partner of a characterized allele when the zygosity at that locus is not known.   Its specific sequence/identity, however, is unknown (ie whether it is a reference or variant allele).")
AnnotationAssertion(rdfs:label obo:GENO_0000037 "obsolete unspecified feature"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000037 "true"^^xsd:boolean)

# Class: obo:GENO_0000042 (obsolete reference junction)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000042 "A junction found at a chromosomal position where an insertion has occurred on the homologous chromosome, such that the junction represents the reference feature paired with the hemizygously inserted feature.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000042 "hemizygous reference junction")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000042 "Eliminating unecessary defined/organizational classes. Former logical def:

junction
 and (has_sequence_attribute some reference)

Subclass axiom:
is_variant_with some insertion")
AnnotationAssertion(rdfs:comment obo:GENO_0000042 "In the case of a transgenic insertion that creates a hemizygous locus, the refernce locus that this insertion is variant_with is the junction on the homologous chromosome at the same position where the insertion occurred. This is the 'hemizygous reference' junction.

The junction-insertion pair represents the allelic complement at that locus, which is considered to be hemizygous. Most genotype syntaxes represent this hemizygous state with a ' /0' notation.")
AnnotationAssertion(rdfs:label obo:GENO_0000042 "obsolete reference junction"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000042 "true"^^xsd:boolean)

# Class: obo:GENO_0000047 (danio rerio gene)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000047 "A gene that originates from the genome of a danio rerio.")
AnnotationAssertion(rdfs:label obo:GENO_0000047 "danio rerio gene")
EquivalentClasses(obo:GENO_0000047 ObjectIntersectionOf(obo:SO_0000704 ObjectSomeValuesFrom(obo:RO_0002162 obo:NCBITaxon_7955)))

# Class: obo:GENO_0000054 (homo sapiens gene)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000054 "A gene that originates from the genome of a homo sapiens.")
AnnotationAssertion(rdfs:label obo:GENO_0000054 "homo sapiens gene")
EquivalentClasses(obo:GENO_0000054 ObjectIntersectionOf(obo:SO_0000704 ObjectSomeValuesFrom(obo:RO_0002162 obo:NCBITaxon_9606)))

# Class: obo:GENO_0000057 (mus musculus gene)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000057 "A gene that originates from the genome of a mus musculus.")
AnnotationAssertion(rdfs:label obo:GENO_0000057 "mus musculus gene")
EquivalentClasses(obo:GENO_0000057 ObjectIntersectionOf(obo:SO_0000704 ObjectSomeValuesFrom(obo:RO_0002162 obo:NCBITaxon_10090)))

# Class: obo:GENO_0000060 (obsolete reference gene allele)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000060 "A reference human sonic hedgehog (shh) gene spans bases 155,592,680-155,604,967 on Chromosome 7, according to genome build GRCh37, and produces a primary funcitonal transcript that is 4454 bp in length and produces a 462 amino acid protein involved in cell signaling events behind various aspects of cell differentiation and development.
http://useast.ensembl.org/Homo_sapiens/Gene/Summary?g=ENSG00000164690

Note that this may be slightly different than the extend described in other gene databases, such as Entrez Gene:http://www.ncbi.nlm.nih.gov/gene/6469")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000060 "A version/allele of a gene that serves as a standard against which variant genes are compared.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000060 "reference gene")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000060 "Not required at present for any specific use case, so marking as exploratory and obsoleting for simplicity.

Eq Class axiom:
'gene allele'
 and (has_sequence_attribute some reference)

SC axioms:
is_variant_with some 'gene allele'
is_reference_allele_of some gene")
AnnotationAssertion(rdfs:comment obo:GENO_0000060 "Being a 'reference gene' is a role or status assigned in the context of a specific dataset or analysis.  In human variation datasets, 'reference' status is typically assigned based on factors such as being the most common version/allele in a population, being an ancestral allele, or being indentified first as a prototypical example of a gene.

In model organism datasets, 'reference' genes are typically the 'wild-type' allele for a given gene, representing a functional and unaltered version of the gene that is part of a defined genomic background, and against which natural or experimentally-induced versions are compared.")
AnnotationAssertion(rdfs:label obo:GENO_0000060 "obsolete reference gene allele"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000060 "true"^^xsd:boolean)

# Class: obo:GENO_0000091 (obsolete experimental insertion)

AnnotationAssertion(rdfs:label obo:GENO_0000091 "obsolete experimental insertion"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000091 "true"^^xsd:boolean)

# Class: obo:GENO_0000092 (gene trap insertion)

AnnotationAssertion(rdfs:label obo:GENO_0000092 "gene trap insertion")
SubClassOf(obo:GENO_0000092 obo:SO_0000667)

# Class: obo:GENO_0000093 (integrated transgene)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000093 "A transgene that has been integrated into a chrromosome in the host genome.")
AnnotationAssertion(rdfs:comment obo:GENO_0000093 "An integrated transgene differs from a transgenic insertion in that a transgenic insertion may contain single transgene, a partial transgene that needs endognous sequences from the host genome to become functional (e.g. an enhancer trap), or multiple transgenes (i.e. be polycistronic). Fiurthermore, the transgenic insertion may contain sequences in addition to its transgene(s - e.g. sequences flanking the transgene reqired for integration or replicaiton/maintenance in the host genome.  The term 'integrated transgene' covers individual transgenes that were delivered in whole or in part by a transgenic insertion.

An 'integrated transgene' differs from its parent 'transgene' in that transgenes can include genes introduced into a cell/organism on an extra-chromosomal plasmid that is never integrated into the host genome.")
AnnotationAssertion(rdfs:label obo:GENO_0000093 "integrated transgene")
SubClassOf(obo:GENO_0000093 obo:SO_0000902)
SubClassOf(obo:GENO_0000093 ObjectSomeValuesFrom(obo:BFO_0000050 obo:SO_0001218))

# Class: obo:GENO_0000106 (genomic material)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000106 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000106 "A nucleic acid macromolecule that is part of a cell or virion and has been inherited from an ancestor cell or virion, and/or is capable of being replicated and inherited through successive generations of progeny.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000106 "1. Note that at present, a material genome and genetic material are necessarily part of some cell or virion. So a genomic library is not considered a material genome/genomic material - rather, we could say that this genomic library is a 'genomic material sample' that bears the concretization of some genome.

2.  A challenging edge case is experimentally delivered DNA into a terminally differentiated cell that will never divide.  Such material does technically meet our definition - since we are careful to say that the material must be *capable of* being stably inherited through subsequent generations.  Thus, we would say that *if* the cell were resume replication, the material would be heritable in this way.")
AnnotationAssertion(rdfs:comment obo:GENO_0000106 "1. Genomic material here is considered as a DNA or RNA molecule that is found in a cell or virus, and capable of being replicated and inherited by progeny cells or virus. As such, this nucleic acid is either chromosomal DNA, or some replicative epi-chromosomal plasmid or transposon. Genetic material is necessarily part of some 'material genome', and both are necessarily part of some cell or virion. So a genomic library is not considered a material genome/genetic material - rather, we could say that this genomic library is a 'genomic material sample' that bears the concretization of some genome.

2. Genomic material need not be inherited from an immediate ancestor cell or organism (e.g. a replicative plasmid or transposon acquired through some experimental modification), but such cases must be capable of being inherited by progeny cells or organisms.")
AnnotationAssertion(rdfs:label obo:GENO_0000106 "genomic material")
SubClassOf(obo:GENO_0000106 obo:GENO_0000482)
SubClassOf(obo:GENO_0000106 ObjectSomeValuesFrom(obo:RO_0000091 obo:GENO_0000139))

# Class: obo:GENO_0000108 (material genome)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000108 "A material entity that represents all genetic material in a cell or virion.  The material genome is typically molecular aggregate of all the chromosomal DNA and epi-chromosomal DNA that represents all sequences that are heritable by progeny of a cell or virion.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000108 "physical genome")
AnnotationAssertion(rdfs:comment obo:GENO_0000108 "A genome is the collection of all nucleic acids in a cell or virus, representing all of an organism's hereditary information. It is typically DNA, but many viruses have RNA genomes. The genome includes both nuclear chromosomes (ie nuclear and micronucleus chromosomes) and cytoplasmic chromosomes stored in various organelles (e.g. mitochondrial or chloroplast chromosomes), and can in addition contain non-chromosomal elements such as replicative viruses, plasmids, and transposable elements.

Note that at present, a material genome and genetic material are necessarily part of some cell or virion. So a genomic library is not considered a material genome/genetic material - rather, we could say that this genomic library is a 'genomic material sample' that bears the concretization of some SO:genome.")
AnnotationAssertion(rdfs:label obo:GENO_0000108 "material genome")
SubClassOf(obo:GENO_0000108 obo:BFO_0000040)

# Class: obo:GENO_0000111 (human population)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000111 "a population of homo sapiens grouped together in virtue of their sharing some commonality (either an inherent attribute or an externally assigned role)")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000111 "Consider http://semanticscience.org/resource/SIO_001062 ! human population (\"A human population refers to a collection of human beings\").")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000111 "homo sapiens population")
AnnotationAssertion(rdfs:label obo:GENO_0000111 "human population")
SubClassOf(obo:GENO_0000111 obo:OBI_0000181)

# Class: obo:GENO_0000112 (strain or breed)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000112 "A maximal collection of organisms of a single species that have been bred or experimentally manipulated with the goal of being genetically identical.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000112 "organism strain or breed")
AnnotationAssertion(rdfs:comment obo:GENO_0000112 "Two mice colonies with the same genotype information, but maintained in different labs, are different strains (many examples of this in MGI/IMSR)")
AnnotationAssertion(rdfs:label obo:GENO_0000112 "strain or breed")
SubClassOf(obo:GENO_0000112 obo:GENO_0000113)
SubClassOf(obo:GENO_0000112 ObjectSomeValuesFrom(obo:RO_0002162 obo:OBI_0100026))

# Class: obo:GENO_0000113 (taxonomic group)

AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000113 "A group comprised of organisms from a single taxonomic group (e.g. family, order, genus, species, or a strain or breed within a given taxon)")
AnnotationAssertion(rdfs:label obo:GENO_0000113 "taxonomic group")
SubClassOf(obo:GENO_0000113 obo:PCO_0000000)

# Class: obo:GENO_0000118 (mus musculus strain)

AnnotationAssertion(rdfs:label obo:GENO_0000118 "mus musculus strain")
SubClassOf(obo:GENO_0000118 obo:GENO_0000112)

# Class: obo:GENO_0000119 (danio rerio strain)

AnnotationAssertion(rdfs:label obo:GENO_0000119 "danio rerio strain")
SubClassOf(obo:GENO_0000119 obo:GENO_0000112)
SubClassOf(obo:GENO_0000119 ObjectSomeValuesFrom(obo:RO_0002351 obo:NCBITaxon_7955))
SubClassOf(obo:GENO_0000119 ObjectAllValuesFrom(obo:RO_0002351 obo:NCBITaxon_7955))

# Class: obo:GENO_0000125 (obsolete sequence feature collection attribute)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000125 "sequence attribute that can inhere only in a collection of more than one sequence features")
AnnotationAssertion(rdfs:label obo:GENO_0000125 "obsolete sequence feature collection attribute"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000125 "true"^^xsd:boolean)

# Class: obo:GENO_0000131 (in cis)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000131 "A quality inhering in a collection of discontinuous sequence features in a single genome that reside on the same macromolecule (eg the same chromosomes).")
AnnotationAssertion(rdfs:label obo:GENO_0000131 "in cis")
SubClassOf(obo:GENO_0000131 obo:GENO_0000886)

# Class: obo:GENO_0000132 (in trans)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000132 "A quality inhering in a collection of discontinuous sequence features in a single genome that reside on different macromolecules (e.g. different chromosomes).")
AnnotationAssertion(rdfs:label obo:GENO_0000132 "in trans")
SubClassOf(obo:GENO_0000132 obo:GENO_0000886)

# Class: obo:GENO_0000133 (zygosity)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000133 "An allelic state that describes the degree of similarity between features in a 'single locus complement', within the genome of a cell or organism (i.e., whether the alleles or haplotypes that reside at the same location on paired chromosomes are the same or different).")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000133 "allelic state")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000133 "derived from https://en.wikipedia.org/wiki/Zygosity")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000133 "http://semanticscience.org/resource/SIO_001263")
AnnotationAssertion(rdfs:label obo:GENO_0000133 "zygosity")
SubClassOf(obo:GENO_0000133 obo:GENO_0000875)
SubClassOf(obo:GENO_0000133 ObjectSomeValuesFrom(obo:RO_0000052 obo:GENO_0000516))

# Class: obo:GENO_0000134 (hemizygous)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000134 "A zygosity quality inhering in a 'single locus complement' with half the number of alleles than normal (e.g. a single allele in a diploid genome, for example, a locus on the Y chromosome in a eukaryotic male genome, or a transgene that is present only in one of the two parental chromosome sets)")
AnnotationAssertion(rdfs:label obo:GENO_0000134 "hemizygous")
SubClassOf(obo:GENO_0000134 obo:GENO_0000391)

# Class: obo:GENO_0000135 (heterozygous)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000135 "A zygosity quality inhering in a 'single locus complement' where the copies of the feature at this location have at least one difference in sequence  (in a eukaryotic diploid genome, this means having two distinct alleles on each of the two homologous chromosomes, one inherited from each parent).")
AnnotationAssertion(rdfs:label obo:GENO_0000135 "heterozygous")
SubClassOf(obo:GENO_0000135 obo:GENO_0000391)

# Class: obo:GENO_0000136 (homozygous)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000136 "A zygosity quality inhering in a 'single locus complement' where all copies of the feature at this location have the same sequence (in a eukaryotic diploid genome, this means having identical alleles on each of the two homologous chromosomes, one inherited from each parent).")
AnnotationAssertion(rdfs:label obo:GENO_0000136 "homozygous")
SubClassOf(obo:GENO_0000136 obo:GENO_0000391)

# Class: obo:GENO_0000137 (unspecified zygosity)

AnnotationAssertion(Annotation(rdfs:comment "MGI uses this term when zygosity is not known.") obo:IAO_0000118 obo:GENO_0000137 "indeterminite zygosity")
AnnotationAssertion(Annotation(rdfs:comment "(this is how the GVF10 format/standard refers to loci without enough data to make an accurate call . . . see http://www.sequenceontology.org/resources/gvf.html#quick_gvf_examples)") obo:IAO_0000118 obo:GENO_0000137 "no-call zygosity")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000137 "unknown zygosity")
AnnotationAssertion(rdfs:label obo:GENO_0000137 "unspecified zygosity")
SubClassOf(obo:GENO_0000137 obo:GENO_0000133)

# Class: obo:GENO_0000138 (heritabililty)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000138 "The disposition of an entity to be transmitted to subsequent generations following a genetic replication or organismal reproduction event.")
AnnotationAssertion(rdfs:comment obo:GENO_0000138 "We can use these terms to describe the heritability of genetic matieral or sequence features - e.g. chromosomal DNA or genes are heritable in that they are passed on to child cells/organisms).  Such genetic material has a heritable disposition in a cell or virion, in virtue of its being replicated in its cellular host and inherited by progeny cells (such that the sequence content it encodes is stably propagated in the genetic material of subsequence generations of cells).

We can also use these terms to describe the heritability of phenotypes/conditions - e.g. the passage of a particular trait or disease across generations of reproducing cells/organisms.")
AnnotationAssertion(rdfs:label obo:GENO_0000138 "heritabililty")
SubClassOf(obo:GENO_0000138 obo:BFO_0000016)

# Class: obo:GENO_0000139 (heritable)

AnnotationAssertion(rdfs:label obo:GENO_0000139 "heritable")
SubClassOf(obo:GENO_0000139 obo:GENO_0000138)

# Class: obo:GENO_0000140 (non-heritable)

AnnotationAssertion(rdfs:label obo:GENO_0000140 "non-heritable")
SubClassOf(obo:GENO_0000140 obo:GENO_0000138)

# Class: obo:GENO_0000141 (inheritance pattern)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000141 "The pattern in which a genetic trait or condition is passed from one generation to the next, as determined by genetic interactions between alleles of the causal gene, and interactions between these alleles and the environment.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000141 "The subtypes of inheritance pattern in this hierarchy are largely distinguished based on the underlying genetic mechanism, which will manifest in a characteristic pattern of traits in affected and unaffected family members. For example, 'autosomal dominant inheritance' defines an inheritance pattern that is caused by the interaction of alleles on non-sex chromosomes wherein the trait manifests even in heterozygotes - resulting in a characteristic pattern of 'dominant' inheritance across generations of individuals in a family.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000141 "mode of inheritance")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000141 "phenotypic inheritance pattern")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000141 "http://purl.obolibrary.org/obo/HP_0000005")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000141 "http://purl.obolibrary.org/obo/NCIT_C45827")
AnnotationAssertion(rdfs:comment obo:GENO_0000141 "An inheritance pattern results from the disposition of a genetic variant to cause a particular trait or phenotype when it is present in a particular genetic and environmental context.  Here, \"genetic context\" refers to the allelic state of the variant, which depends on what other alleles exist at the same location/locus in the genome. Zygosities such as heterozygous and homozygous are simple, common examples of 'states' of an allele. 

These genetic and environmental \"interactions\" of alleles play out at the level of the gene products produced by the causal alleles, and are observable in the pattern with which the trait caused by an allele is inherited across generations of individuals. Thus, an inheritance pattern such as dominance is not inherent to a single allele or its phenotype, but rather a result of the relationship between two alleles of a gene and the phenotype that results in a given environment. This also means that the 'dominance' of an allele is context dependent - Allele 1 can be dominant over Allele 2 in the context of Phenotype X, but recessive to Allele 3 in the context of Phenotype Y.")
AnnotationAssertion(rdfs:label obo:GENO_0000141 "inheritance pattern")
SubClassOf(obo:GENO_0000141 obo:BFO_0000016)

# Class: obo:GENO_0000142 (obsolete dominant inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000142 "disposition inhering in a genetic locus variant that is realized in its inheritance by some offspring such that at least a partial variant-associated phenotype is apparent in heterozygotes")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000142 "Triage until decide if want to define this as grouping class that would result in multiple-inheritance.")
AnnotationAssertion(rdfs:label obo:GENO_0000142 "obsolete dominant inheritance"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000142 "true"^^xsd:boolean)

# Class: obo:GENO_0000143 (co-dominant autosomal inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000143 "An autosomal dominant inheritance pattern wherein a heterozygous individual simultaneously expresses the distinct traits associated with each allele in the heterozygous locus.")
AnnotationAssertion(rdfs:label obo:GENO_0000143 "co-dominant autosomal inheritance")
SubClassOf(obo:GENO_0000143 obo:GENO_0000147)

# Class: obo:GENO_0000144 (complete autosomal dominant inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000144 "An autosomal dominant inheritance pattern wherein the trait associated with one allele completely masks the trait associated with a different allele found at that locus.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000144 "pure dominant inheritance")
AnnotationAssertion(rdfs:label obo:GENO_0000144 "complete autosomal dominant inheritance")
SubClassOf(obo:GENO_0000144 obo:GENO_0000147)

# Class: obo:GENO_0000145 (incomplete autosomal dominant inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000145 "An autosomal dominant inheritance pattern wherein the trait expressed in a heterozygous individual is intermediate between the trait expressed in individuals homozygous for either allele in the heterozygous locus.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000145 "intermediate dominant autosomal inheritance")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000145 "semi-dominant autosomal inheritance")
AnnotationAssertion(rdfs:label obo:GENO_0000145 "incomplete autosomal dominant inheritance")
SubClassOf(obo:GENO_0000145 obo:GENO_0000147)

# Class: obo:GENO_0000146 (X-linked dominant inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000146 "An X-linked inheritance pattern wherein the trait manifests in heterozygotes.")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000146 "http://purl.obolibrary.org/obo/HP_0001423")
AnnotationAssertion(rdfs:label obo:GENO_0000146 "X-linked dominant inheritance")
SubClassOf(obo:GENO_0000146 obo:GENO_0000936)

# Class: obo:GENO_0000147 (autosomal dominant inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000147 "An inheritance pattern wherein a trait caused by alleles of an autosomal gene manifests in heterozygotes.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000147 "vertical inheritance")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000147 "http://purl.obolibrary.org/obo/HP_0000006")
AnnotationAssertion(rdfs:label obo:GENO_0000147 "autosomal dominant inheritance")
SubClassOf(obo:GENO_0000147 obo:GENO_0000934)

# Class: obo:GENO_0000148 (autosomal recessive inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000148 "An inheritance pattern wherein a trait caused by alleles of an autosomal gene manifests in homozygous but not heterozygote individuals.")
AnnotationAssertion(rdfs:label obo:GENO_0000148 "autosomal recessive inheritance")
SubClassOf(obo:GENO_0000148 obo:GENO_0000934)

# Class: obo:GENO_0000149 (X-linked recessive inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000149 "An X-linked inheritance pattern wherein a trait caused by alleles of a gene on the X-chromosome manifests in homozygous but not heterozygote individuals.")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000149 "http://purl.obolibrary.org/obo/HP_0001419")
AnnotationAssertion(rdfs:label obo:GENO_0000149 "X-linked recessive inheritance"@en)
SubClassOf(obo:GENO_0000149 obo:GENO_0000936)

# Class: obo:GENO_0000150 (obsolete autosomal recessive inheritance)

AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000150 "duplicate term, use GENO:0000148")
AnnotationAssertion(rdfs:label obo:GENO_0000150 "obsolete autosomal recessive inheritance"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000150 "true"^^xsd:boolean)

# Class: obo:GENO_0000152 (reference)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000152 "An attribute inhering in a feature that is designated to serve as a standard against which 'variant' versions of the same location are compared.")
AnnotationAssertion(rdfs:comment obo:GENO_0000152 "Being 'reference' is a role or status assigned in the context of a data set or analysis framework.  A given allele can be reference on one context and variant in another.")
AnnotationAssertion(rdfs:label obo:GENO_0000152 "reference")
SubClassOf(obo:GENO_0000152 obo:GENO_0000773)

# Class: obo:GENO_0000160 (unspecified life cycle stage)

AnnotationAssertion(rdfs:label obo:GENO_0000160 "unspecified life cycle stage")
SubClassOf(obo:GENO_0000160 obo:UBERON_0000105)

# Class: obo:GENO_0000164 (obsolete genetic insertion technique)

AnnotationAssertion(rdfs:label obo:GENO_0000164 "obsolete genetic insertion technique"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000164 "true"^^xsd:boolean)

# Class: obo:GENO_0000165 (obsolete mutagen treatment technique)

AnnotationAssertion(rdfs:label obo:GENO_0000165 "obsolete mutagen treatment technique"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000165 "true"^^xsd:boolean)

# Class: obo:GENO_0000166 (obsolete targeted gene mutation technique)

AnnotationAssertion(rdfs:label obo:GENO_0000166 "obsolete targeted gene mutation technique"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000166 "true"^^xsd:boolean)

# Class: obo:GENO_0000169 (obsolete random genetic insertion technique)

AnnotationAssertion(rdfs:label obo:GENO_0000169 "obsolete random genetic insertion technique"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000169 "true"^^xsd:boolean)

# Class: obo:GENO_0000170 (obsolete targeted genetic insertion technique)

AnnotationAssertion(rdfs:label obo:GENO_0000170 "obsolete targeted genetic insertion technique"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000170 "true"^^xsd:boolean)

# Class: obo:GENO_0000171 (obsolete enhancer trapping technique)

AnnotationAssertion(rdfs:label obo:GENO_0000171 "obsolete enhancer trapping technique"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000171 "true"^^xsd:boolean)

# Class: obo:GENO_0000172 (obsolete gene trapping technique)

AnnotationAssertion(rdfs:label obo:GENO_0000172 "obsolete gene trapping technique"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000172 "true"^^xsd:boolean)

# Class: obo:GENO_0000173 (obsolete promoter trapping technique)

AnnotationAssertion(rdfs:label obo:GENO_0000173 "obsolete promoter trapping technique"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000173 "true"^^xsd:boolean)

# Class: obo:GENO_0000174 (obsolete targeted knock-in technique)

AnnotationAssertion(rdfs:label obo:GENO_0000174 "obsolete targeted knock-in technique"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000174 "true"^^xsd:boolean)

# Class: obo:GENO_0000175 (obsolete random transgene insertion technique)

AnnotationAssertion(rdfs:label obo:GENO_0000175 "obsolete random transgene insertion technique"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000175 "true"^^xsd:boolean)

# Class: obo:GENO_0000324 (obsolete chromosome complement)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000324 "A single locus complement that represents the collection of all chromosome sequences for a given chromosome in a single genome")
AnnotationAssertion(rdfs:label obo:GENO_0000324 "obsolete chromosome complement"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000324 "true"^^xsd:boolean)

# Class: obo:GENO_0000338 (gained aneusomic chromosome)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000338 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000338 "A complete chromosome that has been abnormally duplicated in a genome, typically as the result of a meiotic non-disjunction event or unbalanced translocation")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000338 "duplicate chromosome")
AnnotationAssertion(rdfs:comment obo:GENO_0000338 "This 'gained' chromosome is conceptually an 'insertion' in a genome  that received two copies of a chromosome in a cell division following a non-disjunction event. As such, it qualifies as a type of sequence_alteration, and as a 'extra' chromosome.")
AnnotationAssertion(rdfs:label obo:GENO_0000338 "gained aneusomic chromosome")
SubClassOf(obo:GENO_0000338 obo:GENO_0000346)
SubClassOf(obo:GENO_0000338 ObjectSomeValuesFrom(obo:GENO_0000207 obo:GENO_0000685))

# Class: obo:GENO_0000339 (lost aneusomic chromosome)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000339 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000339 "A 'deletion' resulting from the loss of a complete chromosome, typically as the result of a meiotic non-disjunction event or unbalanced translocation.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000339 "This 'lost' chromosome is conceptually a 'deletion' in a genome that received zero copies of a chromosome in a cell division following a non-disjunction event. As such, it qualifies as a type of sequence_alteration. But it doesn't classify under SO:deletion because this class is defined as \"the point at which one or more contiguous nucleotides were excised\".")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000339 "absent aneusomic chromosome")
AnnotationAssertion(rdfs:label obo:GENO_0000339 "lost aneusomic chromosome")
SubClassOf(obo:GENO_0000339 obo:GENO_0000346)
SubClassOf(obo:GENO_0000339 DataHasValue(obo:GENO_0000678 "0"^^xsd:integer))

# Class: obo:GENO_0000343 (aneusomic chromosomal part)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000343 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000343 "A large deletion or terminal addition of part of some non-homologous chromsosome, as the result of an unbalanced translocation.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000343 "Novel sequence features gained in a genome are considered to be sequence alterations, including aneusomic chromosome segments gained through unbalanced translocation events, entire aneusomic chromosomes gained through a non-disjunction event during replication, or extrachromosomal replicons that becoome part of the heritable genome of a cell or organism.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000343 "aneuploid chromosomal segment")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000343 "aneusomic chromosomal subregion/segment")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000343 "partial aneusomic chromosomal element")
AnnotationAssertion(rdfs:comment obo:GENO_0000343 "Aneusomic chromosomal parts are examples of \"partial aneuploidy\" as described in http://en.wikipedia.org/wiki/Aneuploidy: \"The terms \"partial monosomy\" and \"partial trisomy\" are used to describe an imbalance of genetic material caused by loss or gain of part of a chromosome. In particular, these terms would be used in the situation of an unbalanced translocation, where an individual carries a derivative chromosome formed through the breakage and fusion of two different chromosomes. In this situation, the individual would have three copies of part of one chromosome (two normal copies and the portion that exists on the derivative chromosome) and only one copy of part of the other chromosome involved in the derivative chromosome.\"")
AnnotationAssertion(rdfs:label obo:GENO_0000343 "aneusomic chromosomal part")
SubClassOf(obo:GENO_0000343 obo:SO_0001059)
SubClassOf(obo:GENO_0000343 ObjectSomeValuesFrom(obo:GENO_0000207 obo:GENO_0000513))
SubClassOf(obo:GENO_0000343 ObjectSomeValuesFrom(obo:GENO_0000248 obo:SO_0000340))

# Class: obo:GENO_0000344 (gained aneusomic chromosomal segment)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000344 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000344 "A part of some non-homologous chromosome that has been gained as the result of an unbalanced translocation event.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000344 "duplicate partial aneuploid chromosomal element")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000344 "translocated duplicate chromosomal element")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000344 "translocated duplicate chromosomal segment")
AnnotationAssertion(rdfs:comment obo:GENO_0000344 "Such additions of translocated chromosomal parts confer a trisomic condition to the duplicated region of the chromsome, and are thus considered to be 'variant single locus complements' in virtue of an abnormal number of features at a particular genomic location, rather than abnormal sequence within the location.")
AnnotationAssertion(rdfs:label obo:GENO_0000344 "gained aneusomic chromosomal segment")
SubClassOf(obo:GENO_0000344 obo:GENO_0000343)

# Class: obo:GENO_0000345 (lost aneusomic chromosomal segment)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000345 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000345 "A deletion of a terminal portion of a chromosome resulting from an unbalanced translocation to another chromosome.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000345 "In our model, we consider this chromosomal region to be monosomic, and thus a variant single locus complement")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000345 "dropped partial anneuploid chromosomal element")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000345 "translocated absent chromosomal segment")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000345 "truncated chromosome terminus")
AnnotationAssertion(rdfs:comment obo:GENO_0000345 "This is not a deletion in the sense defined by the Sequence Ontology in that it is not the result of an 'excision' of nucleotides, but an unbalanced translocation event.  The allelic complement that results is comprised of the terminus or junction represented by this lost chromosomal segment, and the remaining normal segment in the homologous chromosome. The lost aneusommic chromosomal segment is typically accommpanied by a gained aneusomic chromosomal segment from another chromosome.

Loss of translocated chromosomal parts can confer a monosomic condition to a region of the chromsome. This results in a 'variant single locus complement' - in virtue of an abnormal number of features at a particular locus, rather than abnormal sequence within the locus.")
AnnotationAssertion(rdfs:label obo:GENO_0000345 "lost aneusomic chromosomal segment")
SubClassOf(obo:GENO_0000345 obo:GENO_0000343)
SubClassOf(obo:GENO_0000345 DataHasValue(obo:GENO_0000678 "0"^^xsd:integer))

# Class: obo:GENO_0000346 (aneusomic chromosome)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000346 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000346 "A complete chromosome that has been abnormally duplicated, or the absense of a chromosome that has been lost, typically as the result of a non-disjunction event or unbalanced translocation")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000346 "complete aneusomic chromosome")
AnnotationAssertion(rdfs:comment obo:GENO_0000346 "Large sequence features gained in a genome are considered to be sequence alterations (akin to insertions), including aneusomic chromosome segments gained through unbalanced translocation events, entrie aneusomic chromosomes gained through a non-disjunction event during replication, or extrachromosomal replicons that become part of the heritable gneme of a cell or organism.

Similarly, large sequence features lost from genome are akin to deletions and therefore also considered sequence alterations. This includes the loss of chromosomal segments through unbalanced translocation events, and the loss of entire chromosomes through a non-disjunction event during replication.")
AnnotationAssertion(rdfs:label obo:GENO_0000346 "aneusomic chromosome")
SubClassOf(obo:GENO_0000346 obo:SO_0000340)
SubClassOf(obo:GENO_0000346 obo:SO_0001059)
SubClassOf(obo:GENO_0000346 ObjectSomeValuesFrom(obo:GENO_0000207 obo:GENO_0000513))

# Class: obo:GENO_0000351 (biological process)

AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000351 "Stub class to serve as root of hierarchy for imports of biological processes from GO-BP.")
AnnotationAssertion(rdfs:label obo:GENO_0000351 "biological process")
SubClassOf(obo:GENO_0000351 obo:BFO_0000015)

# Class: obo:GENO_0000391 (disomic zygosity)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000391 "A zygosity quality inhering in a 'single locus complement' in a genome with a normal ploidy of two (i.e. two copies of autosomal chromosomes). Disomic zygosity terms describe the degree of similarity of the two sequence features that reside at a particular location across homozygous chromosomes (or the state of being the only feature at a given locus in the case of hemizygosity).")
AnnotationAssertion(rdfs:label obo:GENO_0000391 "disomic zygosity")
SubClassOf(obo:GENO_0000391 obo:GENO_0000133)

# Class: obo:GENO_0000392 (aneusomic zygosity)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000392 "A zygosity quality inhering in a 'single locus complement' in a genome with an abnormal ploidy at the location (i.e. an autosomal locus with one or three copies in a diploid genome).")
AnnotationAssertion(rdfs:label obo:GENO_0000392 "aneusomic zygosity")
SubClassOf(obo:GENO_0000392 obo:GENO_0000133)

# Class: obo:GENO_0000393 (trisomic homozygous)

AnnotationAssertion(rdfs:label obo:GENO_0000393 "trisomic homozygous")
SubClassOf(obo:GENO_0000393 obo:GENO_0000392)

# Class: obo:GENO_0000394 (trisomic heterozygous)

AnnotationAssertion(rdfs:label obo:GENO_0000394 "trisomic heterozygous")
SubClassOf(obo:GENO_0000394 obo:GENO_0000392)

# Class: obo:GENO_0000402 (compound heterozygous)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000402 "A heterozygous quality inhering in a single locus complement comprised of two different varaint alleles and no wild type locus. (e.g.fgf8a<ti282a>/fgf8a<x15>)")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000402 "trans-heterozygous")
AnnotationAssertion(rdfs:label obo:GENO_0000402 "compound heterozygous")
SubClassOf(obo:GENO_0000402 obo:GENO_0000135)

# Class: obo:GENO_0000415 (obsolete reagent sequence feature)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000415 "A sequence feature that references some biological macromolecule applied as a reagent in an experiment or technique (e.g. a morpholino expression plasmid, or oligonucleotide probe)")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000415 "replaced with SO:engineered_region")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000415 "extra-genomic sequence")
AnnotationAssertion(rdfs:label obo:GENO_0000415 "obsolete reagent sequence feature"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000415 "true"^^xsd:boolean)

# Class: obo:GENO_0000458 (simple heterozygous)

AnnotationAssertion(rdfs:comment obo:GENO_0000458 "a heterozygous quality inhering in a single locus complement comprised of one variant allele and one wild-type/reference allele (e.g.fgf8a<ti282a/+>)")
AnnotationAssertion(rdfs:label obo:GENO_0000458 "simple heterozygous")
SubClassOf(obo:GENO_0000458 obo:GENO_0000135)

# Class: obo:GENO_0000460 (transgene part)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000460 "A structurally or functionally defined component of a transgene (e.g. a promoter, a region coding for a fluorescent protein tag, etc)")
AnnotationAssertion(rdfs:label obo:GENO_0000460 "transgene part")
EquivalentClasses(obo:GENO_0000460 ObjectIntersectionOf(obo:GENO_0000666 ObjectSomeValuesFrom(obo:RO_0002525 obo:SO_0000902)))

# Class: obo:GENO_0000476 (variant)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000476 "An attribute inhering in a sequence feature that varies from some designated reference in virtue of alterations in its sequence or expression level")
AnnotationAssertion(rdfs:label obo:GENO_0000476 "variant"@en)
SubClassOf(obo:GENO_0000476 obo:GENO_0000773)

# Class: obo:GENO_0000477 (polymorphic)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000477 "An attribute inhereing in a sequence feature for which there is more than one version fixed in a population at some significant percentage (typically 1% or greater), where the locus is not considered to be either reference or a variant.")
AnnotationAssertion(rdfs:label obo:GENO_0000477 "polymorphic"@en)
SubClassOf(obo:GENO_0000477 obo:GENO_0000773)

# Class: obo:GENO_0000480 (mutant)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000480 "An attribute inhering in a feature bearing a sequence alteration that is present at very low levels in a given population (typically less than 1%), or that has been experimentally generated to alter the feature with respect to some reference sequence.")
AnnotationAssertion(rdfs:label obo:GENO_0000480 "mutant"@en)
SubClassOf(obo:GENO_0000480 obo:GENO_0000773)

# Class: obo:GENO_0000481 (genomic feature)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000481 "A sequence feature (continuous extent of biological sequence) that is of genomic origin (i.e. carries sequence from the genome of a cell or organism)")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000481 "This class was created largely as a modeling convenience to support organizing data for schema definitions.  We may consider obsoleting it if it ends up causing confusion or complicating classification of terms in the ontology.")
AnnotationAssertion(rdfs:comment obo:GENO_0000481 "1. A feature being 'of genomic origin' here means only that its sequence has been located to the genome of some organism by alignment with some reference genome. This is because the sequence was originally identified in, or artificially created to replicate, sequence from an organism's genome. 

2. The location of a genomic feature is defined by start and end coordinates based on alignment with a reference genome. Genomic features can span any size from a complete chromosome, to a chromosomal band or region, to a gene, to a single base pair or even junction between base pairs (this would be a sequence feature with an extent of zero). 

3. As sequence features, instances of genomic features are identified by both their inherent *sequence* and their *position* in a genome - as determined by an alignment with some reference sequence. Accordingly, the 'ATG' start codon in the coding DNA sequence of the human AKT gene and the 'ATG' start codon in the human SHH gene represent two distinct genomic features despite having he same sequence, in virtue of their different positions in the genome.")
AnnotationAssertion(rdfs:label obo:GENO_0000481 "genomic feature"@en)
EquivalentClasses(obo:GENO_0000481 ObjectIntersectionOf(obo:SO_0000110 ObjectSomeValuesFrom(obo:GENO_0000903 obo:GENO_0000902)))
SubClassOf(obo:GENO_0000481 ObjectSomeValuesFrom(obo:BFO_0000050 obo:SO_0001026))
SubClassOf(obo:GENO_0000481 ObjectSomeValuesFrom(obo:GENO_0000239 obo:GENO_0000960))
SubClassOf(obo:GENO_0000481 ObjectSomeValuesFrom(obo:RO_0002162 obo:OBI_0100026))

# Class: obo:GENO_0000482 (genetic material)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000482 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000482 "A nucleic acid molecule that contains one or more sequences serving as a template for gene expression in a biological system (ie a cell or virion).")
AnnotationAssertion(rdfs:comment obo:GENO_0000482 "This class is different from genomic material in that genomic material is necessarily heritable, while genetic material includes genomic material, as well as any additional nucleic acids that participate in gene expression resulting in a cellular or organismal phenotype.  So things like transiently transfected expression constructs would qualify as 'genetic material but not 'genomic material'.  Things like siRNAs and morpholinos affect gene expression indirectly, (ie are not templates for gene expression), and therefore do not qualify as genetic material.")
AnnotationAssertion(rdfs:label obo:GENO_0000482 "genetic material"@en)
SubClassOf(obo:GENO_0000482 obo:CHEBI_33696)

# Class: obo:GENO_0000491 (obsolete mutant allele)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000491 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000491 "An allele that is variant with respect to some wild-type allele, in virtue of its being very rare in a population (typically <1%), or being an experimentally-induced alteration that derives from a wild-type feature in a given strain.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000491 "Based on use of 'mutant' as described in PMID: 25741868 ACMG Guidelines")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000491 "Not required for any specific use case at this point so removed for simplicity. 
Formely asserted as allele and inferred as varaint allele. 
Eq class definition:
allele
 and (mutation or ('has subsequence' some mutation))")
AnnotationAssertion(rdfs:comment obo:GENO_0000491 "'Mutant' is typically contrasted with 'wild-type', where 'mutant' indicates a natural but very rare allele in a population (typically <1%), or an experimentally-induced variation that derives from a wild-type background locus for a given strain, which can be selected for in establishing a mutant line.")
AnnotationAssertion(rdfs:label obo:GENO_0000491 "obsolete mutant allele"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000491 "true"^^xsd:boolean)

# Class: obo:GENO_0000492 (mutation)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000492 "A sequence alteration that is very rare allele in a population (typically <1%), or an experimentally-induced variation that derives from a wild-type feature in a given strain.")
AnnotationAssertion(rdfs:label obo:GENO_0000492 "mutation"@en)
SubClassOf(obo:GENO_0000492 obo:SO_0001059)
SubClassOf(obo:GENO_0000492 ObjectSomeValuesFrom(obo:GENO_0000683 obo:GENO_0000501))

# Class: obo:GENO_0000494 (extrachromosomal replicon)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000494 "A genetic feature that is not part of the chromosomal genome of a cell or virion, but rather a stable and heritable element that is replilcated and passed on to progeny (e.g. a replicative plasmid or transposon)")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000494 "Consider replacing with SO_0001038 ! extrachromosomal_mobile_genetic_element")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000494 "episomal replicon")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000494 "Extrachromosomal replicons are replicated and passed on to descendents, and thus part of the heritable genome of a cell or organism. In cases where the presence of such a replicon is novel or aberrant (i.e. not included in the reference for that genome), the replicon is considered a 'sequence alteration'.")
AnnotationAssertion(rdfs:label obo:GENO_0000494 "extrachromosomal replicon"@en)
EquivalentClasses(obo:GENO_0000494 ObjectIntersectionOf(obo:GENO_0000481 ObjectComplementOf(ObjectSomeValuesFrom(obo:GENO_0000248 obo:SO_0000340)) ObjectSomeValuesFrom(obo:GENO_0000207 obo:GENO_0000139)))

# Class: obo:GENO_0000495 (expression construct)

AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000495 "expression construct feature")
AnnotationAssertion(rdfs:label obo:GENO_0000495 "expression construct"@en)
SubClassOf(obo:GENO_0000495 obo:GENO_0000856)

# Class: obo:GENO_0000497 (polymorphic allele)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000497 "An allele that is fixed in a population at some stable level, typically > 1%. Polymorphic alleles reside at loci where more than one version exists at some signifcant frequency in a population.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000497 "PMID: 25741868 ACMG Guidelines")
AnnotationAssertion(rdfs:comment obo:GENO_0000497 "Polymorphic alleles are contrasted with mutant alleles (extremely rare variants that exist in <1% of a population), and 'wild-type alleles' (extremenly common variants present in >99% of a population). Polymorphic alleles exist in equilibrium in a given population somewhere between these two extremes (i.e. >1% and <99%).")
AnnotationAssertion(rdfs:label obo:GENO_0000497 "polymorphic allele")
SubClassOf(obo:GENO_0000497 obo:GENO_0000512)

# Class: obo:GENO_0000498 (major polymorphic allele)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000498 "A polymorphic allele  that is present at the highest frequency relative to other polymorphic variants at the same genomic location.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000498 "major allele"@en)
AnnotationAssertion(rdfs:label obo:GENO_0000498 "major polymorphic allele")
SubClassOf(obo:GENO_0000498 obo:GENO_0000497)

# Class: obo:GENO_0000499 (minor polymorphic allele)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000499 "A polymorphic allele that is not present at the highest frequency among all fixed variants at the locus (i.e. not the major polymorphic allele at a given location).")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000499 "minor allele"@en)
AnnotationAssertion(rdfs:label obo:GENO_0000499 "minor polymorphic allele")
SubClassOf(obo:GENO_0000499 obo:GENO_0000497)

# Class: obo:GENO_0000500 (ancestral polymorphic allele)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000500 "A polymorphic allele that is determined from the sequence of a recent ancestor in a phylogentic tree.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000500 "ancestral allele"@en)
AnnotationAssertion(rdfs:label obo:GENO_0000500 "ancestral polymorphic allele")
SubClassOf(obo:GENO_0000500 obo:GENO_0000497)

# Class: obo:GENO_0000501 (wild-type allele)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000501 "An allele representing a highly common varaint (typically >99% in a population), that typically exhibits canonical function, and against which rare and/or non-functional mutant alleles are often compared.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000501 "wild-type allele")
AnnotationAssertion(rdfs:comment obo:GENO_0000501 "'Wild-type' is typically contrasted with 'mutant', where 'wild-type' indicates a highly prevalent allele in a population (typically >99%), and/or some prototypical allele in a background genome that serves as a basis for some experimental alteration to generate a mutant allele, which can be selected for in establishing a mutant strain.

The notion of wild-type alleles is more common in model organism databases, where specific mutations are generated against a wild-type reference feature. Wild-type alleles are typically but not always used as reference alleles in sequence comparison/analysis applications. More than one wild-type sequence can exist for a given feature, but typically only one allele is deemed wild-type iin the context of a single dataset or analysis.")
AnnotationAssertion(rdfs:label obo:GENO_0000501 "wild-type allele")
SubClassOf(obo:GENO_0000501 obo:GENO_0000512)
SubClassOf(obo:GENO_0000501 ObjectSomeValuesFrom(obo:GENO_0000683 obo:GENO_0000481))

# Class: obo:GENO_0000502 (wild-type gene)

AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000502 "wild-type gene allele"@en)
AnnotationAssertion(rdfs:comment obo:GENO_0000502 "A gene allele representing the most common varaint in a population (typically >99% frequency), that exhibits canonical function, and against which rare and/or non-functional mutant gene alleles are compared in characterizing the phenotypic consequences of genetic variation.")
AnnotationAssertion(rdfs:label obo:GENO_0000502 "wild-type gene")
SubClassOf(obo:GENO_0000502 obo:GENO_0000501)
SubClassOf(obo:GENO_0000502 obo:SO_0000704)

# Class: obo:GENO_0000504 (reagent targeted gene)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000504 "A gene altered in its expression level in the context of some experiment as a result of being targeted by gene-knockdown reagent(s) such as a morpholino or RNAi.")
AnnotationAssertion(rdfs:comment obo:GENO_0000504 "The identity of a given instance of a reagent-targeted gene is dependent on the experimental context of its knock-down - specifically what reagent was used and at what level.  For example, the wild-type shha zebrafish gene targeted in epxeriment 1 by morpholino1 annd in experiment 2 by morpholino 2 represent two distinct instances of a 'reagent-targeted gene', despite sharing the same sequence and position.")
AnnotationAssertion(rdfs:label obo:GENO_0000504 "reagent targeted gene"@en)
SubClassOf(obo:GENO_0000504 obo:GENO_0000529)
SubClassOf(obo:GENO_0000504 ObjectSomeValuesFrom(obo:GENO_0000231 obo:GENO_0000534))
SubClassOf(obo:GENO_0000504 ObjectSomeValuesFrom(obo:GENO_0000447 obo:GENO_0000533))

# Class: obo:GENO_0000506 (transiently-expressed transgene)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000506 "A transgene that is delivered as part of a DNA expression construct into a cell or organism in order to transiently express a specified product (i.e. it has not integrated into the host genome).")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000506 "experimentally-expressed transgene")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000506 "extrinsic transgene"@en)
AnnotationAssertion(rdfs:label obo:GENO_0000506 "transiently-expressed transgene")
SubClassOf(obo:GENO_0000506 obo:GENO_0000529)

# Class: obo:GENO_0000511 (wild-type)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000511 "An allele attribute describing a highly common variant (typically >99% in a population), that typically exhibits canonical function, and against which rare and/or non-functional mutant alleles are compared.")
AnnotationAssertion(rdfs:label obo:GENO_0000511 "wild-type"@en)
SubClassOf(obo:GENO_0000511 obo:GENO_0000773)

# Class: obo:GENO_0000512 (allele)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000512 "One of a set of sequence features known to exist at a particular genomic location.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000512 "A landsacpe review found mostly gene-centric definitions of 'allele' that represented a particular version of a gene, or variation within a gene sequence [1][2][3][4][5][6][6a].  But we also found 'allele' used to refer to other types and extents of variation - including single nucleotide polymorphisms, repeat regions, and copy number variations [7][8][9][10][11], where such variations don't neccessarily impact a gene.

To be maximally accommodating of how this term is used across research communities, GENO defines 'allele' broadly and allow alleles can span any locus or extent of sequence. While 'alleles' encountered in public datases typically overlap a gene, many do not. But GENO does define the 'gene allele' class as a subtype of 'allele' to refers more specifically to a specifc version of an entire gene.
	
[1] https://isogg.org/wiki/Allele (retrieved 2018-03-17)
[2] http://semanticscience.org/resource/allele (retrieved 2018-03-17)
[3] https://en.wikipedia.org/wiki/Allele (retrieved 2018-03-17)
[4] https://www.cancer.gov/publications/dictionaries/genetics-dictionary/def/allele (retrieved 2018-03-17)
[5] http://purl.obolibrary.org/obo/SO_0001023 (retrieved 2018-03-17)
[6] http://purl.obolibrary.org/obo/NCIT_C16277 (retrieved 2018-03-17)
[6a] https://www.ncbi.nlm.nih.gov/mesh/68000483
[7] https://www.snpedia.com/index.php/Allele (retrieved 2018-03-17)
[8]  https://en.wikipedia.org/wiki/Single-nucleotide_polymorphism (retrieved 2018-03-17)
[9] http://purl.obolibrary.org/obo/OGI_0000008 (retrieved 2018-03-17)
[10] http://purl.obolibrary.org/obo/OBI_0001352 (retrieved 2018-03-17)
[11] http://purl.phyloviz.net/ontology/typon#Allele (retrieved 2018-03-17)")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000512 "variable feature"@en)
AnnotationAssertion(rdfs:comment obo:GENO_0000512 "An allele is a seqeunce feature at a genomic location where variation occurs (i.e. where >1 different sequence is known to exist). An allele can span only the extent of sequence known to vary (e.g. a single base SNP, or short insertion), or it can span a larger extent that includes one or more variable features as proper parts (e.g. a 'gene allele' that spans the extent of an entire gene which contains several sequence alterations).

Alleles can carry 'reference' or 'variant' sequence - depending on whether the its 'state' matches that considered to be the reference at that location. Alleles whose state differs from the reference are called 'variant alleles', and those that match the reference are called 'reference alleles'. What is considered the 'reference' state at a particular location may vary, depending on the context/goal of a particular analysis. A 'sequence alteration' is a 'variant allele' that varies along its entire extent (i.e every position varies from that of some defined reference sequence).")
AnnotationAssertion(rdfs:label obo:GENO_0000512 "allele")
EquivalentClasses(obo:GENO_0000512 ObjectIntersectionOf(obo:GENO_0000481 ObjectSomeValuesFrom(obo:GENO_0000683 obo:GENO_0000481)))

# Class: obo:GENO_0000513 (aneusomic)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000513 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000513 "a sequence attribute of a chromosome or chromosomal region that has been abnormally duplicated or lost, as the result of a non-disjunction event or unbalanced translocation.")
AnnotationAssertion(rdfs:label obo:GENO_0000513 "aneusomic"@en)
SubClassOf(obo:GENO_0000513 obo:GENO_0000773)

# Class: obo:GENO_0000515 (variant gene allele)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000515 "An allele of a gene that contains some sequence alteration.")
AnnotationAssertion(rdfs:comment obo:GENO_0000515 "A gene allele is 'variant' in virtue of its containing a sequence alteration that varies from some reference gene standard.  But note that a gene allele that is variant in one context/dataset can be considered a reference in another context/dataset.")
AnnotationAssertion(rdfs:label obo:GENO_0000515 "variant gene allele")
EquivalentClasses(obo:GENO_0000515 ObjectIntersectionOf(obo:GENO_0000014 ObjectSomeValuesFrom(obo:GENO_0000683 obo:GENO_0000036)))
SubClassOf(obo:GENO_0000515 ObjectSomeValuesFrom(obo:GENO_0000382 obo:SO_0001059))
SubClassOf(obo:GENO_0000515 ObjectSomeValuesFrom(obo:GENO_0000641 obo:SO_0000704))

# Class: obo:GENO_0000516 (single locus complement)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000516 "The set of both shha gene alleles in a diiploid zebrafish genome, e.g. fgf8a<ti282a/+>.

The collection of the individual base-pairs present at the position 24126737 in both copies of chromosome 5 in a diploid human genome.")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000516 "A set representing the complement of all sequence features occupying a particular genomic location across all homologous chromosomes in the genome of a single organism.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000516 "TO DO: show a VCF representation of this example. Consider making 'allelic complement' the primary label.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000516 "allelic complement")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000516 "homologous allele complement")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000516 "single locus feature complement")
AnnotationAssertion(rdfs:comment obo:GENO_0000516 "A 'complement' refers to an exhaustive collection of *all* objects that make up some well-defined set. Such a complement may contain 0, 1, or more than one members. The notion of a complement is useful for defining many biologically-relevant sets of sequence features. Here, a 'single locus complement' is the set of all alleles at a specified location in a particular genome. This complement is typically a pair of two features in a diploid genome (with two copies of each chromosome). E.g. a gene pair, a QTL pair, a nucleotide pair for a SNP, or a pair of entire chromosomes.

The fact that we are counting how many copies of the same *sequence* exist in a genome, as opposed to how many of the same *feature*, is what sets  feature-level concepts like 'single locus complement'. apart from sequence-level concepts like 'copy number complement'. To illustrate the difference, consider a duplication event that creates a new copy of the human APOE gene on a different chromosome. This creates an entirely new sequence feature at a distinct locus from that of the original APOE gene.  The 'copy number complement' for sequence defined by the APOE gene locus would have a count of three, as this sequence is present three times in the genome.  But the 'single locus complement' at the APOE gene locus would still have a count of two - because the duplicated copy is at a different location in the genome, and therefore does not represent a copy of the APOE locus.")
AnnotationAssertion(rdfs:label obo:GENO_0000516 "single locus complement")
SubClassOf(obo:GENO_0000516 obo:GENO_0000660)

# Class: obo:GENO_0000524 (extrinsic genotype)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000524 "In an experiment where shha is targeted by MO1 and shhb is overexpressed from a transgenic expression construct, the extrinsic genotype captures the altered expression status of these two genes. A notation for representing such a genotype might describe this scenario as:

   shha<MO1-1ng/ul>; shhb<pFLAG-mmusShhb>

This notation parallels those used for more traditional 'intrinsic' genotypes, where the affected gene is presented with its alteration in angled brackets < >. In the extrinsic genotype shown here, the variation in shha is affected by a specific concentration of an shha-targeting morpholino (instead of a mutation in the shha gene). And the variation in shhb is affected by its overexpression from a pFLAG Shhb expression construct.")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000524 "A specification of the known state of gene expression across a genome, and how it varies from some baseline/reference state.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000524 "We acknowledge that this is not a 'genotype' in the traditional sense, but this terminological choice highlights similarities that play out in parallel modeling of intrinsic and extrinsic genotype partonomies, and parallel syntactic formats for labeling instances of these genotypes. 

Our rationale here is that what we care about from perspective of G2P associations is identifying genomic features that impact phenotype - where experimental approaches include permanent introduction of intrinsic modifications to genomic sequence, and transient introduction of extrinsic factors that modify expression of specific genes. As the former is described by the traditional notion of a genotype, it seems a rational leap to consider the latter akin to an 'extrinsic genotype' wherein the alterations are externally  applied rather than inherent to the genome. 

Finally, there is some precedent to thinking about such extrinsic modifications in terms of a genotype, in the EFO:0000513 ! genotype: \"The total sum of the genetic information of an organism that is known and relevant to the experiment being performed, including chromosomal, plasmid, viral or other genetic material which has been introduced into the organism either prior to or during the experiment.\"")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000524 "experimental genotype")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000524 "expression genotype")
AnnotationAssertion(rdfs:comment obo:GENO_0000524 "An extrinsic genotype describes variation in the 'expression level' of genes in a cell or organism, as mediated by transient, gene-specific experimental interventions such as RNAi, morpholinos, TALENS CRISPR, or construct overexpression. This concept is relevant primarily for model organisms and systems that are subjected to such interventions to determine how altered expression of specific genes may impact organismal or cellular phenotypes in the context of a particular experiment.

The 'extrinsic genotype' concept is contrasted with the more familiar notion of an 'intrinsic genotype', describing variation in the inherent genomic sequence (i.e. 'allelic state').  In G2P research, interventions affecting both genomic sequence and gene expression are commonly applied in order to assess the impact specific genomic features can have on phenotype and disease.  It is in this context that we chose to model 'extrinsic' alterations in expression as genotypes - to support parallel conceptualization and representation of these different types of genetic variation that inform the discovery of G2P associations.")
AnnotationAssertion(rdfs:label obo:GENO_0000524 "extrinsic genotype"@en)
SubClassOf(obo:GENO_0000524 obo:GENO_0000536)

# Class: obo:GENO_0000525 (effective genotype)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000525 "A genotype that describes the total intrinsic and extrinsic variation across a genome at the time of a phenotypic assessment (where 'intrinsic' refers to variation in genomic sequence, as mediated by sequence alterations, and 'extrinsic' refers to variation in gene expression, as mediated through transient gene-specific interventions such as gene knockdown reagents or overexpression constructs).")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000525 "Closest concept/definition we could find for this concept was for EFO:0000513 ! genotype: \"The total sum of the genetic information of an organism that is known and relevant to the experiment being performed, including chromosomal, plasmid, viral or other genetic material which has been introduced into the organism either prior to or during the experiment.\"")
AnnotationAssertion(rdfs:comment obo:GENO_0000525 "An effective genotype is meant to summarize all factors related to genes and their expression that influence an observed phenotype - including 'intrinsic' alterations in genomic sequence, and gene-specific 'extrinsic' alterations in expression transiently introduced at the time of the phenotypic assessment.")
AnnotationAssertion(rdfs:label obo:GENO_0000525 "effective genotype"@en)
SubClassOf(obo:GENO_0000525 obo:GENO_0000536)
SubClassOf(obo:GENO_0000525 ObjectSomeValuesFrom(obo:BFO_0000051 obo:GENO_0000524))
SubClassOf(obo:GENO_0000525 ObjectSomeValuesFrom(obo:BFO_0000051 obo:GENO_0000719))

# Class: obo:GENO_0000527 (reagent-targeted gene complement)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000527 "A set comprised of *all* reagent-targeted genes in a single genome in the context of a given experiment (e.g. the zebrafish shha and shhb genes in a zebrafish exposed to morpholinos targeting both of these genes).")
AnnotationAssertion(rdfs:comment obo:GENO_0000527 "A 'complement' refers to an exhaustive collection of *all* objects that make up some well-defined set. Such a complement may contain 0, 1, or more than one members. The notion of a complement is useful for defining many biologically-relevant sets of sequence features. For example, a 'reagent-targeted gene complement' is the set of all genes in a particular genome that are targeted by reagents in the context of a particular experiment.")
AnnotationAssertion(rdfs:label obo:GENO_0000527 "reagent-targeted gene complement"@en)
SubClassOf(obo:GENO_0000527 obo:GENO_0000715)
SubClassOf(obo:GENO_0000527 ObjectSomeValuesFrom(obo:RO_0002351 obo:GENO_0000504))

# Class: obo:GENO_0000528 (transiently-expressed transgene complement)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000528 "The set of all transgenes trransiently expressed in a biological system in the context of a given experiment.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000528 "experimental transgene complement"@en)
AnnotationAssertion(rdfs:label obo:GENO_0000528 "transiently-expressed transgene complement")
SubClassOf(obo:GENO_0000528 obo:GENO_0000715)
SubClassOf(obo:GENO_0000528 ObjectSomeValuesFrom(obo:GENO_0000382 obo:GENO_0000506))

# Class: obo:GENO_0000529 (expression-variant gene)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000529 "Consider wild-type zebrafish shha gene in the context of being targeted by morpholino1 vs  morpholino 2 in separate experiments. These shha genes share identical sequence and position, but represent distinct  instances of a 'expression-variant genes' because of their different external context. This is important because these qualified features could have distinct phenotypes associated with them (just as two different sequence variants of the same gene can have potentially different associated phenotypes).")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000529 "A gene altered in its expression level relative to some baseline of normal expression in the system under investigation (e.g. a cell line or model organism).")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000529 "See SO classes under 'silenced gene' (e.g. 'gene silenced by RNA interference'). These seem to represent the concept of a qualified feature as I define it here, in that they are defined by alterations extrinsic to the sequence and position of the gene itself.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000529 "expression allele")
AnnotationAssertion(rdfs:comment obo:GENO_0000529 "Expression-variant genes are altered in their expression level through some modification or intervention external to its sequence and position. These may include endogenous mechanisms (e.g. direct epigentic modification that impact expression level, or altered regulatory networks controlling gene expression), or experimental interventions (e.g. targeting by a gene-knockdown reagent, or being transiently expressed as part of a transgenic construct in a host cell or organism).

The identity of a given instance of a experssion-variant gene is dependent on how its level of expression is manipulated in a biological system (i.e. via targeting by gene-knockdown reagents, or being transiently overexpressed). So expression-variant genes have the additional identity criteria of a genetic context of its material bearer (external to its sequence and position) that impacts its level of expression in a biological system.")
AnnotationAssertion(rdfs:label obo:GENO_0000529 "expression-variant gene"@en)
SubClassOf(obo:GENO_0000529 obo:GENO_0000737)
SubClassOf(obo:GENO_0000529 ObjectSomeValuesFrom(obo:GENO_0000443 obo:SO_0000704))

# Class: obo:GENO_0000533 (gene knockdown reagent)

AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000533 "gene targeting reagent")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000533 "sequence targeting reagent")
AnnotationAssertion(rdfs:label obo:GENO_0000533 "gene knockdown reagent"@en)
SubClassOf(obo:GENO_0000533 obo:SO_0000804)

# Class: obo:GENO_0000534 (reagent-targeted gene subregion)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000534 "A region within a gene that is specifically targeted by a gene knockdown reagent, typically in virtue of bearing sequence complementary to the reagent.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000534 "targeted gene segment"@en)
AnnotationAssertion(rdfs:label obo:GENO_0000534 "reagent-targeted gene subregion")
SubClassOf(obo:GENO_0000534 obo:GENO_0000737)

# Class: obo:GENO_0000536 (genotype)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000536 "A specification of the genetic state of an organism, whether complete (defined over the whole genome) or incomplete (defined over a subset of the genome). Genotypes typically describe this genetic state as a diff between some variant component and a canonical reference.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000536 "As information artifacts, genotypes specify the state of a genome be defining a diff between some canonical reference and a variant or alternate sequence that replaces the corresponding portion of the reference. We can consider a genotype then as a collection of these reference and variant features, along with some rule for operating on them and resolve a final single sequence. This is valid ontologically because we commit only to sequence features being GDCs - which allows for their concretization in either biological or informational patterns. Accordingly, a particular gene allele, such as shh<tbx292>, can be part of a genome in a biological sense and part of a genotype in an informational sense. This idea underpins the 'genotype partonomy' at the core of the GENO model that decomposes a complete genotype into its more fundamental parts, including alleles and allele complements, as described in the comment above.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000536 "Core definition above adapted from the GA4GH VMC data model definition here: https://docs.google.com/document/d/12E8WbQlvfZWk5NrxwLytmympPby6vsv60RxCeD5wc1E/edit#heading=h.4e32jj4jtmsl (retrieved 2018-04-09). 
Note however that the VMC genotype concept likely is not intended to cover 'effective' and 'extrinsic' genotype concepts defined in GENO.")
AnnotationAssertion(rdfs:comment obo:GENO_0000536 "1. Scope of 'Genetic State': 
'Genetic state' is considered quite broadly in GENO to describe two general kinds of 'states'.  First, is traditional notion of 'allelic state' - defined as the complement of alleles present at a particular location or locations in a genome (i.e. across all homologous chromosomes containing this location). Here, a genotype can describe allelic state at a specific locus in a genome (an 'allelic genotype'), or describe the allelic state across the entire genome ('genomic genotype'). Second, this concept can also describe states of genomic features 'extrinsic' to their intrinsic sequence, such as the expression status of a gene as a result of being specifically targeted by experimental interventions such as RNAi, morpholinos, or CRISPRs.

2. Genotype Subtypes:
In GENO, we use the term 'intrinsic' for genotypes describing variation in genomic sequence, and 'extrinsic' for genotypes describing variation in gene expression (e.g. resulting from the targeted experimental knock-down or over-expression of endogenous genes).  We use the term 'effective genotype' to describe the total intrinsic and extrinsic variation in a cell or organism at the time a phenotypic assessment is performed. 

Two more precise conccepts are subsumed by the notion of an 'intrinsic genotype': (1) 'allelic genotypes', which specify allelic state at a single genomic location; and (2) 'genomic genotypes', which specify allelic state across an entire genome.  In both cases, allelic state is typically specified in terms of a differential between a reference and a set of 1 or more known variant features.

3. The Genotype Partonomy: 
'Genomic genotypes' describing sequence variation across an entire genome are 'decomposed' in GENO into a partonomy  of more granular levels of variation. These levels are defined to be meaningful to biologists in their attempts to relate genetic variation to phenotypic features. They include 'genomic variation complement' (GVC), 'variant single locus complement' (VSLC), 'allele', 'haplotype', 'sequence alteration', and 'genomic background' classes.  For example, the components of the zebrafish genotype \"fgf8a<ti282a/ti282a>; fgf3<t24149/+>[AB]\", described at  zfin.org/ZDB-FISH-150901-9362, include the following elements:

 - GVC: fgf8a<ti282a/ti282a>; fgf3<t24149/+> (total intrinsic variation in the genome)
 - Genomic Background: AB (the reference against which the GVC is variant)
 - VSLC1:  fgf8a<ti282a/ti282a> (homozygous complement of gene alleles at one known variant locus)
 - VSLC2:  fgf3<t24149/+> (heterozygous complement of gene alleles at another known variant locus)
 - Allele 1:  fgf8a<ti282a>   (variant version of the fgf8a gene, present in two copies)
 - Allele 2:  fgf3<t24149>    (variant version of the fgf3 gene, present in one copy)
 - Allele 3:   fgf3<+>    (wild-type version of the fgf3 gene, present in one copy)
 - Sequence Alteration1: <ti282a>  (the specific mutation within the fgf8a gene that makes it variant)
 - Sequence Alteration2: <t24149> (the specific mutation within the fgf3 gene that makes it variant)

A graphical representation of this decomposition that maps each element to a visual depiction of the portion of a genome it denotes can be found here: https://github.com/monarch-initiative/GENO-ontology/blob/develop/README.md

One reason that explicit representation of these levels is important is because it is at these levels that phenotypic features are annotated to genetic variations in different clinical and model organism databases For example, ZFIN typically annotates phenotypes to effective genotypes, MGI to intrinsic genotypes, Wormbase to variant alleles, and ClinVar to haplotypes and sequence alterations. The ability to decompose a genotype into representations at these levels allows us to \"propagate phenotypes\" up or down the partonomy (e.g. infer associations of phenotypes annotated to a genotype to its more granular levels of variation and the gene(s) affected). This helps to supporting integrated analysis of G2P data.")
AnnotationAssertion(rdfs:label obo:GENO_0000536 "genotype"@en)
SubClassOf(obo:GENO_0000536 obo:IAO_0000030)
SubClassOf(obo:GENO_0000536 ObjectSomeValuesFrom(obo:IAO_0000219 ObjectUnionOf(obo:GENO_0000660 obo:GENO_0000715)))

# Class: obo:GENO_0000575 (zebrafish phenotype)

AnnotationAssertion(rdfs:comment obo:GENO_0000575 "ZFIN do not annotate with a pre-composed phenotype ontology - all annotations compose phenotypes on-the-fly using a combination of PATO, ZFA, GO and other ontologies. So while there is no manually curated zebrafish phenotype ontology, the Upheno pipeline generates one automatically here: http://purl.obolibrary.org/obo/upheno/zp.owl
This ontology does not have a root 'phenotype' class, however, and so we generate our own in GENO as a stub placeholder for import of needed zebrafish phenotype classes.")
AnnotationAssertion(rdfs:label obo:GENO_0000575 "zebrafish phenotype")
SubClassOf(obo:GENO_0000575 obo:UPHENO_0001001)

# Class: obo:GENO_0000602 (homoplasmic)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000602 "an allelic state where a single allele exists at a particular location in the organellar genome (mitochondrial or plastid) of a cell/organism.")
AnnotationAssertion(rdfs:label obo:GENO_0000602 "homoplasmic"@en)
SubClassOf(obo:GENO_0000602 obo:GENO_0000918)

# Class: obo:GENO_0000603 (heteroplasmic)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000603 "an allelic state where more than one type of allele exists at a particular location in the organellar genome (mitochondrial or plastid) of a cell/organism.")
AnnotationAssertion(rdfs:label obo:GENO_0000603 "heteroplasmic"@en)
SubClassOf(obo:GENO_0000603 obo:GENO_0000918)

# Class: obo:GENO_0000604 (hemizygous X-linked)

AnnotationAssertion(rdfs:label obo:GENO_0000604 "hemizygous X-linked"@en)
SubClassOf(obo:GENO_0000604 obo:GENO_0000134)

# Class: obo:GENO_0000605 (hemizygous Y-linked)

AnnotationAssertion(rdfs:label obo:GENO_0000605 "hemizygous Y-linked"@en)
SubClassOf(obo:GENO_0000605 obo:GENO_0000134)

# Class: obo:GENO_0000606 (hemizygous insertion-linked)

AnnotationAssertion(rdfs:label obo:GENO_0000606 "hemizygous insertion-linked"@en)
SubClassOf(obo:GENO_0000606 obo:GENO_0000134)

# Class: obo:GENO_0000611 (genomic background)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000611 "A genomic genotype that specifies the baseline sequence of a genome from which a variant genome is derived (through the introduction of sequence alterations).")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000611 "Being a 'genomic background' implies that a variant genotype was derived from this background (which is the case for most model organism database genotypes/strains). This is a subtly different notion than being a 'reference genotype' , which can be any genotype that serves as a basis for comparison. But in a sense all background genotypes are by default reference genotypes, in that the derived variant genotype is compared against it.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000611 "background genotype")
AnnotationAssertion(rdfs:label obo:GENO_0000611 "genomic background"@en)
EquivalentClasses(obo:GENO_0000611 ObjectIntersectionOf(obo:GENO_0000899 ObjectSomeValuesFrom(obo:GENO_0000968 obo:GENO_0000152)))
SubClassOf(obo:GENO_0000611 ObjectSomeValuesFrom(obo:IAO_0000219 obo:GENO_0000010))

# Class: obo:GENO_0000614 (chromosomal region)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000614 "The descriptor 1p22.3 =  chromosome 1, short arm, region 2, band 2, sub-band 3.  This is read as \"one q two-two point three\", not \"one  q twenty-two point three\".")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000614 "An extended part of a chromosome representing a term of convenience in order to hierarchically organize morphologically defined chromosome features: chromosome > arm > region > band > sub-band.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000614 "New term request for SO.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000614 "http://ghr.nlm.nih.gov/handbook/howgeneswork/genelocation and http://people.rit.edu/rhrsbi/GeneticsPages/Handouts/ChromosomeNomenclature.pdf, both of which define the nomenclature for the banding hierarchy we use here:
chromosome > arm > region > band > sub-band

Note that an alternate nomenclature for this hierarchy is here (http://www.ncbi.nlm.nih.gov/Class/MLACourse/Original8Hour/Genetics/chrombanding.html):
chromosome > arm > band > sub-band > sub-sub-band")
AnnotationAssertion(rdfs:label obo:GENO_0000614 "chromosomal region"@en)
SubClassOf(obo:GENO_0000614 obo:SO_0000830)
SubClassOf(obo:GENO_0000614 ObjectSomeValuesFrom(obo:BFO_0000050 obo:SO_0000105))

# Class: obo:GENO_0000616 (chromosome sub-band)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000616 "The descriptor 1p22.3 =  chromosome 1, short arm, region 2, band 2, sub-band 3.  This is read as \"one q two-two point three\", not \"one  q twenty-two point three\".")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000616 "http://ghr.nlm.nih.gov/handbook/howgeneswork/genelocation and http://people.rit.edu/rhrsbi/GeneticsPages/Handouts/ChromosomeNomenclature.pdf, both of which define the nomenclature for the banding hierarchy we use here:
chromosome > arm > region > band > sub-band

Note that an alternate nomenclature for this hierarchy is here (http://www.ncbi.nlm.nih.gov/Class/MLACourse/Original8Hour/Genetics/chrombanding.html):
chromosome > arm > band > sub-band > sub-sub-band")
AnnotationAssertion(rdfs:label obo:GENO_0000616 "chromosome sub-band"@en)
SubClassOf(obo:GENO_0000616 obo:SO_0000830)
SubClassOf(obo:GENO_0000616 ObjectSomeValuesFrom(obo:BFO_0000050 obo:SO_0000341))
SubClassOf(obo:GENO_0000616 ObjectSomeValuesFrom(obo:GENO_0000207 obo:GENO_0000618))

# Class: obo:GENO_0000618 (chromosomal band intensity)

AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000618 "chromosomal band brightness")
AnnotationAssertion(rdfs:label obo:GENO_0000618 "chromosomal band intensity"@en)
SubClassOf(obo:GENO_0000618 obo:GENO_0000788)

# Class: obo:GENO_0000619 (gpos)

AnnotationAssertion(rdfs:label obo:GENO_0000619 "gpos"@en)
SubClassOf(obo:GENO_0000619 obo:GENO_0000618)

# Class: obo:GENO_0000620 (gneg)

AnnotationAssertion(rdfs:label obo:GENO_0000620 "gneg"@en)
SubClassOf(obo:GENO_0000620 obo:GENO_0000618)

# Class: obo:GENO_0000621 (gvar)

AnnotationAssertion(rdfs:label obo:GENO_0000621 "gvar"@en)
SubClassOf(obo:GENO_0000621 obo:GENO_0000618)

# Class: obo:GENO_0000622 (gpos100)

AnnotationAssertion(rdfs:label obo:GENO_0000622 "gpos100"@en)
SubClassOf(obo:GENO_0000622 obo:GENO_0000619)

# Class: obo:GENO_0000623 (gpos75)

AnnotationAssertion(rdfs:label obo:GENO_0000623 "gpos75"@en)
SubClassOf(obo:GENO_0000623 obo:GENO_0000619)

# Class: obo:GENO_0000624 (gpos50)

AnnotationAssertion(rdfs:label obo:GENO_0000624 "gpos50"@en)
SubClassOf(obo:GENO_0000624 obo:GENO_0000619)

# Class: obo:GENO_0000625 (gpos25)

AnnotationAssertion(rdfs:label obo:GENO_0000625 "gpos25"@en)
SubClassOf(obo:GENO_0000625 obo:GENO_0000619)

# Class: obo:GENO_0000628 (short chromosome arm)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000628 "A chromosome arm that is the shorter of the two arms of a given chromosome.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000628 "p-arm")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000628 "stalk")
AnnotationAssertion(rdfs:label obo:GENO_0000628 "short chromosome arm"@en)
SubClassOf(obo:GENO_0000628 obo:SO_0000105)

# Class: obo:GENO_0000629 (long chromosome arm)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000629 "A chromosome arm that is the longer of the two arms of a given chromosome.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000629 "q-arm")
AnnotationAssertion(rdfs:label obo:GENO_0000629 "long chromosome arm"@en)
SubClassOf(obo:GENO_0000629 obo:SO_0000105)

# Class: obo:GENO_0000632 (gpos66)

AnnotationAssertion(rdfs:label obo:GENO_0000632 "gpos66")
SubClassOf(obo:GENO_0000632 obo:GENO_0000619)

# Class: obo:GENO_0000633 (gpos33)

AnnotationAssertion(rdfs:label obo:GENO_0000633 "gpos33")
SubClassOf(obo:GENO_0000633 obo:GENO_0000619)

# Class: obo:GENO_0000637 (regulatory transgene region)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000637 "A transgene part whose sequence regulates the synthesis of a functional product, but which is not itself transcribed.")
AnnotationAssertion(rdfs:label obo:GENO_0000637 "regulatory transgene region"@en)
SubClassOf(obo:GENO_0000637 obo:SO_0005836)
SubClassOf(obo:GENO_0000637 ObjectSomeValuesFrom(obo:RO_0002525 obo:SO_0000902))

# Class: obo:GENO_0000638 (expressed transgene region)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000638 "A transgene part whose sequence is expressed in a gene product through transcription and/or translation.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000638 "coding transgene feature")
AnnotationAssertion(rdfs:label obo:GENO_0000638 "expressed transgene region"@en)
SubClassOf(obo:GENO_0000638 obo:GENO_0000460)
SubClassOf(obo:GENO_0000638 ObjectSomeValuesFrom(obo:RO_0002525 obo:SO_0000902))

# Class: obo:GENO_0000640 (reporter region)

AnnotationAssertion(rdfs:label obo:GENO_0000640 "reporter region"@en)
SubClassOf(obo:GENO_0000640 obo:GENO_0000638)

# Class: obo:GENO_0000642 (selectable marker transgene)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000642 "A transgene whose product is used as a selectable marker.")
AnnotationAssertion(rdfs:label obo:GENO_0000642 "selectable marker transgene"@en)
EquivalentClasses(obo:GENO_0000642 ObjectIntersectionOf(obo:SO_0000902 ObjectSomeValuesFrom(obo:GENO_0000207 obo:GENO_0000911)))
SubClassOf(obo:GENO_0000642 ObjectSomeValuesFrom(obo:GENO_0000207 obo:SO_0000783))

# Class: obo:GENO_0000644 (karyotype)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000644 "A genotype that describes what is known about variation in a genome at a gross structural level, in terms of the number and appearance of chromosomes in the nucleus of a eukaryotic cell.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000644 "Derived from http://en.wikipedia.org/wiki/Karyotype (accessed 2017-03-28)")
AnnotationAssertion(rdfs:comment obo:GENO_0000644 "Karyotypes describe structural variation across a genome at the level of chromosomal morphology and banding patterns detectable in stained chromosomal spreads. This coarser level does not capture more granular levels of variation commonly represented in other forms of genotypes (e.g. specific alleles and sequence alterations).   

A base karyotype representing a genome with no known structural variation can be as simple as '46XY', but karyotypes typically contains some gross variant component (such as a chromosome duplication or translocation).")
AnnotationAssertion(rdfs:label obo:GENO_0000644 "karyotype"@en)
SubClassOf(obo:GENO_0000644 obo:GENO_0000899)
SubClassOf(obo:GENO_0000644 ObjectSomeValuesFrom(obo:IAO_0000219 obo:SO_0001026))

# Class: obo:GENO_0000645 (genomic genotype (sex-qualified))

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000645 "A genomic genotype where the genomic background specifies a male or female sex chromosome complement.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000645 "This modeling approach enables creation separate genotype instances for data sources that report sex-specific phenotypes to ensure that sex-specific G2P differences are accurately described.  These sex specific genotypes can be linked to the broader intrinsic genotype that is shared by male and female mice of the same strain, to aggregate associated phenotypes at this level, and allow aggregation with G2P association data about the same strains from sources that distinguish sex-specific phenotypes (e.g. IMPC) and those that do not (e.g. MGI).

In the genotype partonomy, a sex qualified genotype has as part a sex-agnostic genotype. This allows for the propagation of phenotypes associated with a sex-qualified genotype to the intrinsic genotype.  Ontologically, this parthood is based on the fact that the background component of a sex-qualified genotype specifies the sex chromosomes while that of the sex-agnostic genotype does not. Thus, the sequence content of the sex-qualified genotype is a superset of that of the intrinsic genotype, with the latter being a proper part of the former.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000645 "intrinsic genotype (sex-specific)")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000645 "sex-qualified genotype")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000645 "sex-qualified intrinsic genotype")
AnnotationAssertion(rdfs:comment obo:GENO_0000645 "We distinguish the notion of a sex-agnostic intrinsic genotype, which does not specify whether the portion of the genome defining organismal sex is male or female, from the notion of a sex-qualified intrinsic genotype, which does.  Male and female mice that contain the same background and genetic variation complement will have the same 'sex-agnostic intrinsic genotype', despite their genomes varying in their sex-chromosome complement.  By contrast, these two mice would have different 'sex-qualified intrinsic genotypes', as this class takes background sex chromosome sequences into account in the identity criteria for its instances.

Conceptually, a sex-qualified phenotype represents a superset of sequence features relative to a sex-agnostic intirnsic genotype, in that if specifies the background sex-chromosome complement of the genome.")
AnnotationAssertion(rdfs:label obo:GENO_0000645 "genomic genotype (sex-qualified)"@en)
SubClassOf(obo:GENO_0000645 obo:GENO_0000899)
SubClassOf(obo:GENO_0000645 ObjectSomeValuesFrom(obo:GENO_0000650 obo:GENO_0000000))

# Class: obo:GENO_0000646 (male intrinsic genotype)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000646 "A genomic genotype here the genomic background specifies a male sex chromosome complement.")
AnnotationAssertion(rdfs:label obo:GENO_0000646 "male intrinsic genotype"@en)
SubClassOf(obo:GENO_0000646 obo:GENO_0000645)

# Class: obo:GENO_0000647 (female intrinsic genotype)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000647 "A genomic genotype here the genomic background specifies a female sex chromosome complement.")
AnnotationAssertion(rdfs:label obo:GENO_0000647 "female intrinsic genotype"@en)
SubClassOf(obo:GENO_0000647 obo:GENO_0000645)

# Class: obo:GENO_0000649 (unspecified genomic background)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000649 "A background genotype whose sequence or identity is not known or specified.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000649 "unspecified background genotype")
AnnotationAssertion(rdfs:label obo:GENO_0000649 "unspecified genomic background"@en)
SubClassOf(obo:GENO_0000649 obo:GENO_0000611)

# Class: obo:GENO_0000659 (sequence feature set)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000659 "1. The set of all alleles at a particular location in a genome (a 'single locus complement')  - e.g. {APOE-epsilon2 / APOE-epsilon4} at the APOE locus

2. The set of all alleles that comprise a haplotype - e.g. the SNPs {rs7412-T, rs429358-T} in the APOEɛ2 allele.

3. The set of all chromosomes in a genome - e.g. {human Chr1, 2, 3,  . . . 22, X, Y}")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000659 "A set of sequence features.")
AnnotationAssertion(rdfs:comment obo:GENO_0000659 "'Sets' are used to represent entities that are typically collections of more than one member. But we allow for sets that contain 0 members (an 'empty' set) or 1 member (a 'singleton' or 'unit' set), consistent with the concept of 'mathematical sets'. Sets may also include duplicates (i.e. contain more than one member representing the same feature).

The notion of a 'complement' is a special case of a set, where the members necessarily comprise an exhaustive collection of all objects that make up some well-defined set. It is useful for defining many biologically-relevant sets of sequence features. For example, a 'haplotype' is the set of all genetically-linked alleles on a single chromosomal strand at a defined location - e.g. the SNP alleles {rs7412-C, rs429358-C} comprise the haplotype defining the APOEɛ4 gene allele [1]. And a 'single locus complement' is the set of all alleles at a specified location in a particular genome  - e.g. the APOEɛ4 and APOEɛ4 gene alleles ([1], [2]) that make up the 'Gs270' APOE genotype [3].

[1] https://www.snpedia.com/index.php/APOE-%CE%B54
[2] https://www.snpedia.com/index.php/APOE-%CE%B52
[3] https://www.snpedia.com/index.php/Gs270")
AnnotationAssertion(rdfs:label obo:GENO_0000659 "sequence feature set"@en)
SubClassOf(obo:GENO_0000659 obo:GENO_0000701)
SubClassOf(obo:GENO_0000659 ObjectSomeValuesFrom(obo:RO_0002351 obo:SO_0000110))
SubClassOf(obo:GENO_0000659 DataSomeValuesFrom(obo:GENO_0000917 xsd:int))

# Class: obo:GENO_0000660 (genomic feature set)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000660 "A set of genomic features (i.e. sequence features that are of genomic origin).")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000660 "In some cases there may be zero or only one member of such a complement, which is why this class is not defened to necessarily have some 'genomic feature' as a member.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000660 "genomic locus complement")
AnnotationAssertion(rdfs:comment obo:GENO_0000660 "A genomic feature is any located sequence feature in the genome, from a single nucleotide to a gene into an entire chromosome. 'Sets' are used to represent entities that are typically collections of more than one member - e.g. the set of chromosomes that make up the human genome. But we allow for sets that contain 0 members (an 'empty' set) or 1 member (a 'singleton' or 'unit' set), consistent with the concept of 'mathematical sets'. For example, a 'single locus complement' at an X-linked locus in a XY male will consist of only one allele, as there is only one X-chromosome in the genome. Note also that sets may contain duplicates (i.e. more than one member representing the same feature). For example, a homozygous 'single locus complement' is a set comprised of two of the same feature.

The notion of a 'genomic feature set' differs from that of a 'genomic sequence set' in that we are counting how many copies of the same *sequence feature* exist in a genome, as opposed to how many of the same *sequence*. 'Genomic feature sets are useful for representing things like 'single locus complements', where members are sequence features whose identity is dependent on their location. By contrast, 'genomic sequence sets' are useful for describing things like 'copy number complements', which are concerned only with how many copies of a sequence exist in a genome, regardless of the location where these reside.")
AnnotationAssertion(rdfs:label obo:GENO_0000660 "genomic feature set"@en)
SubClassOf(obo:GENO_0000660 obo:GENO_0000659)
SubClassOf(obo:GENO_0000660 ObjectSomeValuesFrom(obo:RO_0002162 obo:OBI_0100026))
SubClassOf(obo:GENO_0000660 ObjectSomeValuesFrom(obo:RO_0002351 obo:GENO_0000481))

# Class: obo:GENO_0000666 (gene part)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000666 "A genomic feature that is part of a gene, and delineated by some functional or structural function or role it serves (e.g.a promoter element, coding region, etc).")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000666 "defined gene part")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000666 "SO:0000831 (gene member region)")
AnnotationAssertion(rdfs:label obo:GENO_0000666 "gene part")
EquivalentClasses(obo:GENO_0000666 ObjectIntersectionOf(obo:GENO_0000481 ObjectSomeValuesFrom(obo:RO_0002525 obo:GENO_0000014)))

# Class: obo:GENO_0000667 (reporter transgene)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000667 "A transgene that codes for a product used as a reporter of gene expression or activity.")
AnnotationAssertion(rdfs:label obo:GENO_0000667 "reporter transgene"@en)
EquivalentClasses(obo:GENO_0000667 ObjectIntersectionOf(obo:SO_0000902 ObjectSomeValuesFrom(obo:GENO_0000207 obo:GENO_0000910)))
SubClassOf(obo:GENO_0000667 ObjectSomeValuesFrom(obo:BFO_0000051 obo:GENO_0000640))
SubClassOf(obo:GENO_0000667 ObjectSomeValuesFrom(obo:GENO_0000207 obo:SO_0000783))

# Class: obo:GENO_0000680 (obsolete null feature)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000680 "A junction between bases, a deletion variant, a terminus at the end of a chromosome.")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000680 "A genomic feature that has an extent of zero.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000680 "Former logical def: 
'genomic feature'
 and (has_extent value 0)")
AnnotationAssertion(rdfs:label obo:GENO_0000680 "obsolete null feature"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000680 "true"^^xsd:boolean)

# Class: obo:GENO_0000681 (novel extrachromosomal replicon)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000681 "An extrachromosomal replicon that is variant in a genome in virtue of its being a novel addition to the genome - i.e. it is not present in the reference for the genome in which it is found.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000681 "aberrant extrachromosomal replicon")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000681 "exogenous extrachromosomal replicon")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000681 "transgenic extrachromosomal replicon"@en)
AnnotationAssertion(rdfs:comment obo:GENO_0000681 "Extrachromosomal replicons are replicated and passed on to descendents, and thus part of the heritable genome of a cell or organism. In cases where the presence of such a replicon is exogenous or aberrant (i.e. not included in the reference for that genome), the replicon is considered a 'sequence alteration'.")
AnnotationAssertion(rdfs:label obo:GENO_0000681 "novel extrachromosomal replicon")
SubClassOf(obo:GENO_0000681 obo:GENO_0000684)
SubClassOf(obo:GENO_0000681 ObjectComplementOf(ObjectSomeValuesFrom(obo:GENO_0000248 obo:SO_0000340)))
SubClassOf(obo:GENO_0000681 ObjectSomeValuesFrom(obo:GENO_0000207 obo:GENO_0000139))
SubClassOf(obo:GENO_0000681 ObjectSomeValuesFrom(obo:GENO_0000207 obo:GENO_0000685))

# Class: obo:GENO_0000684 (novel replicon)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000684 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000684 "A genomic feature that represents an entirely new replicon in the genome, e.g. an extrachromosomal replicon or an extra copy of a chromosome.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000684 "This class is defined so as to support classification of things like novel extrachromosomal replicons and aneusomic chromosomes as being variant alleles in a genome. These represent entirely new features in the genome - not variants of an existing feature.")
AnnotationAssertion(rdfs:comment obo:GENO_0000684 "Novel replicons are considered as an 'insertion' in a genome, and as such, qualify as types of sequence_alterations and variant alleles.  There is no pre-existing locus that it modifies, however, and thus it is not really an 'allele of' a named locus.  But conceptually, we still consider these to represent genetic variants and classify them as variant alleles.")
AnnotationAssertion(rdfs:label obo:GENO_0000684 "novel replicon"@en)
SubClassOf(obo:GENO_0000684 obo:SO_0001059)
SubClassOf(obo:GENO_0000684 ObjectSomeValuesFrom(obo:GENO_0000207 obo:GENO_0000685))

# Class: obo:GENO_0000685 (novel)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000685 "An attribute of a genomic feature that represents a feature not previously found in a given genome, e.g. an extrachromosomal replicon or aneusomic third copy of a chromosome.")
AnnotationAssertion(rdfs:label obo:GENO_0000685 "novel"@en)
SubClassOf(obo:GENO_0000685 obo:GENO_0000773)

# Class: obo:GENO_0000688 (terminus)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000688 "A sequence feature representing the end of a sequence that is bounded only on one side (e.g. at the end of an chromosome or oligonucleotide).")
AnnotationAssertion(rdfs:label obo:GENO_0000688 "terminus"@en)
SubClassOf(obo:GENO_0000688 obo:SO_0000110)

# Class: obo:GENO_0000701 (sequence feature or set)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000701 "A sequence feature or a set of such features.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000701 "sequence feature or collection")
AnnotationAssertion(rdfs:comment obo:GENO_0000701 "GENO defines three levels of sequence-related artifacts, which are distinguished by their identity criteria.
1. 'Biological sequence' identity is dependent only on the ordering of units that comprise the sequence.
2. 'Sequence feature' identity is dependent on its sequence and the genomic position if the sequence (aligns with definition of 'sequence feature' in the Sequence Ontology).
3. 'Qualified sequence feature' identity is additionally dependent on some aspect of the physical context of the genetic material bearing the feature, extrinsic to its sequence and its genomic position.  For example, its being targeted by gene knockdown reagents, its being transgenically expressed in a foreign cell from a recombinant expression construct, its having been epigenetically modified in a way that alters its expression level or pattern, or its being located in a specific cellular or anatomical location.")
AnnotationAssertion(rdfs:label obo:GENO_0000701 "sequence feature or set"@en)
EquivalentClasses(obo:GENO_0000701 ObjectUnionOf(obo:GENO_0000701 obo:SO_0000110))
SubClassOf(obo:GENO_0000701 obo:BFO_0000031)

# Class: obo:GENO_0000702 (biological sequence)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000702 "A linear ordering of units representing monomers of a biological macromolecule (e.g. nucleotides in DNA and RNA, amino acids in polypeptides).")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000702 "GENO defines three levels of sequence-related artifacts, which are distinguished by their identity criteria.
1. 'Biological sequence' identity is dependent only on the ordering of units that comprise the sequence.
2. 'Sequence feature' identity is dependent on its sequence and the genomic location of the sequence (this is consistent with the definition of 'sequence feature' in the Sequence Ontology).
3. 'Qualified sequence feature' identity is additionally dependent on some aspect of the physical context of the genetic material in which the feature is concretized. This third criteria is extrinsic to its sequence and its genomic location. For example, the feature's physical concretization being targeted by a gene knockdown reagent in a cell (e.g. the zebrafish Shha gene as targeted by the morpholino 'Shha-MO1'), or its being transiently expressed from a recombinant expression construct (e.g. the human SHH gene as expressed in a  mouse Shh knock-out cell line), or its having been epigenetically modified in a way that alters its expression level or pattern (e.g. the human SHH gene with a specific methylation pattern).")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000702 "biomacromolecular sequence")
AnnotationAssertion(Annotation(obo:IAO_0000116 "In the VMC model, the notion of a GENO:biological sequence is called the 'state' of an allele.") obo:IAO_0000118 obo:GENO_0000702 "state")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000702 "VMC:State")
AnnotationAssertion(rdfs:comment obo:GENO_0000702 "'Sequences' differ from 'sequence features' in that instances are distinguished only by their inherent ordering of units, and not by any positional aspect related to alignment with some reference sequence. Accordingly, the 'ATG' translational start codon of the human AKT gene is the same *sequence* as the 'ATG' start codon of the human SHH gene, but these represent two distinct *sequence features* in virtue of their different positions in the genome.")
AnnotationAssertion(rdfs:label obo:GENO_0000702 "biological sequence"@en)
SubClassOf(obo:GENO_0000702 obo:GENO_0000921)
SubClassOf(Annotation(obo:GENO_0000834 "true"^^xsd:boolean) obo:GENO_0000702 DataSomeValuesFrom(obo:GENO_0000896 xsd:string))
DisjointClasses(obo:GENO_0000702 obo:GENO_0000815)
DisjointClasses(obo:GENO_0000702 obo:SO_0000110)

# Class: obo:GENO_0000713 (qualified sequence feature or collection)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000713 "A sequence feature (or collection of features) whose identity is dependent on the context or state of its material bearer (in addition to its sequence an position).  This context/state describes factors external to its inherent sequence and position that can influences its expression, such as being targeted by gene-knockdown reagents, or an epigenetic modification.")
AnnotationAssertion(rdfs:label obo:GENO_0000713 "qualified sequence feature or collection"@en)
SubClassOf(obo:GENO_0000713 obo:BFO_0000031)

# Class: obo:GENO_0000714 (qualified genomic feature)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000714 "Consider wild-type zebrafish shha gene in the context of being targeted by morpholino MO-1 vs morpholino MO-2 in separate experiments. These shha genes share identical sequence and position, but represent distinct instances of a 'qualified sequence feature' because of their different external contexts. This is important because these qualified features could have distinct phenotypes associated with them (just as two different sequence variants (alleles) of the same gene can have potentially different associated phenotypes).")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000714 "A qualified sequence feature that carries sequence derived from the genome of a cell or organism.")
AnnotationAssertion(rdfs:label obo:GENO_0000714 "qualified genomic feature"@en)
SubClassOf(obo:GENO_0000714 obo:GENO_0000919)
SubClassOf(Annotation(obo:GENO_0000834 "true"^^xsd:boolean) Annotation(rdfs:comment "This axiom is an initial attempt to formalize the identity criteria of an extrinnsic context that separates qualified sequence features from sequence features (i.e. the context of its material bearer).  As we further develop our efforts here this will get refined and more precise.") obo:GENO_0000714 ObjectSomeValuesFrom(obo:GENO_0000580 owl:Thing))
SubClassOf(Annotation(obo:GENO_0000834 "true"^^xsd:boolean) Annotation(rdfs:comment "Formalizes one identity criteria of the sequence feature component of a qualified sequence feature (which itself is identified by its sequence and its genomic position).") obo:GENO_0000714 ObjectSomeValuesFrom(obo:GENO_0000726 obo:GENO_0000481))
SubClassOf(obo:GENO_0000714 ObjectSomeValuesFrom(obo:RO_0002162 obo:OBI_0100026))

# Class: obo:GENO_0000715 (qualified genomic feature set)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000715 "A set of qualified sequence features that carry genomic sequence.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000715 "Because there are cases there may be zero or only one member of such a set, this class is not asserted to necessarily have some 'qualified genomic feature' as a member.")
AnnotationAssertion(rdfs:comment obo:GENO_0000715 "A 'complement' refers to an exhaustive collection of all objects that make up some well-defined set. This notion is useful for defining biologically-relevant sets of sequence features. For example, a haplotype is defined as the set of all genetically-linked alleles on a single chromosomal strand at a defined location - e.g. the SNP alleles {rs7412-C, rs429358-C} comprise the haplotype defining the APOEɛ4 gene allele.

A complements may contain 0, 1, or more than one members. For example, the complement of alleles at a defined locus across homologous chromosomes in an individual's genome will consist of two members for autosomal locations, and one member for non-homologous locations on the X and Y chromosome.")
AnnotationAssertion(rdfs:label obo:GENO_0000715 "qualified genomic feature set"@en)
SubClassOf(obo:GENO_0000715 obo:GENO_0000920)
SubClassOf(obo:GENO_0000715 ObjectSomeValuesFrom(obo:GENO_0000726 obo:GENO_0000660))
SubClassOf(obo:GENO_0000715 ObjectSomeValuesFrom(obo:RO_0002162 obo:OBI_0100026))
SubClassOf(obo:GENO_0000715 ObjectSomeValuesFrom(obo:RO_0002351 obo:GENO_0000714))

# Class: obo:GENO_0000719 (intrinsic genotype)

AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000719 "Genotype vs Genome in GENO: An (intrinsic) genotype is an information artifact representing an indirect syntax for specifying a genome sequence.  This syntax has reference and variant components -  a 'background genotype' and 'genomic variation complement' - that must be operated on to resolve a specifie genome sequence.  Specifically, the genome sequence is resolved by substituting all sequences specified by the 'genomic variation complement' for the corresponding sequences in the 'reference genome'.  So, while the total sequence content represented in a genotype may be greater than that in a genome, the intended resolution of these sequences is to arrive at a single genome sequence. It is this end-point that we consider when holding that a genotype 'specifies' a genome.")
AnnotationAssertion(rdfs:comment obo:GENO_0000719 "1. A genomic genotype is a short-hand specification of a genome that uses a representational syntax comprised of information about a reference genome ('genomic background'), and all specific variants from this reference (the 'genomic variation complement').  Conceptually, this variant genome sequence can be resolved by substituting all sequences specified by the 'genomic variation complement' for the corresponding sequences in the reference  'genomic background' sequence.

2. 'Heritable' genomic sequence is that which is passed on to subsequent generations of cells/organisms, and includes all chromosomal sequences, the mitochondrial genome, and any transmissable extrachromosomal replicons.")
AnnotationAssertion(rdfs:label obo:GENO_0000719 "intrinsic genotype"@en)
SubClassOf(obo:GENO_0000719 obo:GENO_0000536)
SubClassOf(obo:GENO_0000719 ObjectSomeValuesFrom(obo:IAO_0000219 ObjectUnionOf(obo:GENO_0000516 obo:SO_0001026)))

# Class: obo:GENO_0000720 (DNA sequence)

AnnotationAssertion(rdfs:label obo:GENO_0000720 "DNA sequence"@en)
EquivalentClasses(obo:GENO_0000720 ObjectIntersectionOf(obo:GENO_0000702 ObjectSomeValuesFrom(obo:GENO_0000783 obo:GENO_0000780) ObjectAllValuesFrom(obo:GENO_0000783 obo:GENO_0000780)))

# Class: obo:GENO_0000721 (RNA sequence)

AnnotationAssertion(rdfs:label obo:GENO_0000721 "RNA sequence"@en)
EquivalentClasses(obo:GENO_0000721 ObjectIntersectionOf(obo:GENO_0000702 ObjectSomeValuesFrom(obo:GENO_0000783 obo:GENO_0000781) ObjectAllValuesFrom(obo:GENO_0000783 obo:GENO_0000781)))

# Class: obo:GENO_0000722 (amino acid sequence)

AnnotationAssertion(rdfs:label obo:GENO_0000722 "amino acid sequence"@en)
EquivalentClasses(obo:GENO_0000722 ObjectIntersectionOf(obo:GENO_0000702 ObjectSomeValuesFrom(obo:GENO_0000783 obo:GENO_0000782) ObjectAllValuesFrom(obo:GENO_0000783 obo:GENO_0000782)))

# Class: obo:GENO_0000724 (obsolete biological sequence or collection)

AnnotationAssertion(rdfs:label obo:GENO_0000724 "obsolete biological sequence or collection"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000724 "true"^^xsd:boolean)

# Class: obo:GENO_0000725 (obsolete biological sequence collection)

AnnotationAssertion(rdfs:label obo:GENO_0000725 "obsolete biological sequence collection"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000725 "true"^^xsd:boolean)

# Class: obo:GENO_0000736 (location-qualified sequence feature)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000736 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000736 "A sequence feature whose identity is additionally dependent on  the cellular or anatomical location of the genetic material bearing the feature.")
AnnotationAssertion(rdfs:comment obo:GENO_0000736 "As a qualified sequence feature, the BRCA1c.5096G>A variant as materialized in a somatic breast epithelial cell could be distinguished as a separate entity from a BRCA1c.5096G>A variant in a different cell type or location (e.g. germline BRCA1 varaint in a sperm cell).")
AnnotationAssertion(rdfs:label obo:GENO_0000736 "location-qualified sequence feature"@en)
SubClassOf(obo:GENO_0000736 obo:GENO_0000714)

# Class: obo:GENO_0000737 (expression-qualified sequence feature)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000737 "A sequence feature whose identity is additionally dependent on factors specifically influencing its level of expression in the context of a biological system (e.g. being targeted by gene-knockdown reagents, or driven from exogneous expression system like recombinant construct)")
AnnotationAssertion(rdfs:label obo:GENO_0000737 "expression-qualified sequence feature"@en)
SubClassOf(obo:GENO_0000737 obo:GENO_0000714)

# Class: obo:GENO_0000768 (obsolete genomic position)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000768 "A sequence feature position based on a genomic coordinate system, where the position specifies start and end coordinates based on its alignment with some reference genomic sequence.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000768 "This 'genomic position' concept differs from the faldo:Position concecpt in that the former describes the start AND end points/coordinates of a feature, while the latter describes a single point/coordinate at the beginning OR end of a feature.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000768 "genomic coordinates"@en)
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000768 "remodeling notion of sequence feature position around the idea of a 'genomic locus'")
AnnotationAssertion(rdfs:label obo:GENO_0000768 "obsolete genomic position"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000768 "true"^^xsd:boolean)

# Class: obo:GENO_0000770 (phenotypic inheritance process)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000770 obo:GENO_0000484)
AnnotationAssertion(rdfs:label obo:GENO_0000770 "phenotypic inheritance process"@en)
SubClassOf(obo:GENO_0000770 obo:GENO_0000351)

# Class: obo:GENO_0000772 (obsolete unspecified)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000772 "A sequence attribute inhering in a feature whose identity is not specified.")
AnnotationAssertion(rdfs:label obo:GENO_0000772 "obsolete unspecified"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000772 "true"^^xsd:boolean)

# Class: obo:GENO_0000773 (variation attribute)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000773 "An attribute describing a type of variation inhering in a sequence feature or collection.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000773 "allele attribute")
AnnotationAssertion(rdfs:label obo:GENO_0000773 "variation attribute"@en)
SubClassOf(obo:GENO_0000773 obo:GENO_0000788)

# Class: obo:GENO_0000777 (variant genomic genotype)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000777 "An intrinsic genotype that specifies variation from a defined reference genome.")
AnnotationAssertion(rdfs:label obo:GENO_0000777 "variant genomic genotype"@en)
EquivalentClasses(obo:GENO_0000777 ObjectIntersectionOf(obo:GENO_0000899 ObjectSomeValuesFrom(obo:IAO_0000219 obo:GENO_0000033)))

# Class: obo:GENO_0000778 (obsolete sequence information entity)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000778 "An information entity that is intented to represent some biological sequence, sequence feature, qualified sequence feature, or a collection of one or more of these entities.")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000778 "eliminating classes that are not necessary or add uneeded complexity.")
AnnotationAssertion(rdfs:label obo:GENO_0000778 "obsolete sequence information entity"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000778 "true"^^xsd:boolean)

# Class: obo:GENO_0000779 (biological sequence unit)

AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000779 "biological sequence residue")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000779 "monomeric residue")
AnnotationAssertion(rdfs:label obo:GENO_0000779 "biological sequence unit"@en)
EquivalentClasses(obo:GENO_0000779 ObjectIntersectionOf(obo:GENO_0000702 DataHasValue(obo:GENO_0000678 "1"^^xsd:integer)))

# Class: obo:GENO_0000780 (DNA residue)

AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000780 "deoxyribonucleic acid residue")
AnnotationAssertion(rdfs:label obo:GENO_0000780 "DNA residue"@en)
SubClassOf(obo:GENO_0000780 obo:GENO_0000779)

# Class: obo:GENO_0000781 (RNA residue)

AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000781 "ribonucleic acid residue")
AnnotationAssertion(rdfs:label obo:GENO_0000781 "RNA residue"@en)
SubClassOf(obo:GENO_0000781 obo:GENO_0000779)

# Class: obo:GENO_0000782 (amino acid residue)

AnnotationAssertion(rdfs:label obo:GENO_0000782 "amino acid residue"@en)
SubClassOf(obo:GENO_0000782 obo:GENO_0000779)

# Class: obo:GENO_0000788 (sequence feature attribute)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000788 "An attribute, quality, or state of a sequence feature or collection.")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000788 "http://purl.obolibrary.org/obo/SO_0000400")
AnnotationAssertion(rdfs:comment obo:GENO_0000788 "Sequence feature attributes can be 'intrinsic' - reflecting feature-level characteristics that depend only on the sequence, location, or genomic context of a feature or collection, or 'extrinsic' - reflecting characteristics of the physical molecule in which the feature is concretized (e.g. its cellular context, source of origin, physical appearance, etc.). Intrinsic attributes include things like allelic state, allelic phase.  Extrinsic attributes include things like its cellular distribution and chromosomal band intensity.")
AnnotationAssertion(rdfs:label obo:GENO_0000788 "sequence feature attribute")
SubClassOf(obo:GENO_0000788 obo:BFO_0000020)

# Class: obo:GENO_0000815 (sequence feature location)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000815 "The location of a sequence feature as defined by its start and end position on some reference coordinate system.")
AnnotationAssertion(rdfs:comment obo:GENO_0000815 "1. A sequence feature location is defined by its begin and end coordinates on a reference sequence, but it is not identified by a particular sequence that may reside there. The same location, as defined on a particular reference, may be occupied by different sequences in the genome of organism 1 vs that of organism 2 (e.g. if a SNV exists within this location in only one of the organisms).

2. The notion of a sequence feature location in the realm of biological sequences is analogous to a BFO:spatiotemporal region in the realm of physical entities. A spatiotemporal region can be 'occupied by' physical objects, while a genomic location is 'occupied by' sequence features. Just as a spatiotemporal region is distinct from an object that occupies it, so too a genomic location is distinct from a sequence feature that occupies it. As a more concrete example, consider the distinction between a street address and the building that occupies it as analogous to the relationship between a genomic locus and the sequence feature that resides there.")
AnnotationAssertion(rdfs:label obo:GENO_0000815 "sequence feature location"@en)
SubClassOf(obo:GENO_0000815 obo:BFO_0000031)
DisjointClasses(obo:GENO_0000815 obo:SO_0000110)

# Class: obo:GENO_0000818 (modification-qualified sequence feature)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000818 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000818 "A sequence feature whose identity is additionally dependent on a chemical modification made to the genetic material bearing the feature (e.g. binding of transcriptional regulators, or epigenetic modifications including direct DNA methylation, or modification of histones associated with a feature)")
AnnotationAssertion(rdfs:label obo:GENO_0000818 "modification-qualified sequence feature"@en)
SubClassOf(obo:GENO_0000818 obo:GENO_0000714)

# Class: obo:GENO_0000823 (allelic genotype)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000823 "1. The zebrafish \"fgf8a<ti282a>/fgf8a<+>\" allelic genotype describes the combination of gene alleles present at a specific gene locus (the fgf8a locus -  which here has a heterozygous state).

2. The human allelic genotypes in the VCF records describes below describe the set of SNPs present at specific positions on Chromosome 20 in the human genome. The first record describes a heterozygouse C/T allelic genotype at Chr20:2300608, and the second describes a homozygous G/G allelic genotype at Chr20:2301308.

   ##fileformat=VCFv4.2
   ##FORMAT=<ID=GT, Description=\"Genotype, 0=REF, 1=ALT\">
   #CHROM      POS       REF  ALT   FILTER  FORMAT   SAMP001
        20         2300608    C      T      PASS        GT	         0/1	
        20         2301308    T      G      PASS        GT	         1/1
   (derived from https://faculty.washington.edu/browning/beagle/intro-to-vcf.html)

3. Some allelic genotype formats encode the genotype as a single string - e.g.  \"GRCh38 Chr12:258635(A;T)\" describes a heterozygous A/T allelic genotype of SNPs present at a specific position 258635 on human chromosome 12.")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000823 "A genotype that specifies the 'allelic state' at a particular location in the genome - i.e. the set of alleles present at this locus across all homologous chromosomes.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000823 "single locus genotype")
AnnotationAssertion(rdfs:comment obo:GENO_0000823 "An 'allelic genotype' describes the set of alleles present at a particular location in the genome. This use of the term 'genotype' reflects its use in clinical genetics where variation has historically been assessed at a specific locus, and a genotype describes the allelic state at that particular location.

This contrasts to the use of the term 'genotype in model orgnaism communities where it commonly describes the allelic state at all loci in a genome known to vary from an established reference or background.")
AnnotationAssertion(rdfs:label obo:GENO_0000823 "allelic genotype"@en)
EquivalentClasses(obo:GENO_0000823 ObjectIntersectionOf(obo:GENO_0000719 ObjectSomeValuesFrom(obo:IAO_0000219 obo:GENO_0000516)))

# Class: obo:GENO_0000833 (genotype-phenotype association)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000833 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000833 "Exploratory class looking at creating more specific subtypes of associatiosn, and defining identity criteria for each.")
AnnotationAssertion(rdfs:label obo:GENO_0000833 "genotype-phenotype association"@en)
SubClassOf(obo:GENO_0000833 <http://purl.org/oban/association>)
SubClassOf(Annotation(obo:GENO_0000834 "true"^^xsd:boolean) obo:GENO_0000833 ObjectSomeValuesFrom(obo:GENO_0000580 obo:ENVO_01000254))
SubClassOf(Annotation(obo:GENO_0000834 "true"^^xsd:boolean) obo:GENO_0000833 ObjectSomeValuesFrom(obo:GENO_0000580 ObjectIntersectionOf(obo:GO_0032502 ObjectIntersectionOf(ObjectSomeValuesFrom(obo:RO_0002091 obo:UBERON_0000105) ObjectSomeValuesFrom(obo:RO_0002093 obo:UBERON_0000105)))))
SubClassOf(Annotation(obo:GENO_0000834 "true"^^xsd:boolean) obo:GENO_0000833 ObjectSomeValuesFrom(<http://purl.org/oban/association_has_object> obo:UPHENO_0001001))
SubClassOf(Annotation(obo:GENO_0000834 "true"^^xsd:boolean) obo:GENO_0000833 ObjectSomeValuesFrom(<http://purl.org/oban/association_has_subject> ObjectUnionOf(obo:GENO_0000536 ObjectSomeValuesFrom(obo:BFO_0000050 obo:GENO_0000536))))

# Class: obo:GENO_0000839 (knockdown reagent targeted gene complement)

AnnotationAssertion(rdfs:label obo:GENO_0000839 "knockdown reagent targeted gene complement"@en)
SubClassOf(obo:GENO_0000839 obo:GENO_0000527)
SubClassOf(obo:GENO_0000839 ObjectSomeValuesFrom(obo:GENO_0000382 obo:GENO_0000504))

# Class: obo:GENO_0000848 (obsolete coding sequence alteration)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000848 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000848 "A sequence alteration within the coding sequence of a gene.")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000848 "Not required at this poitn, so marked exploratory and obsoleted.  
Asserted under sequence_alteration.")
AnnotationAssertion(rdfs:label obo:GENO_0000848 "obsolete coding sequence alteration"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000848 "true"^^xsd:boolean)

# Class: obo:GENO_0000850 (P-element construct)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000850 "A construct that contains a mobile P-element, holding sequences to be delivered to a target cell or genome.")
AnnotationAssertion(rdfs:label obo:GENO_0000850 "P-element construct"@en)
SubClassOf(obo:GENO_0000850 obo:GENO_0000856)

# Class: obo:GENO_0000856 (engineered genetic construct)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000856 "An engineered region that is used to transfer foreign genetic material into a host cell.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000856 "engineered_genetic_vector")
AnnotationAssertion(rdfs:comment obo:GENO_0000856 "Constructs can be engineered to carry inserts of DNA from external sources, for purposes of cloning and propagation or gene expression in host cells.  

Constructs are typically packaged as part  of delivery systems such as plasmids or viral vectors.")
AnnotationAssertion(rdfs:label obo:GENO_0000856 "engineered genetic construct"@en)
SubClassOf(obo:GENO_0000856 obo:SO_0000804)

# Class: obo:GENO_0000861 (extra-chromosomal transgene)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000861 "A transgene that is not chromosomally integrated in the host genome, but instead exists as part of an extra-chromosomal construct.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000861 "non-integrated transgene")
AnnotationAssertion(rdfs:label obo:GENO_0000861 "extra-chromosomal transgene"@en)
SubClassOf(obo:GENO_0000861 obo:SO_0000902)

# Class: obo:GENO_0000870 (obsolete sequence feature collection)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000870 "A collection of more than one sequence feature.")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000870 "http://purl.obolibrary.org/obo/SO_0001260 ! sequence_collection")
AnnotationAssertion(rdfs:label obo:GENO_0000870 "obsolete sequence feature collection"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000870 "true"^^xsd:boolean)

# Class: obo:GENO_0000871 (haplotype)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000871 "A set of discrete, genetically-linked sequence alterations that reside on the same chromosomal strand and are typically co-inherited within a haplotype block.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000871 "Consider if we dont want to define this as a 'complement', as it implies a complet set of memebrs of a defined type.  But many haplotypes will be incomplete, due to lack of knowledge of other variation bound by the haplotype block.

Instead, we can create an 'allele set' class as the haplotype parent?")
AnnotationAssertion(dcterms:source obo:GENO_0000871 "Informed by https://isogg.org/wiki/Haplotype and https://en.wikipedia.org/wiki/Haplotype.")
AnnotationAssertion(rdfs:comment obo:GENO_0000871 "A haplotype is a set of non-overlapping alleles that reside in close proximity on the same DNA strand. We model them as 'complements' because they include all known/relevant alleles within a defined region in the genome (e.g. a 'gene', or a 'haplotype block') - where this set may consist of 0, 1, or more alterations from some reference.  Because they are genetically linked, the alleles comprising a haplotype are likely to be co-inherited and survive descent across many generations of reproduction. 

As highlighted in https://en.wikipedia.org/wiki/Haplotype, the term 'haplotype' is most commonly used to describe the following scenarios of genetic linkage between 'alleles':

1. The 'alleles' comprising the haplotype are 'single nucleotide polymorphisms' (SNPs) or other small alterations, which  collectively tend to occur together on a chromosomal strand). This use of 'haplotype' is commonly seen in phasing of patient WGS or WES data, to describe a state where two or more alterations that are believed to occur 'in cis' on the same chromosomal strand.  

2. The 'alleles' comprising the haplotype are SNPs or other short alterations, which collectively define a specific version of a gene. In this case, the locaiton bounding the haplotype corresponds to a gene locus, and the haplotype defines a specific allele of that gene (i.e 'gene allele'). \"Star alleles\" of PGx genes are examples of this category of haplotype (e.g. https://www.ebi.ac.uk/cgi-bin/ipd/imgt/hla/get_allele_hgvs.cgi?A*33:01:01, https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4724253/).

3. Each of the 'alleles' comprising the haplotype is itself a 'gene allele' (i.e. a specific version of an entire gene), such that the haolotype contains multiple complete 'gene alleles' that are co-inherited because they reside in tightly linked clusters on a single chromosome.   

Each of these more specific definition serves a purpose for a particular type of genetic analysis or use case. The GENO definition of 'haplotype' is broadly inclusive of these and any other scenarios where distinct 'alleles' of any kind on the same chromosomal strand are genetically linked, and thus tend to be co-inherited across successive generations.")
AnnotationAssertion(rdfs:label obo:GENO_0000871 "haplotype"@en)
SubClassOf(obo:GENO_0000871 obo:GENO_0000660)
SubClassOf(obo:GENO_0000871 ObjectSomeValuesFrom(obo:RO_0002351 obo:GENO_0000512))

# Class: obo:GENO_0000872 (genomic sequence set)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000872 "A set of genomic sequences (a biological sequence that is of genomic origin).")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000872 "copy number complement")
AnnotationAssertion(rdfs:comment obo:GENO_0000872 "A 'genomic *sequence* set' differs from a 'genomic *feature* set' in that we are counting how many copies of the same *sequence* exist in a genome, as opposed to how many of the same *sequence feature*. 'Genomic sequence sets' are useful for describing things like 'copy number complements', which are concerned only with how many copies of a sequence exist in a genome, regardless of the location where these reside. By contrast, 'genomic feature sets are useful for representing things like 'single locus complements', where members are sequence features whose identity is dependent on their location.")
AnnotationAssertion(rdfs:label obo:GENO_0000872 "genomic sequence set"@en)
SubClassOf(obo:GENO_0000872 obo:GENO_0000922)

# Class: obo:GENO_0000873 (microsatellite alteration)

AnnotationAssertion(rdfs:label obo:GENO_0000873 "microsatellite alteration"@en)
SubClassOf(obo:GENO_0000873 obo:GENO_0000874)

# Class: obo:GENO_0000874 (repeat region alteration)

AnnotationAssertion(rdfs:label obo:GENO_0000874 "repeat region alteration"@en)
SubClassOf(obo:GENO_0000874 obo:SO_0001059)

# Class: obo:GENO_0000875 (allelic state)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000875 "A quality inhering in an 'allelic complement' (aka a 'single locus complement') that describes the allelic variability found at a particular locus in the genome of a single cell/organism")
AnnotationAssertion(rdfs:label obo:GENO_0000875 "allelic state"@en)
SubClassOf(obo:GENO_0000875 obo:GENO_0000788)

# Class: obo:GENO_0000876 (obsolete genetic dosage)

AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000876 "allelic dosage")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000876 "an attribute inhering in a feature based on the total number or relative stoichiometry of functional copies present in a particular genome.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000876 "gene dosage")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000876 "Remodeled this concept as a 'genetic dosage complement' - a sequence-level class, as opposed to a sequence feature attribute.")
AnnotationAssertion(rdfs:comment obo:GENO_0000876 "Genetic dosage reflects how many 'functional' copies of a sequence are present in a genome. In diploid organisms, the normal dosage is 2 for autosomal genes/regions. Dosage increases if there is a duplication of the gene/region. Dosage decreases if there is either a deletion of a gene/region, or an inactivating mutation that eliminates gene function. This sets it apart from the notion of 'copy number', which reflects how many actual copies of a sequence exist in a genome. Addition of a non-functional allele of a gene will increase its copy number, but not increase its dosage.

Duplications of a sequence can occur at new locations in the genome, such that the resulting sequence represents a distinct sequence feature from the copy at its native locus.  For example, duplication of a region containing the human APOE gene on a different chromosome creates a sequence feature that shares sequence from the original gene, but not location, and therefore represents a different sequence feature.  The notions of dosage and copy number are therefore concerned with sequence-level entities (how many copies of a 'sequence' exist), as opposed to sequence feature-level entities.  The notion of a single-locus complement would be used to describe how many of a particular features are present in a genome - and describe which alleles of this feature are found.")
AnnotationAssertion(rdfs:label obo:GENO_0000876 "obsolete genetic dosage"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000876 "true"^^xsd:boolean)

# Class: obo:GENO_0000877 (allele origin)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000877 "A quality inhering in an allele that describes its genetic origin (how it came to be part of a cell's genome), i.e. whether it occurred de novo through some spontaneous mutation event, or was inherited from a parent.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000877 "genetic origin")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000877 "variant origin")
AnnotationAssertion(rdfs:label obo:GENO_0000877 "allele origin"@en)
SubClassOf(obo:GENO_0000877 obo:GENO_0000788)

# Class: obo:GENO_0000878 (maternal allele origin)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000878 "Describes an allele that is inherited from a female parent in virtue of the allele being present in the mother's egg.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000878 "maternally inherited")
AnnotationAssertion(rdfs:label obo:GENO_0000878 "maternal allele origin"@en)
SubClassOf(obo:GENO_0000878 obo:GENO_0000888)

# Class: obo:GENO_0000879 (paternal allele origin)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000879 "Describes an allele that is inherited from a male parent in virtue of the allele being present in the father's sperm.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000879 "paternally inherited")
AnnotationAssertion(rdfs:label obo:GENO_0000879 "paternal allele origin"@en)
SubClassOf(obo:GENO_0000879 obo:GENO_0000888)

# Class: obo:GENO_0000880 (de novo allele origin)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000880 "Describes an allele that originated through a mutation event in a germ cell of one of the parents, or in the fertilized egg itself during early embryogenesis. De novo alleles are* heritable* but *not inherited*.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000880 "Derived from https://www.cancer.gov/publications/dictionaries/genetics-dictionary/def/de-novo-mutation  and  https://ghr.nlm.nih.gov/primer/mutationsanddisorders/genemutation")
AnnotationAssertion(rdfs:comment obo:GENO_0000880 "We distinguish germline, somatic, and de novo allele origin based on a combination two key criteria - whether the allele *inherited* from a parent, and whether it is *heritble' by offspring. De novo variants are *heritable* but not *inherited* - as they are not observed constitutively  in either parent, but can be passed to offspring in virtue of their being present in the individual's germ cells. By contrast, germline variants are both inherited (passed down from a parent) and heritable (passable down to offspring), and somatic variants are neither inherited or heritable - having originated via a spontaneous mutation in a non-germ cell. 
		
De novo variants appear for the first time in one family member. They often explain genetic disorders in which an affected child has a mutation in every cell in the body but the parents do not, and there is no family history of the disorder.")
AnnotationAssertion(rdfs:label obo:GENO_0000880 "de novo allele origin"@en)
SubClassOf(obo:GENO_0000880 obo:GENO_0000877)

# Class: obo:GENO_0000881 (unknown allele origin)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000881 "Describes an allele  whose origin is not known.")
AnnotationAssertion(rdfs:label obo:GENO_0000881 "unknown allele origin"@en)
SubClassOf(obo:GENO_0000881 obo:GENO_0000877)

# Class: obo:GENO_0000882 (somatic allele origin)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000882 "Describes an allele that result from some spontaneous mutation event in a somatic cell after fertilization, and thus are not present in every cell in the body.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000882 "acquired")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000882 "Derived from https://www.cancer.gov/publications/dictionaries/genetics-dictionary/def/somatic-variant  and  https://ghr.nlm.nih.gov/primer/mutationsanddisorders/genemutation")
AnnotationAssertion(rdfs:comment obo:GENO_0000882 "We distinguish germline, somatic, and de novo allele origin based on a combination two key criteria - whether the allele *inherited* from a parent, and whether it is *heritble' by offspring. Somatic variants are neither inherited or heritable - having originated via a spontaneous mutation in a non-germ cell.  By contrast, germline variants are both inherited (passed down from a parent) and heritable (passable down to offspring). De novo mutations are not inherited but are typically heritable, as they originated through a spontaneous mutation that made them present in germ cells.
		
These acquired mutations are called 'somatic' because they typically affect  somatic (non-germ) cells.  But when spontaneous do mutations occur in the germ cells of an organism, these can be passed on to offspring in whom they will be considered de novo mutations.")
AnnotationAssertion(rdfs:label obo:GENO_0000882 "somatic allele origin"@en)
SubClassOf(obo:GENO_0000882 obo:GENO_0000877)

# Class: obo:GENO_0000883 (obsolete gametic)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000883 "a quality inhering in a feature in virtue of its presence only in the genome of gametes (germ cells).")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000883 "germ-line")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000883 "replaced by GENO:0000900 ! 'germline'")
AnnotationAssertion(rdfs:label obo:GENO_0000883 "obsolete gametic"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000883 "true"^^xsd:boolean)

# Class: obo:GENO_0000885 (diplotype)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000885 "An allelic genotype specifying the set of two alleles present at a particular location in a diploid genome (i.e., a diploid 'single locus complement')

Alt: A sequence feature complement comprised of two haplotypes at a particular location on paired homologous chromosomes in a diploid genome.")
AnnotationAssertion(rdfs:comment obo:GENO_0000885 "\"Humans are diploid organisms; they have paired homologous chromosomes in their somatic cells, which contain two copies of each gene. An allele is one member of a pair of genes occupying a specific spot on a chromosome (called locus). Two alleles at the same locus on homologous chromosomes make up the individual’s genotype. A haplotype (a contraction of the term ‘haploid genotype’) is a combination of alleles at multiple loci that are transmitted together on the same chromosome. Haplotype may refer to as few as two loci or to an entire chromosome depending on the number of recombination events that have occurred between a given set of loci. Genewise haplotypes are established with markers within a gene; familywise haplotypes are established with markers within members of a gene family; and regionwise haplotypes are established within different genes in a region at the same chromosome. Finally, a diplotype is a matched pair of haplotypes on homologous chromosomes.\"
From https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4118015/
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4118015/figure/sap-26-03-165-g002/")
AnnotationAssertion(rdfs:label obo:GENO_0000885 "diplotype"@en)
EquivalentClasses(obo:GENO_0000885 ObjectIntersectionOf(obo:GENO_0000823 ObjectSomeValuesFrom(obo:IAO_0000219 ObjectIntersectionOf(obo:GENO_0000516 ObjectExactCardinality(2 obo:RO_0002351 obo:GENO_0000512)))))

# Class: obo:GENO_0000886 (allelic phase)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000886 "A quality inhering in a collection of discontinuous sequence features in a single genome in virtue of their relative position on the same or separate chromosomes.")
AnnotationAssertion(rdfs:label obo:GENO_0000886 "allelic phase")
SubClassOf(obo:GENO_0000886 obo:GENO_0000788)

# Class: obo:GENO_0000887 (oryzias latipes strain)

AnnotationAssertion(rdfs:label obo:GENO_0000887 "oryzias latipes strain")
SubClassOf(obo:GENO_0000887 obo:GENO_0000112)
SubClassOf(obo:GENO_0000887 ObjectSomeValuesFrom(obo:RO_0002351 obo:NCBITaxon_8090))
SubClassOf(obo:GENO_0000887 ObjectAllValuesFrom(obo:RO_0002351 obo:NCBITaxon_8090))

# Class: obo:GENO_0000888 (germline allele origin)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000888 "Describes an allele that is inherited from a parent in virtue of the allele being present in the germline of one of the parents.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000888 "hereditary")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000888 "parental origin")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000888 "parentally inherited")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000888 "Derived from https://www.cancer.gov/publications/dictionaries/genetics-dictionary/def/germline-variant  and  https://ghr.nlm.nih.gov/primer/mutationsanddisorders/genemutation")
AnnotationAssertion(rdfs:comment obo:GENO_0000888 "We distinguish germline, somatic, and de novo allele origin based on a combination two key criteria - whether the allele *inherited* from a parent, and whether it is *heritble' by offspring. Germline variants are both *inherited* (present constitutively in a parent and passed down to offspring) and *heritable* (passable down to future offspring).  By contrast, somatic variants are neither inherited or heritable - having originated via a spontaneous mutation in a non-germ cell.  Traits caused by de novo mutations in germ cells are not inherited but are typically heritable, as they originated through a spontaneous mutation that made them present a germ cells.")
AnnotationAssertion(rdfs:label obo:GENO_0000888 "germline allele origin"@en)
SubClassOf(obo:GENO_0000888 obo:GENO_0000974)

# Class: obo:GENO_0000889 (undetermined inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000889 "An inheritance pattern that is not determined or not known.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000889 "unknown inheritance")
AnnotationAssertion(rdfs:label obo:GENO_0000889 "undetermined inheritance")
SubClassOf(obo:GENO_0000889 obo:GENO_0000141)

# Class: obo:GENO_0000890 (obsolete canonical allele)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000890 "The canonical allele that represents a single nucleotide variation in the BRCA2 gene, which can be described by various contextual alleles such as “NC_000013.11:g.32319070T>A” and “NG_012772.3:g.8591T>A”.")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000890 "One of a set of sequence features or haplotypes that exist at a particular genetic locus. <see ClinGen Allele Model>")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000890 "The notion of a 'canonical allele' is taken from the ClinGen Allele model (http://dataexchange.clinicalgenome.org/allele/).  It is implemented in GENO to provide an ontological representation of this concept that will support data integration efforts, but may be replaced by should an IRI become available from the ClinGen model.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000890 "http://dataexchange.clinicalgenome.org/allele/resource/canonical_allele/")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000890 "No longer needed by  ClinGen for their interpretation models, and will likely be replaced in ClinGen and elsewhere by VMC/GA4GH modeling constructs.")
AnnotationAssertion(dcterms:source obo:GENO_0000890 "ClinGen Allele Model (http://dataexchange.clinicalgenome.org/allele/)")
AnnotationAssertion(rdfs:comment obo:GENO_0000890 "As a 'sequence feature or collection' (sensu SO), a 'canonical allele' is considered here as an extent of biological sequence encoded in nucleic acid molecules of a cell or organism (as opposed to an information artifact that is about such a sequence). Canonical alleles can include haplotypes that contain more than one discontinuous sequence alteration that exist in cis on the same chromosomal strand.

In the ClinGen allele model, 'canonical alleles  are contrasted with 'contextual alleles'. Contextual alleles are informational representation that describe a canonical allele using a particular reference sequence. A single canonical allele can be described by many contextual alleles that each use a different reference sequence in their representation (e.g. different chromosomal or transcript references)")
AnnotationAssertion(rdfs:label obo:GENO_0000890 "obsolete canonical allele"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000890 "true"^^xsd:boolean)

# Class: obo:GENO_0000891 (obsolete contextual allele)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000891 "An informational artifact that describes a canonical allele by defining its sequence and position relative to a particular reference sequence.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000891 "The notion of a 'contextual allele' is taken from the ClinGen Allele model (http://dataexchange.clinicalgenome.org/allele/).  It is implemented in GENO to provide an ontological representation of this concept that will support data integration efforts, but may be replaced by should an IRI become available from the ClinGen model.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000891 "http://dataexchange.clinicalgenome.org/allele/resource/contextual_allele/")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000891 "No longer needed by  ClinGen for their interpretation models, and will likely be replaced in ClinGen and elsewhere by VMC/GA4GH modeling constructs.

Former axiom: denotes some 'obsolete_canonical allele'")
AnnotationAssertion(dcterms:source obo:GENO_0000891 "ClinGen Allele Model (http://dataexchange.clinicalgenome.org/allele/)")
AnnotationAssertion(rdfs:comment obo:GENO_0000891 "The notion of a 'contextual allele' derives from the ClinGen Allele model. Here, each genetic allele in a patient corresponds to a single 'canonical allele', which in turn may aggregate any number of 'contextual allele' representations that are may be defined against different reference sequences. Accordingly, many contextual alleles can describe a single canonical allele. For example, the contextual alleles “NC_000013.11:g.32319070T>A” and “NG_012772.3:g.8591T>A” both describe the same underlying canonical allele, a single nucleotide variation, in the BRCA2 gene.")
AnnotationAssertion(rdfs:label obo:GENO_0000891 "obsolete contextual allele"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000891 "true"^^xsd:boolean)

# Class: obo:GENO_0000892 (heteroplasmic mitochondrial inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000892 "A mitochondrial inheritance pattern whereby manifestation of a trait is observed when some inherited mitochondria contian the causative allele and some do not.")
AnnotationAssertion(rdfs:label obo:GENO_0000892 "heteroplasmic mitochondrial inheritance")
SubClassOf(obo:GENO_0000892 obo:GENO_0000949)

# Class: obo:GENO_0000893 (homoplasmic mitochondrial inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000893 "A mitochondrial inheritance pattern whereby manifestation of a trait occurs when only mitochondria containing the causative allele are inherited.")
AnnotationAssertion(rdfs:label obo:GENO_0000893 "homoplasmic mitochondrial inheritance")
SubClassOf(obo:GENO_0000893 obo:GENO_0000949)

# Class: obo:GENO_0000897 (genomic entity)

AnnotationAssertion(obo:GENO_0000905 obo:GENO_0000897 "true"^^xsd:boolean)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000897 "An generically dependent continuant that carries biological sequence that is part of or derived from a genome.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000897 "An abstract/organizational class to support data modeling, that includes genomic features, genomic feature complements, qualified genomic features and their complements, as well as genotypes that denote such entities.")
AnnotationAssertion(rdfs:label obo:GENO_0000897 "genomic entity"@en)
EquivalentClasses(obo:GENO_0000897 ObjectUnionOf(obo:GENO_0000481 ObjectSomeValuesFrom(obo:BFO_0000051 obo:GENO_0000481) ObjectSomeValuesFrom(obo:GENO_0000726 ObjectUnionOf(obo:GENO_0000481 obo:GENO_0000660)) ObjectSomeValuesFrom(obo:IAO_0000219 ObjectUnionOf(obo:GENO_0000481 obo:GENO_0000660 obo:GENO_0000715))))
SubClassOf(obo:GENO_0000897 obo:BFO_0000031)
SubClassOf(obo:GENO_0000897 ObjectSomeValuesFrom(obo:RO_0002162 obo:OBI_0100026))

# Class: obo:GENO_0000898 (haplotype block)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000898 "A sequence feature representing a region of the genome over which there is little evidence for historical recombination, such that sequence alterations it contains are typically co-inherited across generations.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000898 "Consider whether we might better model a 'haplotype block' at the level of a sequence location, rather than a sequence region - e.g. as 
\"A genomic location over which there is little evidence for historical recombination, such that sequence alterations it contains are typically co-inherited across generations.\" Look at how teh concept is used in research, and if people think of each version of sequence in a haplotype block to be an instance. I think we would just call these versions 'alleles', and then  could define haplotype block as a location.

Current definition is based on http://purl.obolibrary.org/obo/SO_0000355 ! haplotype_block (def = A region of the genome which is co-inherited as the result of the lack of historic recombination within it). If we stick with a region-level treatment, consdier if as a defined region of genomic sequence where variation is known to occur, a haplotype block should be classified as a subtype of allele.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000898 "Informed by http://purl.obolibrary.org/obo/SO_0000355 ! haplotype_block, and  DOI: 10.1126/science.1069424.")
AnnotationAssertion(rdfs:comment obo:GENO_0000898 "A particular haplotype block is defined by the set of sequence alterations it is known to contain, which collectively represent a 'haplotype'.  The boundaries of haplotype blocks are defined in efforts to identify haplotypes that exist in organisms or populations.  A haplotype block may span any number of sequence alterations, and may cover small or large chromosomal regions - depending on the number of recombination events that have occurred between the alterations defining the haplotype.")
AnnotationAssertion(rdfs:label obo:GENO_0000898 "haplotype block"@en)
SubClassOf(obo:GENO_0000898 obo:GENO_0000481)

# Class: obo:GENO_0000899 (genomic genotype)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000899 "A genotype that describes the total variation in heritable genomic sequence of a cell or organism, typically in terms of alterations from some reference or background genotype.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000899 "'Genomic Genotype' vs 'Genome' in GENO: 
A genomic genotype is an information artifact with a representational syntax that can specify what is known about the complete sequence of a genome. This syntax describes 'reference' and 'variant' components - namely a 'background genotype' and 'genomic variation complement' - that must be operated on to resolve the genome sequence.  Specifically, the genome sequence is determined by substituting all sequences specified by the 'genomic variation complement' for the corresponding sequences in the reference 'background genotype'.  So, while the total sequence content described in a genotype may exceed that of a single a genome (in that it includes a reference genome and variatoin complement), the intended resolution of these sequences is to arrive at a single genome sequence. It is this end-point that we consider when asserting that a genotype 'specifies' a genome.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000899 "complete genotype")
AnnotationAssertion(rdfs:comment obo:GENO_0000899 "1. A genomic genotype is a short-hand specification of a genome that uses a representational syntax comprised of information about a reference genome ('genomic background'), and all specific variants from this reference (the 'genomic variation complement').  Conceptually, this variant genome sequence can be resolved by substituting all sequences specified by the 'genomic variation complement' for the corresponding sequences in the reference  'genomic background' sequence.

2. 'Heritable' genomic sequence is that which is passed on to subsequent generations of cells/organisms, and includes all chromosomal sequences, the mitochondrial genome, and any transmissable extrachromosomal replicons.")
AnnotationAssertion(rdfs:label obo:GENO_0000899 "genomic genotype"@en)
EquivalentClasses(obo:GENO_0000899 ObjectIntersectionOf(obo:GENO_0000719 ObjectSomeValuesFrom(obo:IAO_0000219 obo:SO_0001026)))
SubClassOf(obo:GENO_0000899 ObjectSomeValuesFrom(obo:GENO_0000385 obo:GENO_0000611))

# Class: obo:GENO_0000901 (obsolete allele cellular context)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000901 "A quality inhering in a particular allele in virtue of its presence only in a particular type of cell in an organism (e.g. somatic vs germ cells)")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000901 "decided this attribute is not needed, and moved its child 'germline' and 'somatic' concepts under allele origin")
AnnotationAssertion(rdfs:comment obo:GENO_0000901 "Cellular context of an allele is typically defined in the context of evaluating an individual organism, as alleles that are somatic in one organism can be germline in others.")
AnnotationAssertion(rdfs:label obo:GENO_0000901 "obsolete allele cellular context"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000901 "true"^^xsd:boolean)

# Class: obo:GENO_0000902 (genomic feature location)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000902 "The location of a sequence feature in a genome, defined by its start and end position on some reference genomic coordinate system")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000902 "In GENO, the notion of a Genomic Location (aka Genomic Locus) plays the same role as that of a FALDO:Region in the design pattern for describing the location of a feature of interest.  We define this specific GENO class because the ontological nature of FALDO:Region class is not clear in the context of the BFO and SO-based GENO model. We will work to resolve these questions and ideally converge these concepts in the future.

We don't link a Genomic Location to a specific reference sequence because in the FALDO model (which GENO adopts with the exception of swapping GENO:Genomic Locus for FALDO:Region), allows the start and end positions of a region to be defined on separate reference sequences. So while a given Location is conceptually associated with a single reference, in practice it can be pragmatic to define start and stop on different references sequences.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000902 "In practice, GENO advocates describing biology at the level of genomic features - i.e. define specific terms for genes as genomic features, and not duplicate representation of the loci where each gene resides. So we might define a class representing the human Shh gene as a 'genomic feature', but not parallel this with a 'human Shh gene locus' class.   The utility of the 'genomic locus' class in the ontology is primarily to be clear about the distinction, but we would only use it in modeling data if absolutely needed.

For example, we would define an  'HLA gene block' as a subclass of 'genomic feature', and assert that  HLA-A, HLA-B, and HLA-C genes are part/subsequences of this HLA gene block (as opposed to modeling this as an 'HLA locus'  and asserting that the HLA-A, HLA-B, and HLA-C genes occupy this locus).")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000902 "genomic location")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000902 "genomic locus")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000902 "VMC:Location")
AnnotationAssertion(rdfs:comment obo:GENO_0000902 "1. A genomic location (aka locus) is defined by its begin and end coordinates on a reference genome, independent of a particular sequence that may reside there.  In GENO, we say that a genomic location is occupied_by a 'sequence feature' - where the identity of this feature depends on both it sequence, and its location in the genome (i.e. the locus it occupies).  For example, the 'ATG' sequence beginning the ORF of the human SHH gene shares the *same sequence* as the 'ATG' beginning the ORF of the human AKT gene. But these are *distinct sequence features* because they occupy different genomic locations. 
	
2. A given genomic location (e.g. the human SHH gene locus) may be occupied by different alleles (e.g. different alleles of the SHH gene). Within the genome of a single diploid organism, there is potential for two alleles to exist at such a locus (i.e. two different versions of the SHH gene).  And across genomes of all members of a species, many more alleles of the SHH gene may exist and occupy this same locus.

3. The notion of a genomic location in the realm of biological sequences is analogous to a BFO:spatiotemporal region in the realm of physical entities. A spatiotemporal region can be occupied_by physical objects, while a genomic location is occupied_by sequence features. Just as a spatiotemporal region is distinct from an object that occupies it, so too a genomic locus is distinct from a sequence feature that occupies it.  As a more concrete example, consider the distinction between a street address and the building that occupies it as analogous to the relationship between a genomic location and the feature that resides there.")
AnnotationAssertion(rdfs:label obo:GENO_0000902 "genomic feature location"@en)
SubClassOf(obo:GENO_0000902 obo:GENO_0000815)

# Class: obo:GENO_0000904 (organismal entity)

AnnotationAssertion(obo:GENO_0000905 obo:GENO_0000904 "true"^^xsd:boolean)
AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000904 obo:GENO_0000484)
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000904 "A material entity that is an organism, derived from an organism, or composed of organisms (e.g. a cell line, biosample, tissue culture, population, etc).")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000904 "useful organizational term to collect entities that have genomes/genotypes.")
AnnotationAssertion(rdfs:label obo:GENO_0000904 "organismal entity"@en)
EquivalentClasses(obo:GENO_0000904 ObjectUnionOf(obo:OBI_0100026 ObjectSomeValuesFrom(obo:RO_0001000 obo:OBI_0100026) ObjectSomeValuesFrom(obo:RO_0002351 obo:OBI_0100026)))
SubClassOf(obo:GENO_0000904 obo:BFO_0000040)

# Class: obo:GENO_0000907 (gene product)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000907 "The molecular product resulting from transcription of a single gene (either a protein or RNA molecule)")
AnnotationAssertion(rdfs:label obo:GENO_0000907 "gene product"@en)
SubClassOf(obo:GENO_0000907 obo:SO_0000110)

# Class: obo:GENO_0000910 (reporter)

AnnotationAssertion(rdfs:label obo:GENO_0000910 "reporter"@en)
SubClassOf(obo:GENO_0000910 obo:GENO_0000788)

# Class: obo:GENO_0000911 (selectable marker)

AnnotationAssertion(rdfs:label obo:GENO_0000911 "selectable marker"@en)
SubClassOf(obo:GENO_0000911 obo:GENO_0000788)

# Class: obo:GENO_0000912 (selectable marker region)

AnnotationAssertion(rdfs:label obo:GENO_0000912 "selectable marker region"@en)
SubClassOf(obo:GENO_0000912 obo:GENO_0000638)

# Class: obo:GENO_0000914 (reference genome)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000914 "A genome whose sequence is identical to that of a genome sequence considered to be the reference.")
AnnotationAssertion(rdfs:label obo:GENO_0000914 "reference genome"@en)
SubClassOf(obo:GENO_0000914 obo:SO_0001026)
SubClassOf(obo:GENO_0000914 ObjectSomeValuesFrom(obo:GENO_0000239 obo:SO_0001505))

# Class: obo:GENO_0000915 (obsolete haplotype)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000915 "A haplotype is an allele that represents one of many possible versions of a 'haplotype block', which defines a region of genomic sequence that is typically 'co-inherited' across generations due to a lack of historically observed recombination within it.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000915 "Former comment: \"Each of these more specific definition serves a purpose for a particular type of genetic analysis or use case - e.g. 'SNP allele' haplotypes are identified and analysed in studies to uncover the genetic basis of common disease by efforts like the International HapMap Project.\"")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000915 "Informed by https://isogg.org/wiki/Haplotype and https://en.wikipedia.org/wiki/Haplotype and http://purl.obolibrary.org/obo/SO_0001024 ! haplotype.")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000915 "Decided to represent haplotypes as collections of discrete alleles, rather than continuous features defined by such sets.

Former SC axioms:
- is_allele_of some 'haplotype block'
- 'has part' some sequence_alteration")
AnnotationAssertion(rdfs:comment obo:GENO_0000915 "1. The relationship between 'haplotype' and 'haplotype block' is analogous to the relationship between 'gene allele' and 'gene':  a 'gene allele' is one of many possible instances of a 'gene', while a 'haplotype' is one of many possible instances of a 'haplotype block'.  In this sense, a gene allele can be considered to be a haplotype whose extent is that of a gene (as it is generally true that there is a low probability of recombination within any given gene).

2. Haplotypes typically contain more than one 'genetically-linked' loci where sequence alterations are known to exist, such that a set of alterations will be co-inherited together across many generations of reproduction.  A common use of 'haplotype' is in phasing of patient WGS or WES data, where this term refers to sequence containing two or more alterations that are beleived to occur 'in cis' on the same chromosomal strand.  

GENO's definition is consistent with but more inclusive than this view, allowing for haplotypes with one or zero established alterations as long as there is a low probability of recombination within the region it spans (such that alterations found in cis are likely to remain in cis across successive generations). As a result, GENO considers any allele that spans an extent greater than that of a single sequence alteration to be a haplotype - as long as there is an expectation of low recombination frequency within the haplotype block occupied by the allele. For example, a 'gene allele' is a haplotype representing a particular version of a gene that contains one or more sequence alterations - as a 'gene' is a region of sequence with a low probability of recombination that is generally expeted to be inherited as a unit. 

3. As highlighted in https://en.wikipedia.org/wiki/Haplotype, the term 'haplotype' is most commonly used to describe the following scenarios of genetic linkage between 'alleles':

a. The first is regions containing multiple linked 'gene alleles' - i.e. specific versions of entire genes that are co-inherited because they reside in tightly linked clusters on a single chromosome.  
b. The second is a region containing multiple linked single nucleotide polymorphisms (SNPs) that tend to occur together on a chromosomal strand (i.e. be statistically associated).  This use of 'haplotype' is commonly seen in phasing of patient WGS or WES data, to describe a state where two or more alterations that are believed to occur 'in cis' on the same chromosomal strand.  
c. A third, which is related to the previous case, occurs when the extent of region containing linked SNPs is that of a single gene.  In this case, the haplotype represents a 'gene allele' - a version of an entire gene defined by the set of sequence alterations it contains. We may consider this a haplotype as most genes are small enough that there is little chance of recombination events moving cis alterations onto separate chromosomes.

The GENO definition of 'haplotype' is broadly inclusive of these and any other scenarios where distinct 'alleles' of any kind on the same chromosomal strand are genetically linked, and thus tend to be co-inherited across successive generations.")
AnnotationAssertion(rdfs:label obo:GENO_0000915 "obsolete haplotype"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000915 "true"^^xsd:boolean)

# Class: obo:GENO_0000916 (obsolete haplotype block)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000916 "A sequence feature representing a region of the genome over which there is little evidence for historical recombination, such that sequences it contain are typically co-inherited/transmitted across generations.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000916 "Derived from DOI: 10.1126/science.1069424 and http://purl.obolibrary.org/obo/SO_0000355 ! haplotype_block.")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000916 "Decided to represent haplotypes as collections of discrete alleles, rather than continuous features defined by such sets.")
AnnotationAssertion(rdfs:comment obo:GENO_0000916 "A haplotype block is a class of genomic sequence defined by a  lack of evidence for historical recombination, such that sequence alterations within it tend to be co-inherited across successive generations. A haplotype is considered to be one of many possible versions of a 'haplotype block' - defined by the set of co-inherited alterations it contains.  In this sense, the relationship between 'haplotype' and 'haplotype block' is analogous to the relationship between 'gene allele' and 'gene'* - a 'gene allele' is one of many possible instances of a 'gene', while  a 'haplotype' is one of many possible instances of a 'haplotype block'.

The boundaries of haplotype blocks are defined in efforts to identify haplotypes that exist in organisms or populations. A haplotype block may span any number of sequence alterations, and may cover small or large chromosomal regions - depending on the number of recombination events that have occurred between the alterations defining the haplotype.

-----------------------

* One difference however is that gene instnaces are necessarily 'functional' - so non-functional  alleles of a gene locus wont qualify as gene instances. no such requirement exists for haplotype block instnaces.")
AnnotationAssertion(rdfs:label obo:GENO_0000916 "obsolete haplotype block"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000916 "true"^^xsd:boolean)

# Class: obo:GENO_0000918 (organellar plasmy)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000918 "An allelic state that describes the number of different alleles of a gene from an organellar genome (i.e. mitochondrial, plastid) that may exist in a cell.")
AnnotationAssertion(rdfs:comment obo:GENO_0000918 "Cells with a population of organelles from a single origin that all share the same organellar genome will contain only one allele of each organellar gene, while cells with populations of organelles of  different origins may contain more than one allele of a given organellar gene.")
AnnotationAssertion(rdfs:label obo:GENO_0000918 "organellar plasmy"@en)
SubClassOf(obo:GENO_0000918 obo:GENO_0000875)

# Class: obo:GENO_0000919 (qualified sequence feature)

AnnotationAssertion(obo:IAO_0000112 obo:GENO_0000919 "Consider wild-type zebrafish shha gene in the context of being targeted by morpholino MO-1 vs morpholino MO-2 in separate experiments. These shha genes share identical sequence and position, but represent distinct instances of a 'qualified sequence feature' because of their different external contexts. This is important because these qualified features could have distinct phenotypes associated with them (just as two different sequence variants (alleles) of the same gene can have potentially different associated phenotypes).")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000919 "A sequence feature whose identity is additionally dependent on the context or state of the material sequence molecule in which the feature is concretized. This context/state describes factors external to the feature's intrinsic  sequence and position that can influences its expression, such as being targeted by gene-knockdown reagents, or an epigenetic modification.")
AnnotationAssertion(rdfs:comment obo:GENO_0000919 "GENO defines three levels of sequence-related artifacts, which are distinguished by their identity criteria.
1. 'Biological sequence' identity is dependent only on the ordering of units that comprise the sequence.
2. 'Sequence feature' identity is dependent on its sequence and the genomic location of the sequence (this is consistent with the definition of 'sequence feature' in the Sequence Ontology).
3. 'Qualified sequence feature' identity is additionally dependent on some aspect of the physical state or context of the genetic material in which the feature is concretized. This third criteria is extrinsic to its sequence and its genomic location. For example, the feature's physical concretization being targeted by a gene knockdown reagent in a cell (e.g. the zebrafish Shha gene as targeted by the morpholino 'Shha-MO1'), or its being transiently expressed from a recombinant expression construct (e.g. the human SHH gene as expressed in a  mouse Shh knock-out cell line), or its having been epigenetically modified in a way that alters its expression level or pattern (e.g. the human SHH gene with a specific methylation pattern).")
AnnotationAssertion(rdfs:comment obo:GENO_0000919 "Modeling sequence entities at this 'qualified' level is useful for distinguishing cases where features with identical sequence and position as separate instances - based on their material bearers being found in different contexts. For example, consider a situation where the zebrafish shha gene (a sequence feature) is targeted in two experimental groups of fish by two different morpholinos, and phenotypes are assessed for each.  We want to be able to represent two 'variants' of the shha gene in this scenario as separate 'qualified sequence feature' instances so we can capture data about the phenotypes resulting from each - just as we would separately represent to different sequence variants (alleles) of the shha gene at the sequence feature level so that we can track their associated phenotypes.")
AnnotationAssertion(rdfs:label obo:GENO_0000919 "qualified sequence feature"@en)
SubClassOf(obo:GENO_0000919 obo:GENO_0000713)

# Class: obo:GENO_0000920 (qualified sequence feature set)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000920 "A set of qualified seqeunce features.")
AnnotationAssertion(rdfs:comment obo:GENO_0000920 "'Sets' are used to represent entities that are typically collections of more than one member. But we allow for sets that contain 0 members (an 'empty' set) or 1 member (a 'singleton' or 'unit' set), consistent with the concept of 'matehmatical sets'.")
AnnotationAssertion(rdfs:label obo:GENO_0000920 "qualified sequence feature set"@en)
SubClassOf(obo:GENO_0000920 obo:GENO_0000713)
SubClassOf(obo:GENO_0000920 ObjectSomeValuesFrom(obo:BFO_0000051 obo:GENO_0000919))
SubClassOf(obo:GENO_0000920 ObjectSomeValuesFrom(obo:GENO_0000726 obo:GENO_0000659))

# Class: obo:GENO_0000921 (biological sequence or set)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000921 "A biolocical sequence, or set of such sequences.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000921 "biological sequence or collection")
AnnotationAssertion(rdfs:label obo:GENO_0000921 "biological sequence or set"@en)
SubClassOf(obo:GENO_0000921 obo:BFO_0000031)

# Class: obo:GENO_0000922 (biological sequence set)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000922 "A set of biological sequences.")
AnnotationAssertion(rdfs:comment obo:GENO_0000922 "'Sets' are used to represent entities that are typically collections of more than one member. But we allow for sets that contain 0 members (an 'empty' set) or 1 member (a 'singleton' or 'unit' set), consistent with the concept of 'mathematical sets'. 

A set may also include multiple copies of the same sequence. For example, in a 'copy number complement', members are all copies of this same biological sequence.")
AnnotationAssertion(rdfs:label obo:GENO_0000922 "biological sequence set"@en)
SubClassOf(obo:GENO_0000922 obo:GENO_0000921)

# Class: obo:GENO_0000923 (obsolete functional copy number complement)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000923 "A set of all features representing *functional* versions of a specified sequence (typically that of a gene) in a particular genome.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000923 "Formerly considered modeling this as an informational entity, defined as \"An information entity that describes the total number of functional copies of a gene or region of sequence in a particular genome.\"")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000923 "functional feature complement")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000923 "genetic dosage"@en)
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000923 "Decided to implement copy number related classes at the sequence level, rather than the sequence feature level. Replaced by GENO:0000963.")
AnnotationAssertion(rdfs:comment obo:GENO_0000923 "As for copy number complements, the defining 'sequence' here is specified in terms of a location on a reference sequence - typically the location where a gene or set of genes resides.  But the criteria for membership in a functional copy number complement require only that the feature can perform the functions associated with the gene or genes at the defining location.  A gene allele that varies by only one nucleotide from the wild-type gene may not qualify if that alteration eliminates the function of the allele.  This represents an important distinction between 'copy number' and 'functional copy number'. The former is not concerned with the functionality of sequence copies - only that there is a duplication of sequence in the genome. Thus, the addition of a non-functional allele of a gene will increase its copy number, but not increase its 'functional copy number (aka its dosage).")
AnnotationAssertion(rdfs:comment obo:GENO_0000923 "The notion of 'functional copy number' (aka 'genetic dosage') describes how many 'functional' copies of a sequence are present in a genome - i.e. sequences that retain their normal activity and/or produce gene products that retain their normal activity.  In diploid organisms, the normal dosage is 2 for autosomal genes/regions. Dosage increases if there is a duplication of the gene/region. Dosage decreases if there is either a deletion of a gene/region, or an inactivating mutation that eliminates gene function. This latter condition sets it apart from the notion of a 'copy number complement', which reflects how many actual copies of a sequence exist in a genome. Addition of a non-functional allele of a gene will increase its genomic sequence complement count (i.e. its copy number), but not increase its dosage.")
AnnotationAssertion(rdfs:label obo:GENO_0000923 "obsolete functional copy number complement"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000923 "true"^^xsd:boolean)

# Class: obo:GENO_0000924 (obsolete intrinsic sequence feature attribute)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000924 "A sequence feature attribute that reflects feature-level characteristics that depend only on the sequence, location, or genomic context of a feature  or  collection, but are independent of how it may be concretized in physical form.")
AnnotationAssertion(rdfs:label obo:GENO_0000924 "obsolete intrinsic sequence feature attribute"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000924 "true"^^xsd:boolean)

# Class: obo:GENO_0000925 (obsolete extrinsic sequence feature attribute)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000925 "A sequence feature attribute that reflects characteristics of the physical molecule in which the feature is concretized (e.g. its cellular context, source of origin, etc.)")
AnnotationAssertion(rdfs:label obo:GENO_0000925 "obsolete extrinsic sequence feature attribute"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000925 "true"^^xsd:boolean)

# Class: obo:GENO_0000926 (allelic cellular distribution)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000926 "A quality inhering in an allele reflecting whether it is found in all cells of an organism's body, or just some clonal subset (e.g. in mosaicism).")
AnnotationAssertion(rdfs:label obo:GENO_0000926 "allelic cellular distribution"@en)
SubClassOf(obo:GENO_0000926 obo:GENO_0000788)

# Class: obo:GENO_0000927 (constitutional)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000927 "A cellular distribution in which an allele is found in all cells of an organism's body, typically in virtue of its germline origin.")
AnnotationAssertion(rdfs:label obo:GENO_0000927 "constitutional"@en)
SubClassOf(obo:GENO_0000927 obo:GENO_0000926)

# Class: obo:GENO_0000928 (clonal)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000928 "A cellular distribuution in which an allele is found only in some clonal subset of cells in an organism, typically in virtue of its somatic origin.")
AnnotationAssertion(rdfs:label obo:GENO_0000928 "clonal"@en)
SubClassOf(obo:GENO_0000928 obo:GENO_0000926)

# Class: obo:GENO_0000929 (multifactorial inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000929 "An inheritance pattern that depends on a mixture of major and minor genetic determinants (i.e. alleles of more than one contributing genes), possibly together with environmental factors.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000929 "complex inherritance")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000929 "multi-factorial inheritance")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000929 "multi-genic inheritance")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000929 "multi-locus inheritance")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000929 "multigenic inheritance")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000929 "http://purl.obolibrary.org/obo/HP_0001426")
AnnotationAssertion(rdfs:comment obo:GENO_0000929 "Diseases inherited in this manner are termed 'complex diseases'.")
AnnotationAssertion(rdfs:label obo:GENO_0000929 "multifactorial inheritance"@en)
SubClassOf(obo:GENO_0000929 obo:GENO_0000141)

# Class: obo:GENO_0000930 (digenic inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000930 "A multifactorial inheritance pattern that is determined by the simultaneous action of alleles in two genes.")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000930 "http://purl.obolibrary.org/obo/HP_0010984")
AnnotationAssertion(rdfs:label obo:GENO_0000930 "digenic inheritance"@en)
SubClassOf(obo:GENO_0000930 obo:GENO_0000929)

# Class: obo:GENO_0000931 (oligogenic inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000931 "A multifactorial inheritance pattern that is determined by the simultaneous action of alleles in few genes.")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000931 "http://purl.obolibrary.org/obo/HP_0010983")
AnnotationAssertion(rdfs:comment obo:GENO_0000931 "It is recommended this term be used for traits governed by three gene loci, although it is noted that usage of this term in the literature is not uniform.")
AnnotationAssertion(rdfs:label obo:GENO_0000931 "oligogenic inheritance"@en)
SubClassOf(obo:GENO_0000931 obo:GENO_0000929)

# Class: obo:GENO_0000932 (polygenic inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000932 "A multifactorial inheritance pattern that is determined by the simultaneous action of alleles a large number of genes.")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000932 "http://purl.obolibrary.org/obo/HP_0010982")
AnnotationAssertion(rdfs:comment obo:GENO_0000932 "Typically used for traits/conditions governed by more than three gene loci.")
AnnotationAssertion(rdfs:label obo:GENO_0000932 "polygenic inheritance"@en)
SubClassOf(obo:GENO_0000932 obo:GENO_0000929)

# Class: obo:GENO_0000933 (monogenic inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000933 "An inheritance pattern wherein the trait is determined by alleles of a single causal gene, possibly together with environmental factors.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000933 "single-gene inheritance")
AnnotationAssertion(rdfs:label obo:GENO_0000933 "monogenic inheritance"@en)
SubClassOf(obo:GENO_0000933 obo:GENO_0000141)

# Class: obo:GENO_0000934 (autosomal inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000934 "An inheritance pattern wherein the trait is determined by alleles of a single causal gene on a non-sex chromosome.")
AnnotationAssertion(rdfs:label obo:GENO_0000934 "autosomal inheritance"@en)
SubClassOf(obo:GENO_0000934 obo:GENO_0000933)

# Class: obo:GENO_0000935 (allosomal inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000935 "An inheritance pattern wherein the trait is determined by alleles of a single causal gene on a sex chromosome.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000935 "gonosomal inheritance")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000935 "http://purl.obolibrary.org/obo/HP_0010985")
AnnotationAssertion(rdfs:label obo:GENO_0000935 "allosomal inheritance"@en)
SubClassOf(obo:GENO_0000935 obo:GENO_0000933)

# Class: obo:GENO_0000936 (X-linked inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000936 "An inheritance pattern wherein the trait is determined by alleles of a single causal gene on an X-chromosome.")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000936 "http://purl.obolibrary.org/obo/HP_0001417")
AnnotationAssertion(rdfs:label obo:GENO_0000936 "X-linked inheritance"@en)
SubClassOf(obo:GENO_0000936 obo:GENO_0000935)

# Class: obo:GENO_0000937 (complete X-linked dominant inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000937 "An X-linked dominant inheritance pattern wherein the trait associated with one allele completely masks the trait associated with a different allele found at that locus.")
AnnotationAssertion(rdfs:label obo:GENO_0000937 "complete X-linked dominant inheritance"@en)
SubClassOf(obo:GENO_0000937 obo:GENO_0000146)

# Class: obo:GENO_0000938 (incomplete X-linked dominant inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000938 "An X-linked dominant inheritance pattern wherein the trait expressed in a heterozygous individual is intermediate between the trait expressed in individuals homozygous for either allele in the heterozygous locus.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000938 "semi-dominant X-linked inheritance")
AnnotationAssertion(rdfs:label obo:GENO_0000938 "incomplete X-linked dominant inheritance"@en)
SubClassOf(obo:GENO_0000938 obo:GENO_0000146)

# Class: obo:GENO_0000939 (co-dominant X-linked inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000939 "An X-linked dominant inheritance pattern wherein a heterozygous individual simultaneously expresses the distinct traits associated with each allele in the heterozygous locus.")
AnnotationAssertion(rdfs:label obo:GENO_0000939 "co-dominant X-linked inheritance"@en)
SubClassOf(obo:GENO_0000939 obo:GENO_0000146)

# Class: obo:GENO_0000941 (Y-linked inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000941 "An inheritance pattern wherein the trait is determined by alleles of a single causal gene on a Y-chromosome.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000941 "holandric inheritance")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000941 "http://purl.obolibrary.org/obo/HP_0001450")
AnnotationAssertion(rdfs:label obo:GENO_0000941 "Y-linked inheritance"@en)
SubClassOf(obo:GENO_0000941 obo:GENO_0000935)

# Class: obo:GENO_0000942 (Z-linked inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000942 "An inheritance pattern wherein the trait is determined by alleles of a single causal gene on a Z-chromosome.")
AnnotationAssertion(rdfs:label obo:GENO_0000942 "Z-linked inheritance"@en)
SubClassOf(obo:GENO_0000942 obo:GENO_0000935)

# Class: obo:GENO_0000943 (Z-linked dominant inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000943 "A Z-linked inheritance pattern wherein the trait manifests in heterozygotes.")
AnnotationAssertion(rdfs:label obo:GENO_0000943 "Z-linked dominant inheritance"@en)
SubClassOf(obo:GENO_0000943 obo:GENO_0000942)

# Class: obo:GENO_0000944 (complete Z-linked dominant inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000944 "A Z-linked dominant inheritance pattern wherein the trait associated with one allele completely masks the trait associated with a different allele found at that locus.")
AnnotationAssertion(rdfs:label obo:GENO_0000944 "complete Z-linked dominant inheritance"@en)
SubClassOf(obo:GENO_0000944 obo:GENO_0000943)

# Class: obo:GENO_0000945 (incomplete Z-linked dominant inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000945 "A Z-linked dominant inheritance pattern wherein the trait expressed in a heterozygous individual is intermediate between the trait expressed in individuals homozygous for either allele in the heterozygous locus.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000945 "semi-dominant Z-linked inheritance")
AnnotationAssertion(rdfs:label obo:GENO_0000945 "incomplete Z-linked dominant inheritance"@en)
SubClassOf(obo:GENO_0000945 obo:GENO_0000943)

# Class: obo:GENO_0000946 (co-dominant Z-linked inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000946 "An Z-linked dominant inheritance pattern wherein a heterozygous individual simultaneously expresses the distinct traits associated with each allele in the heterozygous locus.")
AnnotationAssertion(rdfs:label obo:GENO_0000946 "co-dominant Z-linked inheritance"@en)
SubClassOf(obo:GENO_0000946 obo:GENO_0000943)

# Class: obo:GENO_0000947 (Z-linked reccessive inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000947 "A Z-linked inheritance pattern wherein a trait caused by alleles of a gene on the Z-chromosome manifests in homozygous but not heterozygote individuals.")
AnnotationAssertion(rdfs:label obo:GENO_0000947 "Z-linked reccessive inheritance"@en)
SubClassOf(obo:GENO_0000947 obo:GENO_0000942)

# Class: obo:GENO_0000948 (W-linked inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000948 "An inheritance pattern wherein the trait is determined by alleles of a single causal gene on a W-chromosome.")
AnnotationAssertion(rdfs:label obo:GENO_0000948 "W-linked inheritance"@en)
SubClassOf(obo:GENO_0000948 obo:GENO_0000935)

# Class: obo:GENO_0000949 (mitochondrial inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000949 "An inheritance pattern observed for traits related to a gene encoded on the mitochondrial genome.")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000949 "http://purl.obolibrary.org/obo/HP_0001427")
AnnotationAssertion(rdfs:comment obo:GENO_0000949 "Because the mitochondrial genome is essentially always maternally inherited, a mitochondrial condition can only be transmitted by females, although the condition can affect both sexes. The proportion of mutant mitochondria can vary (heteroplasmy).")
AnnotationAssertion(rdfs:label obo:GENO_0000949 "mitochondrial inheritance"@en)
SubClassOf(obo:GENO_0000949 obo:GENO_0000141)

# Class: obo:GENO_0000952 (sex-limited autosomal dominant inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000952 "An autosomal dominant inheritance pattern wherein the trait manifests in heterozygotes in a sex-specific manner (i.e. only in males or only in females).")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000952 "http://purl.obolibrary.org/obo/HP_0001470")
AnnotationAssertion(rdfs:label obo:GENO_0000952 "sex-limited autosomal dominant inheritance"@en)
SubClassOf(obo:GENO_0000952 obo:GENO_0000147)

# Class: obo:GENO_0000953 (sex-limited autosomal recessive inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000953 "An autosomal recessive inheritance pattern wherein the trait manifests only in homozygotes, and in a sex-specific manner (i.e. only in males or only in females).")
AnnotationAssertion(oboInOwl:hasDbXref obo:GENO_0000953 "http://purl.obolibrary.org/obo/HP_0031362")
AnnotationAssertion(rdfs:label obo:GENO_0000953 "sex-limited autosomal recessive inheritance"@en)
SubClassOf(obo:GENO_0000953 obo:GENO_0000148)

# Class: obo:GENO_0000954 (allele set)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000954 "A set of discrete alleles within a particular genome.")
AnnotationAssertion(rdfs:comment obo:GENO_0000954 "'Sets' are used to model entities that can be comprised of multiple discrete elements - but which can also contain zero or a single member.  An \"Allele Set'  represents any collection of 0 or more discrete alleles found within a particular genome. The alleles in such a set can be located at distant or close locations in the genome, and if on the same chromosome can be in trans, in cis, or even overlapping  When the members of such a set are found 'in cis' on the same chromosome, they may constitute a 'haplotype'.  When found 'in trans' at the same location on homologous chromosomes, they may constitute a 'single locus complement'.")
AnnotationAssertion(rdfs:label obo:GENO_0000954 "allele set"@en)
SubClassOf(obo:GENO_0000954 obo:GENO_0000660)

# Class: obo:GENO_0000955 (obsolete variant copy number complement)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000955 "A copy number complement' that has an abnormal number of members (e.g. more or less than two for an autosomal sequence in a diploid genome, as a result of deletion or duplication event(s).")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000955 "copy number variation"@en)
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000955 "Decided to implement copy number related classes at the sequence level, rather than the sequence feature level.")
AnnotationAssertion(rdfs:comment obo:GENO_0000955 "In a 'normal' diploid genome, the copy number complement for any feature (on a non-Y chromosome) contains two members.  A copy number variation occurs when a complement contains more or less than two members - as the result of deletion or duplication event(s).

Note that the 'copy number variation' class in GENO is related to but ontologically distinct form the SO 'copy_number_variation' class. The GENO class refers to a *set* of all copies of a sequence in a genome, where the number of members in the set is in conflict with the genome's normal ploidy (e.g. not two for a diploid genome). The SO class, which is defined as a sequence feature level concept and therefore represents a single continuous extent of sequence, refers to a single copy of duplicated (or deleted) sequence that comprises the set defined by the GENO CNV class.")
AnnotationAssertion(rdfs:label obo:GENO_0000955 "obsolete variant copy number complement"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000955 "true"^^xsd:boolean)

# Class: obo:GENO_0000956 (obsolete copy number complement)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000956 "A set of all features in a particular genome whose sequence aligns with a particular location on a reference genome.  Such features are typically on the scale of complete genes or larger.")
AnnotationAssertion(obo:IAO_0000231 obo:GENO_0000956 "Decided to implement copy number related classes at the sequence level, rather than the sequence feature level. Replaced by GENO:0000961.")
AnnotationAssertion(rdfs:comment obo:GENO_0000956 "1. Features described by 'copy number' are larger regions of sequence spanning one or more complete genes, or large chromosomal segment. Copies of these regions often become distributed across a genome at unknown locations. By contrast, short repeats, such as tri-nucelotide 'CAG' repeats in the Huntingtin gene, occur at defined locations (adjacent to the originating 'CAG' sequence), and can therefore be modeled as proper alleles.  

2. A copy number complement, like any sequence feature complement, is a set of features in a particular genome that meet some criterion. The criterion in this case is that their sequence maps to that of a particular location in a reference sequence.  So a copy number complement is the set of all features that share or align with a specified sequence defined on some reference. The sequence of member sequences need not exactly match that of the reference, as copies may accrue some alterations. What is important is that conceptually they represent exact or inexact copies of the reference sequence at a defining location.

3. In a 'normal' diploid genome, the copy number complement for any feature (on a non-Y chromosome) contains two members.  A copy number variation occurs when a complement contains more or less than two members - as the result of deletion or duplication event(s). In GENO, a 'copy number variation' refers to a copy number complement' that has an abnormal number of members.")
AnnotationAssertion(rdfs:label obo:GENO_0000956 "obsolete copy number complement"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:GENO_0000956 "true"^^xsd:boolean)

# Class: obo:GENO_0000960 (genomic sequence)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000960 "A biological sequence that is of genomic origin (i.e. carries sequence from the genome of a cell or organism).")
AnnotationAssertion(rdfs:comment obo:GENO_0000960 "A sequence being 'of genomic origin' here means only that it has been located to the genome of some organism by alignment with some reference genomic sequence. This is because the sequence was originally identified in, or artificially created to replicate, sequence from an organism's genome.")
AnnotationAssertion(rdfs:label obo:GENO_0000960 "genomic sequence"@en)
EquivalentClasses(obo:GENO_0000960 ObjectSomeValuesFrom(obo:GENO_0000251 obo:GENO_0000481))
SubClassOf(obo:GENO_0000960 obo:GENO_0000702)

# Class: obo:GENO_0000961 (copy number complement)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000961 "A set representing the complement of all copies of a particular biological sequence (typically at the scale of complete genes or larger) present in a particular genome.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000961 "The identity of a 'copy number complement' instance is determined by the sequence defining its members, and their count (the number of times this sequence appears in a particular genome). In reality the sequence of each copy may not be identical, given the tendency of large regions to accumulate subtle variations. What matters is that they share a common origin/alignment with a defining location in a reference genome.

We represent the notion of copy number at the \"sequence level\" (as opposed to the \"sequence feature level\")  because we are concerned only with the number of copies of a sequence in a genome, and not the location of the features bearing this sequence. Consider a copy number complement comprised of three copies of the sequence defined by the location Chr8 100000-200000 on a GRCh38.2 reference genome.  In one person's genome, this sequence may appear at its normal location on Chromosome 8, as well as in duplications on chromosomes 5, and 12. In another genome the sequence might appear three times as well, but on chromosomes 8, 9, and 15.  When representing causal associations linking copy number to disease, it is important that these are considered to be *the same* copy number complement - because what a curator associates with a disease is the presence of three copies of some sequence in a genome, independent of their location. The \"sequence level\" representation here supports this use case.  By contrast, a \"feature level\" representation, where identity of a copy number complement would be based on the identity of member *features*), does not - because we have two sets comprised of entirely different features (based on location being tied to their identity).")
AnnotationAssertion(rdfs:comment obo:GENO_0000961 "The count of how many of a particular sequences are found in a genome is the sequences 'copy number'. In diploid organisms, the normal copy number for sequences at most locations is 2 (a notable exception being those on the X-chromosome where normal copy number is 1). Variations in copy number occur if this count increases due to a duplication of the gene/region, or decreases due to a deletion of a gene/region. A driving use case for representing copy number is to support associations between variation in copy number of a particular sequence, and phenotypes or diseases that can result.

A 'complement' refers to an exhaustive collection of *all* objects that make up some well-defined set. Such a set may contain 0, 1, or more than one members. The notion of a complement is useful for defining many biologically-relevant sets of sequence features, such as 'copy number complements' representing the set of all copies of a particular sequence in a genome. 

The fact that we are counting how many copies of the same *sequence* exist in a genome here, as opposed to how many of the same *feature*, is what sets sequence-level concepts like 'copy number complement' apart from feature-level concepts like 'single locus complement'. To illustrate the difference, consider a duplication event that creates a new copy of the human APOE gene on a different chromosome. This creates an entirely new sequence feature at a distinct locus from that of the original APOE gene.  The 'copy number complement' for sequence defined by the APOE gene locus would have a count of three, as this sequence is present three times in the genome.  But the 'single locus complement' at the APOE gene locus would still have a count of two - because the duplicated copy is at a different location in the genome, and therefore does not represent a copy of the APOE locus.")
AnnotationAssertion(rdfs:comment obo:GENO_0000961 "The notion of a 'complement' is useful as a special case of a set, where the members necessarily comprise an exhaustive collection of *all* objects that make up some well-defined set. Here, a 'copy number complement' represents 'represents the set of *all* copies of a specified sequence in a particular genome. Note that sequences can be duplicated in a set (i.e. contain more than one member representing the same sequence). In the 'copy number complement' example, each set member is a copy of this same biological sequence.")
AnnotationAssertion(rdfs:label obo:GENO_0000961 "copy number complement"@en)
SubClassOf(obo:GENO_0000961 obo:GENO_0000872)

# Class: obo:GENO_0000962 (variant copy number complement)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000962 "A 'copy number complement' that has an abnormal number of members, as the result of deletion or duplication event(s).")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000962 "Note that this 'variant copy number complement' class in GENO is related to but ontologically distinct from the SO 'copy number variation' class. The GENO class refers to a *set* of all copies of a sequence in a genome, where the number of members in the set departs from the genome's normal ploidy of sequences at that location. The SO class, which is defined as a \"sequence feature level\" concept (and therefore represents a single continuous extent of sequence), refers to a sequence alteration such as a deletion or duplication that changes the copy number of the affected sequence, and would result in the presence of  a 'variant copy number complement'.  The presence of an SO 'copy number variation' suggests, but does not guarantee, the existence of a GENO 'variant copy number complement' (e.g. if a second balancing event has occurred).

For example, the deletion variant reported in the ClinVar record here (https://www.ncbi.nlm.nih.gov/clinvar/variation/21009/) is a copy number variation in the SO sense - a deletion that likely results in a GENO 'variant copy number complement'. Databases like ClinVar and dbVar type such alterations as 'copy number variants'.  But ClinVar also describes 'variant copy number complements' that may result from the presence of one or more SO 'copy number variations' in a given genome, e.g. here ( https://www.ncbi.nlm.nih.gov/clinvar/variation/221691/).  In this case, the submitter is asserting that a state in which only one copy of the defined sequence (Chr2: 73601366 - 73673202) exists in a genome is pathogenic for 'Premature ovarian failure'.  This requires more knowledge of the complete genomic state than an assertion that a specific SO 'copy number variation' (here, a deletion variant) is pathogenic for the condition - as here we know that not only is one copy deleted, but also that only one copy remains.")
AnnotationAssertion(rdfs:comment obo:GENO_0000962 "'Abnormal' is typically more or less than two members for an autosomal sequence in a diploid genome, and more or less than one member for a sequence in a non-homologous region of a sex-chromosome.")
AnnotationAssertion(rdfs:label obo:GENO_0000962 "variant copy number complement"@en)
SubClassOf(obo:GENO_0000962 obo:GENO_0000961)

# Class: obo:GENO_0000963 (functional copy complement)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000963 "A set representing the complement of all functional versions of a specified sequence (typically that of a gene) in a particular genome.")
AnnotationAssertion(obo:IAO_0000118 obo:GENO_0000963 "functional genetic dosage")
AnnotationAssertion(rdfs:comment obo:GENO_0000963 "A 'complement' refers to an exhaustive collection of *all* objects that make up some well-defined set. Such a set may contain 0, 1, or more than one members. The notion of a complement is useful for defining many biologically-relevant sets of sequence features, such as the set of all functional copies of a particular sequence in a genome. This is known as the 'functional copy number' or 'genetic dosage' of the sequence.

'Functional copies' of a sequence are those that exhibit normal activity and/or produce gene products that exhibit normal activity associated with the sequence. The count of functional copies of a gene is often referred to as its 'dosage'. In diploid organisms, the normal 'dosage' is 2 for autosomal genes/regions. Dosage increases if there is a duplication of a functional gene/region. Dosage decreases if there is either a deletion of a gene/region, or an inactivating mutation that eliminates gene function. This sets it apart from the notion of a 'copy number complement', which reflects how many copies of a sequence exist in a genome, regardless of their functionality. Addition of a non-functional allele of a gene will increase its copy number, but not increase its dosage.

As we saw for 'copy number complement', the defining sequence here is specified in terms of a location on a reference sequence - typically the location where a gene or set of genes resides.  But the criteria for membership in a 'functional' copy number complement require only that the feature can perform the functions associated with the gene or genes at the defining location.  A gene allele that varies by only one nucleotide from the wild-type gene may not qualify as functional if that alteration eliminates the activity of the allele.")
AnnotationAssertion(rdfs:label obo:GENO_0000963 "functional copy complement"@en)
SubClassOf(obo:GENO_0000963 obo:GENO_0000872)

# Class: obo:GENO_0000964 (mosaic)

AnnotationAssertion(rdfs:comment obo:GENO_0000964 "A clonal distribution in which an allele arose during embryogenesis and is present in a subset of tissues derived from some common developmental cell or tissue type.")
AnnotationAssertion(rdfs:label obo:GENO_0000964 "mosaic"@en)
SubClassOf(obo:GENO_0000964 obo:GENO_0000928)

# Class: obo:GENO_0000965 (sequence interval)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000965 "A pair of integers representing start and end position of a location on a sequence coordinate system.")
AnnotationAssertion(rdfs:label obo:GENO_0000965 "sequence interval")
SubClassOf(obo:GENO_0000965 obo:IAO_0000030)

# Class: obo:GENO_0000969 (chromosomal inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000969 "An inheritance pattern wherein the trait is determined by inheritance of extra, missing, or re-arranged chromosomes possibly together with environmental factors.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000969 "The Alliance of Genomic Resources")
AnnotationAssertion(rdfs:label obo:GENO_0000969 "chromosomal inheritance"@en)
SubClassOf(obo:GENO_0000969 obo:GENO_0000141)

# Class: obo:GENO_0000970 (chromosomal deletion inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000970 "An inheritance pattern wherein the trait is determined by inheritance of missing sections of one or more chromosomes, encompassing either 0 or multiple genes, possibly together with environmental factors.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000970 "Alliance of Genomic Resources")
AnnotationAssertion(rdfs:label obo:GENO_0000970 "chromosomal deletion inheritance"@en)
SubClassOf(obo:GENO_0000970 obo:GENO_0000969)

# Class: obo:GENO_0000971 (chromosomal duplication inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000971 "An inheritance pattern wherein the trait is determined by inheritance of duplicated sections of one or more chromosomes, encompassing either 0 or multiple genes, possibly together with environmental factors.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000971 "Alliance of Genomic Resources")
AnnotationAssertion(rdfs:label obo:GENO_0000971 "chromosomal duplication inheritance"@en)
SubClassOf(obo:GENO_0000971 obo:GENO_0000969)

# Class: obo:GENO_0000972 (chromosomal rearrangement inheritance)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000972 "An inheritance pattern wherein the trait is determined by inheritance of translocation or inversion of sections of one or more chromosomes, possibly together with environmental factors.")
AnnotationAssertion(obo:IAO_0000119 obo:GENO_0000972 "Alliance of Genomic Resources")
AnnotationAssertion(rdfs:label obo:GENO_0000972 "chromosomal rearrangement inheritance"@en)
SubClassOf(obo:GENO_0000972 obo:GENO_0000969)

# Class: obo:GENO_0000974 (inherited allele origin)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000974 "exploratory")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000974 "Describes an allele that is inherited from a parent.")
AnnotationAssertion(obo:IAO_0000116 obo:GENO_0000974 "Need to consider if/how this is different than 'germline allele origin'.

One scenario that potentially distinguishes them is the case where a de novo mutation occurs in the germ cells of a parent, and is passed to offspring.  This does not qualify as 'germline allele origin', as currently defined.  But it would qualify as 'inherited'")
AnnotationAssertion(rdfs:label obo:GENO_0000974 "inherited allele origin"@en)
SubClassOf(obo:GENO_0000974 obo:GENO_0000877)

# Class: obo:GENO_0000975 (uniparental allele origin)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000975 "exploratory")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000975 "Describes an allele that is part of an allelic complement where both alleles are inherited from the same parent.")
AnnotationAssertion(rdfs:comment obo:GENO_0000975 "From Wikidedia: Uniparental inheritance is a non-mendelian form of inheritance that consists of the transmission of genotypes from one parental type to all progeny. That is, all the genes in offspring will originate from only the mother or only the father. This phenomenon is most commonly observed in eukaryotic organelles such as mitochondria and chloroplasts. 
https://en.wikipedia.org/wiki/Uniparental_inheritance")
AnnotationAssertion(rdfs:label obo:GENO_0000975 "uniparental allele origin"@en)
SubClassOf(obo:GENO_0000975 obo:GENO_0000974)

# Class: obo:GENO_0000976 (biparental allele origin)

AnnotationAssertion(obo:IAO_0000114 obo:GENO_0000976 "exploratory")
AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000976 "Describes an allele that is part of an allelic complement where one allele is maternally inherited  and other paternally inherited.")
AnnotationAssertion(rdfs:comment obo:GENO_0000976 "Biparental inheritance of alleles is typical of normal mendelian inheritance, where offspring inherit a maternal and a paternal copies of a given gene.")
AnnotationAssertion(rdfs:label obo:GENO_0000976 "biparental allele origin"@en)
SubClassOf(obo:GENO_0000976 obo:GENO_0000974)

# Class: obo:GENO_0000978 (nullizygous)

AnnotationAssertion(obo:IAO_0000115 obo:GENO_0000978 "A disomic zygosity quality inhering in a 'single locus complement' that is comprised of two non-functional copies of a gene. Loss of function may result from the gene being entirely missing via a deletion, or mutated in a way that eliminates its function.")
AnnotationAssertion(oboInOwl:hasNarrowSynonym obo:GENO_0000978 "homozygous null")
AnnotationAssertion(rdfs:label obo:GENO_0000978 "nullizygous"@en)
SubClassOf(obo:GENO_0000978 obo:GENO_0000391)

# Class: obo:GO_0032502 (developmental process)

AnnotationAssertion(obo:IAO_0000115 obo:GO_0032502 "A biological process whose specific outcome is the progression of an integrated living unit: an anatomical structure (which may be a subcellular structure, cell, tissue, or organ), or organism over time from an initial condition to a later condition. [database_cross_reference: GOC:isa_complete]")
AnnotationAssertion(rdfs:label obo:GO_0032502 "developmental process"@en)
SubClassOf(obo:GO_0032502 obo:GENO_0000351)

# Class: obo:HP_0000118 (human phenotypic abnormality)

AnnotationAssertion(rdfs:comment obo:HP_0000118 "pulling in HP 'phenotypic abnormality' root here"^^xsd:string)
AnnotationAssertion(rdfs:label obo:HP_0000118 "human phenotypic abnormality"^^xsd:string)
SubClassOf(obo:HP_0000118 obo:UPHENO_0001001)

# Class: obo:HsapDv_0000000 (human life cycle stage)

AnnotationAssertion(obo:IAO_0000116 obo:HsapDv_0000000 "Stub class to serve as root of hierarchy for imports of human  developmental stages from the Human Developmental Stages Ontology.")
AnnotationAssertion(obo:IAO_0000119 obo:HsapDv_0000000 "A spatiotemporal region encompassing some part of the life cycle of an organism.")
AnnotationAssertion(rdfs:label obo:HsapDv_0000000 "human life cycle stage"@en)
SubClassOf(obo:HsapDv_0000000 obo:GENO_0000351)

# Class: obo:IAO_0000030 (information content entity)

AnnotationAssertion(obo:IAO_0000111 obo:IAO_0000030 "information content entity"@en)
AnnotationAssertion(obo:IAO_0000112 obo:IAO_0000030 "Examples of information content entites include journal articles, data, graphical layouts, and graphs."@en)
AnnotationAssertion(obo:IAO_0000114 obo:IAO_0000030 obo:IAO_0000125)
AnnotationAssertion(obo:IAO_0000115 obo:IAO_0000030 "an information content entity is an entity that is generically dependent on some artifact and stands in relation of aboutness to some entity"@en)
AnnotationAssertion(obo:IAO_0000116 obo:IAO_0000030 "information_content_entity 'is_encoded_in' some digital_entity in obi before split (040907). information_content_entity 'is_encoded_in' some physical_document in obi before split (040907).

Previous. An information content entity is a non-realizable information entity that 'is encoded in' some digital or physical entity."@en)
AnnotationAssertion(obo:IAO_0000117 obo:IAO_0000030 "PERSON: Chris Stoeckert"@en)
AnnotationAssertion(obo:IAO_0000119 obo:IAO_0000030 "OBI_0000142"@en)
AnnotationAssertion(rdfs:label obo:IAO_0000030 "information content entity")
AnnotationAssertion(rdfs:label obo:IAO_0000030 "information content entity"@en)
SubClassOf(obo:IAO_0000030 obo:BFO_0000031)

# Class: obo:IAO_0000102 (data about an ontology part)

AnnotationAssertion(obo:IAO_0000118 obo:IAO_0000102 "ontology metadata")
AnnotationAssertion(rdfs:label obo:IAO_0000102 "data about an ontology part")
SubClassOf(obo:IAO_0000102 obo:IAO_0000030)

# Class: obo:MP_0000001 (mammalian phenotype)

AnnotationAssertion(rdfs:comment obo:MP_0000001 "where to place this depends on if we take the organismal view or the quality centric view.")
AnnotationAssertion(rdfs:label obo:MP_0000001 "mammalian phenotype"^^xsd:string)
SubClassOf(obo:MP_0000001 obo:UPHENO_0001001)

# Class: obo:NCBITaxon_10090 (Mus musculus)

AnnotationAssertion(rdfs:label obo:NCBITaxon_10090 "Mus musculus")
SubClassOf(obo:NCBITaxon_10090 obo:OBI_0100026)

# Class: obo:NCBITaxon_10239 (Viruses)

AnnotationAssertion(rdfs:comment obo:NCBITaxon_10239 "Stub class to serve as root of hierarchy for imports of virus types from relevant ontologies or terminologies.")
AnnotationAssertion(rdfs:label obo:NCBITaxon_10239 "Viruses")
SubClassOf(obo:NCBITaxon_10239 obo:OBI_0100026)

# Class: obo:NCBITaxon_7955 (Danio rerio)

AnnotationAssertion(rdfs:label obo:NCBITaxon_7955 "Danio rerio")
SubClassOf(obo:NCBITaxon_7955 obo:OBI_0100026)

# Class: obo:NCBITaxon_8090 (Oryzias latipes)

AnnotationAssertion(rdfs:label obo:NCBITaxon_8090 "Oryzias latipes")
SubClassOf(obo:NCBITaxon_8090 obo:OBI_0100026)

# Class: obo:NCBITaxon_9606 (Homo sapiens)

AnnotationAssertion(rdfs:label obo:NCBITaxon_9606 "Homo sapiens")
SubClassOf(obo:NCBITaxon_9606 obo:OBI_0100026)

# Class: obo:OBI_0000011 (planned process)

AnnotationAssertion(obo:IAO_0000115 obo:OBI_0000011 "A processual entity that realizes a plan which is the concretization of a plan specification.")
AnnotationAssertion(obo:IAO_0000116 obo:OBI_0000011 "Stub class to serve as root of hierarchy for experimental techniques and processes, defined in GENO or imported from ontologies such as OBI and ERO.")
AnnotationAssertion(rdfs:label obo:OBI_0000011 "planned process")
SubClassOf(obo:OBI_0000011 obo:BFO_0000015)

# Class: obo:OBI_0000086 (reagent role)

AnnotationAssertion(rdfs:label obo:OBI_0000086 "reagent role"@en)
SubClassOf(obo:OBI_0000086 obo:BFO_0000023)

# Class: obo:OBI_0000181 (population)

AnnotationAssertion(obo:IAO_0000115 obo:OBI_0000181 "a population is a collection of individuals from the same taxonomic class living, counted or sampled at a particular site or in a particular area")
AnnotationAssertion(rdfs:label obo:OBI_0000181 "population"@en)
SubClassOf(obo:OBI_0000181 obo:GENO_0000113)

# Class: obo:OBI_0100026 (organism)

AnnotationAssertion(obo:IAO_0000116 obo:OBI_0100026 "Stub class to serve as root of hierarchy for imports from NCBI Taxonomy.")
AnnotationAssertion(rdfs:label obo:OBI_0100026 "organism")
SubClassOf(obo:OBI_0100026 obo:BFO_0000040)

# Class: obo:PATO_0000016 (obsolete color brightness)

AnnotationAssertion(obo:IAO_0000116 obo:PATO_0000016 "'Value' label chosen here according to http://www.uwgb.edu/heuerc/2D/ColorTerms.html")
AnnotationAssertion(obo:IAO_0000116 obo:PATO_0000016 "Was parent of chromosomal band intensity before moving this class to live as a sequence feature attribute.")
AnnotationAssertion(obo:IAO_0000118 obo:PATO_0000016 "color value")
AnnotationAssertion(rdfs:label obo:PATO_0000016 "obsolete color brightness"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:PATO_0000016 "true"^^xsd:boolean)

# Class: obo:PATO_0000383 (female)

AnnotationAssertion(rdfs:label obo:PATO_0000383 "female")
SubClassOf(obo:PATO_0000383 obo:PATO_0001894)

# Class: obo:PATO_0000384 (male)

AnnotationAssertion(rdfs:label obo:PATO_0000384 "male")
SubClassOf(obo:PATO_0000384 obo:PATO_0001894)

# Class: obo:PATO_0001894 (phenotypic sex)

AnnotationAssertion(rdfs:label obo:PATO_0001894 "phenotypic sex"@en)
SubClassOf(obo:PATO_0001894 obo:BFO_0000019)

# Class: obo:PCO_0000000 (collection of organisms)

AnnotationAssertion(obo:IAO_0000115 obo:PCO_0000000 "A material entity that consists of two or more organisms, viruses, or viroids.")
AnnotationAssertion(rdfs:comment obo:PCO_0000000 "A group of organisms of the same taxonomic group grouped together in virtue of their sharing some commonality (either an inherent attribute or an externally assigned role).")
AnnotationAssertion(rdfs:label obo:PCO_0000000 "collection of organisms")
SubClassOf(obo:PCO_0000000 obo:BFO_0000040)
SubClassOf(obo:PCO_0000000 ObjectSomeValuesFrom(obo:RO_0002351 obo:OBI_0100026))

# Class: obo:PCO_0000020 (family)

AnnotationAssertion(obo:IAO_0000115 obo:PCO_0000020 "A domestic group, or a number of domestic groups linked through descent (demonstrated or stipulated) from a common ancestor, marriage, or adoption.")
AnnotationAssertion(rdfs:label obo:PCO_0000020 "family")
SubClassOf(obo:PCO_0000020 obo:PCO_0000000)

# Class: obo:SO_0000034 (morpholino_oligo)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000034 "Morpholino oligos are synthesized from four different Morpholino subunits, each of which contains one of the four genetic bases (A, C, G, T) linked to a 6-membered morpholine ring. Eighteen to 25 subunits of these four subunit types are joined in a specific order by non-ionic phosphorodiamidate intersubunit linkages to give a Morpholino.")
AnnotationAssertion(rdfs:label obo:SO_0000034 "morpholino_oligo")
SubClassOf(obo:SO_0000034 obo:GENO_0000533)

# Class: obo:SO_0000105 (chromosome arm)

AnnotationAssertion(obo:IAO_0000112 obo:SO_0000105 "The descriptor 1p22.3 =  chromosome 1, short arm, region 2, band 2, sub-band 3.  This is read as \"one q two-two point three\", not \"one  q twenty-two point three\".")
AnnotationAssertion(obo:IAO_0000115 obo:SO_0000105 "A region of the chromosome between the centromere and the telomere. Human chromosomes have two arms, the p arm (short) and the q arm (long) which are separated from each other by the centromere.")
AnnotationAssertion(obo:IAO_0000116 obo:SO_0000105 "Formerly http://purl.obolibrary.org/obo/GENO_0000613, replaced by SO term.")
AnnotationAssertion(obo:IAO_0000119 obo:SO_0000105 "http://ghr.nlm.nih.gov/handbook/howgeneswork/genelocation and http://people.rit.edu/rhrsbi/GeneticsPages/Handouts/ChromosomeNomenclature.pdf, both of which define the nomenclature for the banding hierarchy we use here:
chromosome > arm > region > band > sub-band

Note that an alternate nomenclature for this hierarchy is here (http://www.ncbi.nlm.nih.gov/Class/MLACourse/Original8Hour/Genetics/chrombanding.html):
chromosome > arm > band > sub-band > sub-sub-band")
AnnotationAssertion(rdfs:label obo:SO_0000105 "chromosome arm"@en)
SubClassOf(obo:SO_0000105 obo:SO_0000830)
SubClassOf(obo:SO_0000105 ObjectSomeValuesFrom(obo:BFO_0000050 obo:SO_0000830))

# Class: obo:SO_0000110 (sequence_feature)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000110 "Any extent of continuous biological sequence.")
AnnotationAssertion(obo:IAO_0000116 obo:SO_0000110 "GENO defines three levels of sequence-related artifacts, which are distinguished by their identity criteria.
1. 'Biological sequence' identity is dependent only on the ordering of units that comprise the sequence.
2. 'Sequence feature' identity is dependent on its sequence and the genomic location of the sequence (this is consistent with the definition of 'sequence feature' in the Sequence Ontology).
3. 'Qualified sequence feature' identity is additionally dependent on some aspect of the physical context of the genetic material in which the feature is concretized. This third criteria is extrinsic to its sequence and its genomic location. For example, the feature's physical concretization being targeted by a gene knockdown reagent in a cell (e.g. the zebrafish Shha gene as targeted by the morpholino 'Shha-MO1'), or its being transiently expressed from a recombinant expression construct (e.g. the human SHH gene as expressed in a  mouse Shh knock-out cell line), or its having been epigenetically modified in a way that alters its expression level or pattern (e.g. the human SHH gene with a specific methylation pattern).")
AnnotationAssertion(rdfs:comment obo:SO_0000110 "A sequence feature is an extent of 'located' biological sequence, whose identity is determined by both its inherent sequence (ordering of monomeric units) and its position (start and end coordinates based on alignment with some reference). By contrast, 'biological sequences' are identified and distinguished only by their inehrent sequence, and not their position.  Accordingly, the 'ATG' start codon in the coding DNA sequence of the human AKT gene is the same 'sequence' as the 'ATG' start codon in the human SHH gene, but these represent two distinct 'sequence features' in virtue of their different positions in the genome.")
AnnotationAssertion(rdfs:label obo:SO_0000110 "sequence_feature")
SubClassOf(obo:SO_0000110 obo:GENO_0000701)
SubClassOf(Annotation(obo:GENO_0000834 "true"^^xsd:boolean) Annotation(rdfs:comment "Formalizes the first identity criteria for a sequence feature of its sequence.") obo:SO_0000110 ObjectSomeValuesFrom(obo:GENO_0000239 obo:GENO_0000702))
SubClassOf(Annotation(obo:GENO_0000834 "true"^^xsd:boolean) Annotation(rdfs:comment "Formalizes the second identify criteiria for a sequence feature of its genomic position. We use the FALDO model to represent positional information, which links features to positional information through an instance of a Region class that represents the mapping of the feature onto some reference sequence. (But features can also be linked to Positions directly through the location property).") obo:SO_0000110 ObjectSomeValuesFrom(obo:GENO_0000903 obo:GENO_0000815))

# Class: obo:SO_0000143 (obsolete assembly_component)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000143 "A region of known length which may be used to manufacture a longer region.")
AnnotationAssertion(rdfs:label obo:SO_0000143 "obsolete assembly_component"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:SO_0000143 "true"^^xsd:boolean)

# Class: obo:SO_0000149 (obsolete contig)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000149 "A contiguous sequence derived from sequence assembly. Has no gaps, but may contain N's from unavailable bases.")
AnnotationAssertion(rdfs:label obo:SO_0000149 "obsolete contig"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:SO_0000149 "true"^^xsd:boolean)

# Class: obo:SO_0000159 (deletion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000159 "The point at which one or more contiguous nucleotides were excised."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000159 "deleted_sequence"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000159 "nucleotide deletion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000159 "nucleotide_deletion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0000159 obo:so.owl)
AnnotationAssertion(obo:IAO_alt_id obo:SO_0000159 "SO:1000033"^^xsd:string)
AnnotationAssertion(obo:IAO_id obo:SO_0000159 "SO:0000159"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_0000159 "SOFA"^^xsd:string)
AnnotationAssertion(obo:IAO_xref obo:SO_0000159 "http://en.wikipedia.org/wiki/Nucleotide_deletion"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0000159 "deletion"^^xsd:string)
SubClassOf(obo:SO_0000159 obo:SO_0001059)
SubClassOf(obo:SO_0000159 DataHasValue(obo:GENO_0000678 "0"^^xsd:integer))

# Class: obo:SO_0000165 (enhancer)

AnnotationAssertion(rdfs:label obo:SO_0000165 "enhancer")
SubClassOf(obo:SO_0000165 obo:SO_0005836)

# Class: obo:SO_0000167 (promoter)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000167 "A regulatory_region composed of the TSS(s) and binding sites for TF_complexes of the basal transcription machinery.")
AnnotationAssertion(rdfs:label obo:SO_0000167 "promoter")
SubClassOf(obo:SO_0000167 obo:SO_0005836)

# Class: obo:SO_0000199 (translocation)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000199 "A region of nucleotide sequence that has translocated to a new position."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000199 "transchr"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000199 "translocated sequence"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0000199 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_0000199 "SO:0000199"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_0000199 "DBVAR"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0000199 "translocation"^^xsd:string)
SubClassOf(obo:SO_0000199 obo:SO_0001059)

# Class: obo:SO_0000207 (simple_sequence_length_variation)

AnnotationAssertion(obo:IAO_0000118 obo:SO_0000207 "SSLP"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000207 "simple sequence length polymorphism"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000207 "simple sequence length variation"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0000207 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_0000207 "SO:0000207"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0000207 "simple_sequence_length_variation"^^xsd:string)
SubClassOf(obo:SO_0000207 obo:SO_0000248)

# Class: obo:SO_0000248 (sequence_length_variation)

AnnotationAssertion(obo:IAO_0000118 obo:SO_0000248 "sequence length variation"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0000248 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_0000248 "SO:0000248"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0000248 "sequence_length_variation"^^xsd:string)
SubClassOf(obo:SO_0000248 obo:SO_1000002)

# Class: obo:SO_0000281 (engineered_foreign_gene)

AnnotationAssertion(obo:IAO_0000116 obo:SO_0000281 "See here for a list of engineered regions in ZFIN: http://zfin.org/cgi-bin/webdriver?MIval=aa-markerselect.apg&marker_type=REGION&query_results=t&compare=contains&WINSIZE=25.

Includes things like loxP sites, inducible promoters, ires elements, etc.")
AnnotationAssertion(rdfs:label obo:SO_0000281 "engineered_foreign_gene")
SubClassOf(obo:SO_0000281 obo:SO_0000704)
SubClassOf(obo:SO_0000281 ObjectSomeValuesFrom(obo:GENO_0000207 obo:SO_0000783))

# Class: obo:SO_0000289 (microsatellite)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000289 "A repeat_region containing repeat_units of 2 to 10 bp repeated in tandem.")
AnnotationAssertion(obo:IAO_0000119 obo:SO_0000289 "http://en.wikipedia.org/wiki/Microsatellite_%28genetics%29")
AnnotationAssertion(rdfs:comment obo:SO_0000289 "A defined feature that includes any type of VNTR or SSLP locus.")
AnnotationAssertion(rdfs:label obo:SO_0000289 "microsatellite")
SubClassOf(obo:SO_0000289 obo:GENO_0000481)

# Class: obo:SO_0000337 (RNAi_reagent)

AnnotationAssertion(rdfs:label obo:SO_0000337 "RNAi_reagent"@en)
SubClassOf(obo:SO_0000337 obo:GENO_0000533)

# Class: obo:SO_0000340 (chromosome)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000340 "Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication.")
AnnotationAssertion(rdfs:comment obo:SO_0000340 "A complete chromosome sequence.")
AnnotationAssertion(rdfs:label obo:SO_0000340 "chromosome")
SubClassOf(obo:SO_0000340 obo:GENO_0000481)

# Class: obo:SO_0000341 (chromosome band)

AnnotationAssertion(obo:IAO_0000112 obo:SO_0000341 "The descriptor 1p22.3 =  chromosome 1, short arm, region 2, band 2, sub-band 3.  This is read as \"one q two-two point three\", not \"one  q twenty-two point three\".")
AnnotationAssertion(obo:IAO_0000115 obo:SO_0000341 "A cytologically distinguishable feature of a chromosome, often made visible by staining, and usually alternating light and dark.")
AnnotationAssertion(obo:IAO_0000119 obo:SO_0000341 "http://ghr.nlm.nih.gov/handbook/howgeneswork/genelocation and http://people.rit.edu/rhrsbi/GeneticsPages/Handouts/ChromosomeNomenclature.pdf, both of which define the nomenclature for the banding hierarchy we use here:
chromosome > arm > region > band > sub-band

Note that an alternate nomenclature for this hierarchy is here (http://www.ncbi.nlm.nih.gov/Class/MLACourse/Original8Hour/Genetics/chrombanding.html):
chromosome > arm > band > sub-band > sub-sub-band
")
AnnotationAssertion(rdfs:comment obo:SO_0000341 "\"Band' is a term of convenience in order to hierarchically organize morphologically defined chromosome features: chromosome > arm > region > band > sub-band.")
AnnotationAssertion(rdfs:label obo:SO_0000341 "chromosome band"@en)
SubClassOf(obo:SO_0000341 obo:SO_0000830)
SubClassOf(obo:SO_0000341 ObjectSomeValuesFrom(obo:BFO_0000050 obo:GENO_0000614))
SubClassOf(obo:SO_0000341 ObjectSomeValuesFrom(obo:GENO_0000207 obo:GENO_0000618))

# Class: obo:SO_0000577 (centromere)

AnnotationAssertion(rdfs:label obo:SO_0000577 "centromere"@en)
SubClassOf(obo:SO_0000577 obo:SO_0000830)

# Class: obo:SO_0000637 (obsolete engineered_plasmid)

AnnotationAssertion(obo:IAO_0000116 obo:SO_0000637 "Obsoleted as we didnt want to commit to constructs being plasmids - but rather wanted a classification of more general types of engineered regions used to replicate and deliver sequence to target cells/genomes. Replaced by GENO:0000856 ! engineered genetic construct.")
AnnotationAssertion(rdfs:label obo:SO_0000637 "obsolete engineered_plasmid"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:SO_0000637 "true"^^xsd:boolean)

# Class: obo:SO_0000667 (insertion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000667 "The sequence of one or more nucleotides added between two adjacent nucleotides in the sequence."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000667 "insertion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000667 "nucleotide insertion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000667 "nucleotide_insertion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0000667 obo:so.owl)
AnnotationAssertion(obo:IAO_alt_id obo:SO_0000667 "SO:1000034"^^xsd:string)
AnnotationAssertion(obo:IAO_id obo:SO_0000667 "SO:0000667"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_0000667 "DBVAR"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_0000667 "SOFA"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0000667 "insertion"^^xsd:string)
SubClassOf(obo:SO_0000667 obo:SO_0001059)

# Class: obo:SO_0000694 (SNP)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000694 "SNPs are single base pair positions in genomic DNA at which different sequence alternatives exist in normal individuals in some population(s), wherein the least frequent variant has an abundance of 1% or greater."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000694 "single nucleotide polymorphism"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0000694 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_0000694 "SO:0000694"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_0000694 "SOFA"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0000694 "SNP"^^xsd:string)
SubClassOf(obo:SO_0000694 obo:SO_0001483)

# Class: obo:SO_0000699 (junction)

AnnotationAssertion(rdfs:comment obo:SO_0000699 "A junction is a boundary between regions. A boundary has an extent of zero.")
AnnotationAssertion(rdfs:label obo:SO_0000699 "junction"@en)
SubClassOf(obo:SO_0000699 obo:SO_0000110)

# Class: obo:SO_0000704 (gene)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000704 "A region (or regions) that includes all of the sequence elements necessary to encode a functional transcript. A gene may include regulatory regions, transcribed regions and/or other functional sequence regions.")
AnnotationAssertion(obo:IAO_0000116 obo:SO_0000704 "Regarding the distinction between a 'gene' and a 'gene allele': 
Every zebrafish genome contains a 'gene allele' for every zebrafish gene. Many will be 'wild-type' or at least functional gene alleles. But some may be alleles that are mutated or truncated so as to lack functionality.  According to current SO criteria defining genes, a 'gene' no longer exists in the case of a non-functional or deleted variant. But the 'gene allele' does exist -  and its extent is that of the remaining/altered sequence based on alignment with a  reference gene.  Even for completely deleted genes, an allele of the gene exists (and here is equivalent to the junction corresponding to the where gene would live based on a reference alignment).")
AnnotationAssertion(rdfs:comment obo:SO_0000704 "A gene is any 'gene allele' that produces a functional transcript (ie one capable of translation into a protein, or independent functioning as an RNA), when encoded in the genome of some cell or virion.")
AnnotationAssertion(rdfs:label obo:SO_0000704 "gene")
SubClassOf(obo:SO_0000704 obo:GENO_0000481)

# Class: obo:SO_0000771 (QTL)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000771 "A quantitative trait locus (QTL) is a polymorphic locus which contains alleles that differentially affect the expression of a continuously distributed phenotypic trait. Usually it is a marker described by statistical association to quantitative variation in the particular phenotypic trait that is thought to be controlled by the cumulative action of alleles at multiple loci.")
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000771 "quantitative trait locus")
AnnotationAssertion(rdfs:label obo:SO_0000771 "QTL")
SubClassOf(obo:SO_0000771 obo:GENO_0000481)

# Class: obo:SO_0000783 (engineered)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000783 "An attribute to describe a region that was modified in vitro.")
AnnotationAssertion(rdfs:label obo:SO_0000783 "engineered")
SubClassOf(obo:SO_0000783 obo:GENO_0000788)

# Class: obo:SO_0000804 (engineered_region)

AnnotationAssertion(obo:IAO_0000118 obo:SO_0000804 "construct")
AnnotationAssertion(rdfs:label obo:SO_0000804 "engineered_region"@en)
EquivalentClasses(obo:SO_0000804 ObjectIntersectionOf(obo:SO_0000110 ObjectSomeValuesFrom(obo:GENO_0000207 obo:SO_0000783)))

# Class: obo:SO_0000830 (chromosome part)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000830 "An extended region of sequence corresponding to a defined feature that is a proper part of a chromosome, e.g. a chromosomal 'arm', 'region', or 'band'.")
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000830 "chromosomal feature")
AnnotationAssertion(obo:IAO_0000118 obo:SO_0000830 "gross chromosomal part")
AnnotationAssertion(rdfs:label obo:SO_0000830 "chromosome part")
EquivalentClasses(obo:SO_0000830 ObjectIntersectionOf(obo:GENO_0000481 ObjectSomeValuesFrom(obo:GENO_0000248 obo:SO_0000340)))

# Class: obo:SO_0000902 (transgene)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0000902 "A gene that has been transferred naturally or by any of a number of genetic engineering techniques into a cell or organism where it is foreign (i.e. does not belong to the host genome).")
AnnotationAssertion(rdfs:comment obo:SO_0000902 "On the relationship between 'transgenic insertions', 'transgenes', and 'alleles'
Transgenic insertions are sequence alterations comprised of foreign/exogenous sequence. This sequence can be from the same or different species  as the host cell or genome - it is exogenous in virtue of it being additional sequence inserted into the original host genome. A given transgenic insertion may create one or more transgenes when introduced into a host genome. The extent of a transgene is spans all features needed to drive its expression in the host genome.  In most cases a transgenic insertion completely contains one or more transgenes that are fully competent to drive expression in the host genome.  But in some cases, a transgenic insertion may carry only part of the final transgene it creates - which requires additional endogenous sequences in the vicinity of its insertion site to complete a functional gene (e.g. this is the case for enhancer traps or gene  traps) to complete.

In addition to the transgenes they create upon genomic integration, transgenic insertions can create variant alleles by disrupting a known endogenous gene/locus. Variant alleles are versions of a particular genomic features (typically genes), that are altered in their sequence relative to some reference.  An insertion that disrupts an endogenous gene would be considered a 'sequence alteration' (sensu SO) which creates a 'variant gene allele'. From the perspective of this disrupted gene, the origin or transgenic nature of this insertion is irrelevant - what matters here is that the gene's sequence has been altered to create an allele.  

For the purposes of modeling, any transgene(s) created when an endogenous gene is interrupted by an insertion is considered/modeled separately from the allele of the endogenous gene that is created by the insertion.  The transgenic insertion, which is simply a sequence alteration in the host genome, is then linked to any transgenes that it contributes to or overlaps with or contains.  The model of the Flybase example HERE illustrates this approach.")
AnnotationAssertion(rdfs:comment obo:SO_0000902 "Transgenes can exist as integrated into the host genome, or extra-chromosomally on replicons or transiently carried/expressed vectors.  What matters is that they are active in the context of a foreign biological system (typically a cell or organism).

Note that transgenes as defined here are not necessarily from a different taxon than that of the host genome.  For example, a Mus musculus gene over-expressed from a chromosomally-integrated expression construct in a Mus musculus genome qualifies as a transgene because it is exogenous to the host genome.")
AnnotationAssertion(rdfs:label obo:SO_0000902 "transgene"@en)
SubClassOf(obo:SO_0000902 obo:SO_0000704)

# Class: obo:SO_0001013 (MNP)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001013 "A multiple nucleotide polymorphism with alleles of common length > 1, for example AAA/TTT."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001013 "multiple nucleotide polymorphism"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0001013 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_0001013 "SO:0001013"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0001013 "MNP"^^xsd:string)
SubClassOf(obo:SO_0001013 obo:SO_1000002)

# Class: obo:SO_0001019 (copy_number_variation)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001019 "A variation that increases or decreases the copy number of a given region."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001019 "CNP"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001019 "CNV"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001019 "copy number polymorphism"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001019 "copy number variation"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0001019 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_0001019 "SO:0001019"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_0001019 "SOFA"^^xsd:string)
AnnotationAssertion(obo:IAO_xref obo:SO_0001019 "http://en.wikipedia.org/wiki/Copy_number_variation"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0001019 "copy_number_variation"^^xsd:string)
SubClassOf(obo:SO_0001019 obo:SO_0001059)

# Class: obo:SO_0001026 (genome)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001026 "A collection of sequence features (typically a collection of chromosomes) that covers the sum genetic material within a cell or virion (where 'genetic material' refers to any nucleic acid that is part of a cell or virion and has been inherited from an ancestor cell or virion, and/or can be replicated and inherited by its progeny)")
AnnotationAssertion(obo:IAO_0000116 obo:SO_0001026 "Genotype vs Genome in GENO: An (genomic) genotype is an information artifact representing a shorthand syntax for specifying what is known about variation in a genome sequence.  This syntax has reference and variant components - a 'reference genome' and 'genomic variation complement' - that must be operated on to resolve a final genome sequence (i.e. substituting all sequences specified by the 'genomic variation complement' for the corresponding sequences in the 'reference genome'). So, while the total sequence content represented in a genotype may be greater than that in a genome, the intended resolution of these sequences is to arrive at a single genome sequence.")
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001026 "'genome sequence'")
AnnotationAssertion(rdfs:comment obo:SO_0001026 "A genome is considered the complement of all heritable sequence features in a given cell or organism (chromosomal or extrachromosomal). This is typically a collection of >1 sequence molecules (e.g. chromosomes), but in some organisms (e.g. bacteria) it may be a single sequence macromolecule (e.g. a circular plasmid). For this reason 'genome' classifies under 'sequence feature complement'.")
AnnotationAssertion(rdfs:label obo:SO_0001026 "genome")
SubClassOf(obo:SO_0001026 obo:GENO_0000660)
SubClassOf(obo:SO_0001026 ObjectSomeValuesFrom(obo:RO_0002162 obo:OBI_0100026))

# Class: obo:SO_0001059 (sequence_alteration)

AnnotationAssertion(obo:IAO_0000112 obo:SO_0001059 "A few examples highlighting the distinction of 'sequence alterations' from their parent 'variant allele': 

1. Consider NM_000059.3(BRCA2):c.631G>A variation in the BRCA2 gene.  This mutation of a single nucleotide creates a gene allele whose extent is that of the entire BRCA2 gene.  This version of the full BRCA2 gene is a 'variant allele', while the extent of sequence spanning just the single altered base is a 'sequence alteration'.  See https://www.ncbi.nlm.nih.gov/snp/80358871.

2. Consider the NM_000059.3(BRCA2):c.132_133ins8 variation in the BRCA2 gene.  This 8 bp insertion creates a gene allele whose extent is that of the entire BRCA2 gene. This version of the full BRCA2 gene is a 'variant allele', while the extent of sequence spanning just the 8 bp insertion is a 'sequence alteration'.   See https://www.ncbi.nlm.nih.gov/snp/483353112.

3. Consider the NM_000059.3(BRCA2):c.22_23delAG variation in the BRCA2 gene.  This 2 bp deletion creates a gene allele whose extent is that of the entire BRCA2 gene. This version of the full BRCA2 gene is a 'variant allele', while the junction where the deletion occured is a 'sequence alteration' with an extent of zero.  See https://www.ncbi.nlm.nih.gov/snp/483353112.")
AnnotationAssertion(obo:IAO_0000115 obo:SO_0001059 "A sequence_alteration is a sequence_feature whose extent is the deviation from another sequence."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001059 "sequence variation"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0001059 obo:so.owl)
AnnotationAssertion(obo:IAO_alt_id obo:SO_0001059 "SO:1000004"^^xsd:string)
AnnotationAssertion(obo:IAO_alt_id obo:SO_0001059 "SO:1000007"^^xsd:string)
AnnotationAssertion(obo:IAO_id obo:SO_0001059 "SO:0001059"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_0001059 "SOFA"^^xsd:string)
AnnotationAssertion(rdfs:comment obo:SO_0001059 "1. A 'sequence alteration' is an allele whose sequence deviates in its entirety from that of other features found at the same genomic location (i.e. it deviates along its entire extent). In this sense, 'sequence alterations' represent the minimal extent an allele can take - i.e. that which is variable with some other feature along its entire sequence). An example is a SNP or insertion. 

Alleles whose extent goes beyond the specific sequence that is known to be variable are not sequence alterations. These are alleles that represent alternate versions of some larger, named feature. The classic example here is a 'gene allele', which spans the extent of an entire gene, and contains one or more sequence alterations (regions known to vary) as part.

2. Sequence alterations are not necessarily 'variant' in the sense defined in GENO (i.e. being 'variant with' some reference sequence).  In any comparison of alleles at a particular location, the choice of a 'reference' is context-dependent - as comparisons in other contexts might consider a different allele to be the reference. So while sequence alterations are usually considered 'variant' in the context in which they are considered, this variant status may not hold at all times. For this reason, the 'sequence alteration' class is not made an rdfs:subClassOf 'variant allele'. 

For a particular instance of a sequence alteration, howver, we may in some cases be able to rdf:type it as a 'varaint allele' and a 'sequence alteration', in situations where we can be confident that the feature will *never* be considered a reference. For example, experimentally generated mutations in model organism genes that are created expressly to vary from an established reference.

3. Note that we consider novel features gained in a genome to be sequence alterations, including aneusomic chromosomes gained through a non-disjunction event during replication, or extrachromosomal replicons that become part of the heritable genome of a cell or organism.")
AnnotationAssertion(rdfs:label obo:SO_0001059 "sequence_alteration"^^xsd:string)
EquivalentClasses(obo:SO_0001059 ObjectIntersectionOf(obo:GENO_0000512 ObjectSomeValuesFrom(obo:GENO_0000784 obo:GENO_0000481)))

# Class: obo:SO_0001218 (transgenic_insertion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001218 "An insertion that derives from another organism, via the use of recombinant DNA technology."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001218 "transgenic insertion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0001218 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_0001218 "SO:0001218"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0001218 "transgenic_insertion"^^xsd:string)
SubClassOf(obo:SO_0001218 obo:SO_0000667)
SubClassOf(obo:SO_0001218 ObjectSomeValuesFrom(obo:BFO_0000051 obo:GENO_0000093))

# Class: obo:SO_0001410 (obsolete experimental_feature)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001410 "A region which is the result of some arbitrary experimental procedure. The procedure may be carried out with biological material or inside a computer.")
AnnotationAssertion(obo:IAO_0000231 obo:SO_0001410 "not currently needed to support modeling use cases. can re-introduce if becomes necessary.")
AnnotationAssertion(rdfs:label obo:SO_0001410 "obsolete experimental_feature"^^xsd:string)
AnnotationAssertion(owl:deprecated obo:SO_0001410 "true"^^xsd:boolean)

# Class: obo:SO_0001477 (gene_trap_construct)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001477 "A construct which is designed to integrate into a genome and produce a fusion transcript between exons of the gene into which it inserts and a reporter element in the construct. Gene traps contain a splice acceptor, do not contain promoter elements for the reporter, and are mutagenic. Gene traps may be bicistronic with the second cassette containing a promoter driving an a selectable marker.")
AnnotationAssertion(rdfs:label obo:SO_0001477 "gene_trap_construct"@en)
SubClassOf(obo:SO_0001477 obo:GENO_0000856)

# Class: obo:SO_0001478 (promoter_trap_construct)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001478 "A construct which is designed to integrate into a genome and express a reporter when inserted in close proximity to a promoter element. Promoter traps typically do not contain promoter elements and are mutagenic.")
AnnotationAssertion(rdfs:label obo:SO_0001478 "promoter_trap_construct"@en)
SubClassOf(obo:SO_0001478 obo:GENO_0000856)

# Class: obo:SO_0001479 (enhancer_trap_construct)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001479 "A construct which is designed to integrate into a genome and express a reporter when the expression from a basic minimal promoter is enhanced by genomic enhancer elements. Enhancer traps contain promoter elements and are not usually mutagenic.")
AnnotationAssertion(rdfs:label obo:SO_0001479 "enhancer_trap_construct"@en)
SubClassOf(obo:SO_0001479 obo:GENO_0000856)

# Class: obo:SO_0001483 (SNV)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001483 "SNVs are single base pair positions in genomic DNA at which different sequence alternatives exist."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001483 "single nucleotide variant"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0001483 obo:so.owl)
AnnotationAssertion(obo:IAO_created_by obo:SO_0001483 "kareneilbeck"^^xsd:string)
AnnotationAssertion(obo:IAO_creation_date obo:SO_0001483 "Thu Oct 08 11:37:49 PDT 2009"^^xsd:string)
AnnotationAssertion(obo:IAO_id obo:SO_0001483 "SO:0001483"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_0001483 "SOFA"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0001483 "SNV"^^xsd:string)
SubClassOf(obo:SO_0001483 obo:SO_1000002)

# Class: obo:SO_0001500 (heritable_phenotypic_marker)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001500 "A biological_region characterized as a single heritable trait in a phenotype screen. The heritable phenotype may be mapped to a chromosome but generally has not been characterized to a specific gene locus.")
AnnotationAssertion(rdfs:label obo:SO_0001500 "heritable_phenotypic_marker"@en)
SubClassOf(obo:SO_0001500 obo:GENO_0000481)

# Class: obo:SO_0001505 (reference genome sequence)

AnnotationAssertion(obo:IAO_0000112 obo:SO_0001505 "'GRCh37.p10' (a human reference genome build)")
AnnotationAssertion(obo:IAO_0000115 obo:SO_0001505 "A genome sequence that is used as a standard against which other genome sequences are compared, or into which alterations are intentionally introduced.")
AnnotationAssertion(rdfs:label obo:SO_0001505 "reference genome sequence")
SubClassOf(obo:SO_0001505 obo:GENO_0000017)
SubClassOf(obo:SO_0001505 ObjectSomeValuesFrom(obo:GENO_0000968 obo:GENO_0000152))

# Class: obo:SO_0001742 (copy_number_gain)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001742 "A sequence alteration whereby the copy number of a given regions is greater than the reference sequence."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001742 "copy number gain"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001742 "gain"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0001742 obo:so.owl)
AnnotationAssertion(obo:IAO_created_by obo:SO_0001742 "kareneilbeck"^^xsd:string)
AnnotationAssertion(obo:IAO_creation_date obo:SO_0001742 "Mon Feb 28 01:54:09 PST 2011"^^xsd:string)
AnnotationAssertion(obo:IAO_id obo:SO_0001742 "SO:0001742"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_0001742 "DBVAR"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0001742 "copy_number_gain"^^xsd:string)
SubClassOf(obo:SO_0001742 obo:SO_0001019)

# Class: obo:SO_0001743 (copy_number_loss)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001743 "A sequence alteration whereby the copy number of a given region is less than the reference sequence."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001743 "copy number loss"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001743 "loss"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0001743 obo:so.owl)
AnnotationAssertion(obo:IAO_created_by obo:SO_0001743 "kareneilbeck"^^xsd:string)
AnnotationAssertion(obo:IAO_creation_date obo:SO_0001743 "Mon Feb 28 01:55:02 PST 2011"^^xsd:string)
AnnotationAssertion(obo:IAO_id obo:SO_0001743 "SO:0001743"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_0001743 "DBVAR"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0001743 "copy_number_loss"^^xsd:string)
SubClassOf(obo:SO_0001743 obo:SO_0001019)

# Class: obo:SO_0001744 (UPD)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001744 "Uniparental disomy is a sequence_alteration where a diploid individual receives two copies for all or part of a chromosome from one parent and no copies of the same chromosome or region from the other parent."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001744 "UPD"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001744 "uniparental disomy"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0001744 obo:so.owl)
AnnotationAssertion(obo:IAO_created_by obo:SO_0001744 "kareneilbeck"^^xsd:string)
AnnotationAssertion(obo:IAO_creation_date obo:SO_0001744 "Mon Feb 28 02:01:05 PST 2011"^^xsd:string)
AnnotationAssertion(obo:IAO_id obo:SO_0001744 "SO:0001744"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_0001744 "DBVAR"^^xsd:string)
AnnotationAssertion(obo:IAO_xref obo:SO_0001744 "http:http\\://en.wikipedia.org/wiki/Uniparental_disomy"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0001744 "UPD"^^xsd:string)
SubClassOf(obo:SO_0001744 obo:SO_0001059)

# Class: obo:SO_0001745 (maternal_uniparental_disomy)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001745 "Uniparental disomy is a sequence_alteration where a diploid individual receives two copies for all or part of a chromosome from the mother and no copies of the same chromosome or region from the father."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001745 "maternal uniparental disomy"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0001745 obo:so.owl)
AnnotationAssertion(obo:IAO_created_by obo:SO_0001745 "kareneilbeck"^^xsd:string)
AnnotationAssertion(obo:IAO_creation_date obo:SO_0001745 "Mon Feb 28 02:03:01 PST 2011"^^xsd:string)
AnnotationAssertion(obo:IAO_id obo:SO_0001745 "SO:0001745"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0001745 "maternal_uniparental_disomy"^^xsd:string)
SubClassOf(obo:SO_0001745 obo:SO_0001744)

# Class: obo:SO_0001746 (paternal_uniparental_disomy)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001746 "Uniparental disomy is a sequence_alteration where a diploid individual receives two copies for all or part of a chromosome from the father and no copies of the same chromosome or region from the mother."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001746 "paternal uniparental disomy"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0001746 obo:so.owl)
AnnotationAssertion(obo:IAO_created_by obo:SO_0001746 "kareneilbeck"^^xsd:string)
AnnotationAssertion(obo:IAO_creation_date obo:SO_0001746 "Mon Feb 28 02:03:30 PST 2011"^^xsd:string)
AnnotationAssertion(obo:IAO_id obo:SO_0001746 "SO:0001746"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0001746 "paternal_uniparental_disomy"^^xsd:string)
SubClassOf(obo:SO_0001746 obo:SO_0001744)

# Class: obo:SO_0001784 (complex_structural_alteration)

AnnotationAssertion(obo:IAO_0000115 obo:SO_0001784 "A structural sequence alteration where there are multiple equally plausible explanations for the change."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_0001784 "complex"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_0001784 obo:so.owl)
AnnotationAssertion(obo:IAO_created_by obo:SO_0001784 "kareneilbeck"^^xsd:string)
AnnotationAssertion(obo:IAO_creation_date obo:SO_0001784 "Wed Mar 23 03:21:19 PDT 2011"^^xsd:string)
AnnotationAssertion(obo:IAO_id obo:SO_0001784 "SO:0001784"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_0001784 "DBVAR"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0001784 "complex_structural_alteration"^^xsd:string)
SubClassOf(obo:SO_0001784 obo:SO_0001785)

# Class: obo:SO_0001785 (structural_alteration)

AnnotationAssertion(obo:IAO_0000412 obo:SO_0001785 obo:so.owl)
AnnotationAssertion(obo:IAO_created_by obo:SO_0001785 "kareneilbeck"^^xsd:string)
AnnotationAssertion(obo:IAO_creation_date obo:SO_0001785 "Fri Mar 25 02:27:41 PDT 2011"^^xsd:string)
AnnotationAssertion(obo:IAO_id obo:SO_0001785 "SO:0001785"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_0001785 "DBVAR"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_0001785 "structural_alteration"^^xsd:string)
SubClassOf(obo:SO_0001785 obo:SO_0001059)

# Class: obo:SO_0005836 (regulatory_region)

AnnotationAssertion(obo:IAO_0000116 obo:SO_0005836 "Formerly http://purl.obolibrary.org/obo/GENO_0000067, replaced with SO term.")
AnnotationAssertion(obo:IAO_0000118 obo:SO_0005836 "regulatory element")
AnnotationAssertion(obo:IAO_0000118 obo:SO_0005836 "regulatory gene region")
AnnotationAssertion(rdfs:label obo:SO_0005836 "regulatory_region")
SubClassOf(obo:SO_0005836 obo:GENO_0000666)

# Class: obo:SO_1000002 (substitution)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000002 "Any change in genomic DNA caused by a single event."^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000002 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000002 "SO:1000002"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_1000002 "SOFA"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000002 "substitution"^^xsd:string)
SubClassOf(obo:SO_1000002 obo:SO_0001059)

# Class: obo:SO_1000005 (complex_substitution)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000005 "When no simple or well defined DNA mutation event describes the observed DNA change, the keyword \\\"complex\\\" should be used. Usually there are multiple equally plausible explanations for the change."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000005 "complex substitution"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000005 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000005 "SO:1000005"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_1000005 "SOFA"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000005 "complex_substitution"^^xsd:string)
SubClassOf(obo:SO_1000005 obo:SO_1000002)

# Class: obo:SO_1000008 (point_mutation)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000008 "A single nucleotide change which has occurred at the same position of a corresponding nucleotide in a reference sequence."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000008 "point mutation"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000008 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000008 "SO:1000008"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_1000008 "SOFA"^^xsd:string)
AnnotationAssertion(obo:IAO_xref obo:SO_1000008 "http://en.wikipedia.org/wiki/Point_mutation"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000008 "point_mutation"^^xsd:string)
SubClassOf(obo:SO_1000008 obo:SO_0001483)

# Class: obo:SO_1000009 (transition)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000009 "Change of a pyrimidine nucleotide, C or T, into an other pyrimidine nucleotide, or change of a purine nucleotide, A or G, into an other purine nucleotide."^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000009 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000009 "SO:1000009"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000009 "transition"^^xsd:string)
SubClassOf(obo:SO_1000009 obo:SO_0001483)

# Class: obo:SO_1000010 (pyrimidine_transition)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000010 "A substitution of a pyrimidine, C or T, for another pyrimidine."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000010 "pyrimidine transition"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000010 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000010 "SO:1000010"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000010 "pyrimidine_transition"^^xsd:string)
SubClassOf(obo:SO_1000010 obo:SO_1000009)

# Class: obo:SO_1000011 (C_to_T_transition)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000011 "A transition of a cytidine to a thymine."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000011 "C to T transition"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000011 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000011 "SO:1000011"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000011 "C_to_T_transition"^^xsd:string)
SubClassOf(obo:SO_1000011 obo:SO_1000010)

# Class: obo:SO_1000012 (C_to_T_transition_at_pCpG_site)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000012 "The transition of cytidine to thymine occurring at a pCpG site as a consequence of the spontaneous deamination of 5'-methylcytidine."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000012 "C to T transition at pCpG site"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000012 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000012 "SO:1000012"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000012 "C_to_T_transition_at_pCpG_site"^^xsd:string)
SubClassOf(obo:SO_1000012 obo:SO_1000011)

# Class: obo:SO_1000013 (T_to_C_transition)

AnnotationAssertion(obo:IAO_0000118 obo:SO_1000013 "T to C transition"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000013 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000013 "SO:1000013"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000013 "T_to_C_transition"^^xsd:string)
SubClassOf(obo:SO_1000013 obo:SO_1000010)

# Class: obo:SO_1000014 (purine_transition)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000014 "A substitution of a purine, A or G, for another purine."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000014 "purine transition"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000014 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000014 "SO:1000014"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000014 "purine_transition"^^xsd:string)
SubClassOf(obo:SO_1000014 obo:SO_1000009)

# Class: obo:SO_1000015 (A_to_G_transition)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000015 "A transition of an adenine to a guanine."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000015 "A to G transition"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000015 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000015 "SO:1000015"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000015 "A_to_G_transition"^^xsd:string)
SubClassOf(obo:SO_1000015 obo:SO_1000014)

# Class: obo:SO_1000016 (G_to_A_transition)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000016 "A transition of a guanine to an adenine."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000016 "G to A transition"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000016 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000016 "SO:1000016"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000016 "G_to_A_transition"^^xsd:string)
SubClassOf(obo:SO_1000016 obo:SO_1000014)

# Class: obo:SO_1000017 (transversion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000017 "Change of a pyrimidine nucleotide, C or T, into a purine nucleotide, A or G, or vice versa."^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000017 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000017 "SO:1000017"^^xsd:string)
AnnotationAssertion(obo:IAO_xref obo:SO_1000017 "http://en.wikipedia.org/wiki/Transversion"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000017 "transversion"^^xsd:string)
SubClassOf(obo:SO_1000017 obo:SO_0001483)

# Class: obo:SO_1000018 (pyrimidine_to_purine_transversion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000018 "Change of a pyrimidine nucleotide, C or T, into a purine nucleotide, A or G."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000018 "pyrimidine to purine transversion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000018 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000018 "SO:1000018"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000018 "pyrimidine_to_purine_transversion"^^xsd:string)
SubClassOf(obo:SO_1000018 obo:SO_1000017)

# Class: obo:SO_1000019 (C_to_A_transversion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000019 "A transversion from cytidine to adenine."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000019 "C to A transversion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000019 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000019 "SO:1000019"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000019 "C_to_A_transversion"^^xsd:string)
SubClassOf(obo:SO_1000019 obo:SO_1000018)

# Class: obo:SO_1000020 (C_to_G_transversion)

AnnotationAssertion(obo:IAO_0000118 obo:SO_1000020 "C to G transversion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000020 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000020 "SO:1000020"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000020 "C_to_G_transversion"^^xsd:string)
SubClassOf(obo:SO_1000020 obo:SO_1000018)

# Class: obo:SO_1000021 (T_to_A_transversion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000021 "A transversion from T to A."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000021 "T to A transversion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000021 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000021 "SO:1000021"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000021 "T_to_A_transversion"^^xsd:string)
SubClassOf(obo:SO_1000021 obo:SO_1000018)

# Class: obo:SO_1000022 (T_to_G_transversion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000022 "A transversion from T to G."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000022 "T to G transversion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000022 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000022 "SO:1000022"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000022 "T_to_G_transversion"^^xsd:string)
SubClassOf(obo:SO_1000022 obo:SO_1000018)

# Class: obo:SO_1000023 (purine_to_pyrimidine_transversion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000023 "Change of a purine nucleotide, A or G , into a pyrimidine nucleotide C or T."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000023 "purine to pyrimidine transversion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000023 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000023 "SO:1000023"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000023 "purine_to_pyrimidine_transversion"^^xsd:string)
SubClassOf(obo:SO_1000023 obo:SO_1000017)

# Class: obo:SO_1000024 (A_to_C_transversion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000024 "A transversion from adenine to cytidine."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000024 "A to C transversion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000024 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000024 "SO:1000024"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000024 "A_to_C_transversion"^^xsd:string)
SubClassOf(obo:SO_1000024 obo:SO_1000023)

# Class: obo:SO_1000025 (A_to_T_transversion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000025 "A transversion from adenine to thymine."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000025 "A to T transversion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000025 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000025 "SO:1000025"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000025 "A_to_T_transversion"^^xsd:string)
SubClassOf(obo:SO_1000025 obo:SO_1000023)

# Class: obo:SO_1000026 (G_to_C_transversion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000026 "A transversion from guanine to cytidine."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000026 "G to C transversion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000026 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000026 "SO:1000026"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000026 "G_to_C_transversion"^^xsd:string)
SubClassOf(obo:SO_1000026 obo:SO_1000023)

# Class: obo:SO_1000027 (G_to_T_transversion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000027 "A transversion from guanine to thymine."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000027 "G to T transversion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000027 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000027 "SO:1000027"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000027 "G_to_T_transversion"^^xsd:string)
SubClassOf(obo:SO_1000027 obo:SO_1000023)

# Class: obo:SO_1000032 (indel)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000032 "A sequence alteration which included an insertion and a deletion, affecting 2 or more bases."^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000032 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000032 "SO:1000032"^^xsd:string)
AnnotationAssertion(obo:IAO_xref obo:SO_1000032 "http://en.wikipedia.org/wiki/Indel"^^xsd:string)
AnnotationAssertion(rdfs:comment obo:SO_1000032 "Indels can have a different number of bases than the corresponding reference sequence."^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000032 "indel"^^xsd:string)
SubClassOf(obo:SO_1000032 obo:SO_0001059)

# Class: obo:SO_1000035 (duplication)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000035 "One or more nucleotides are added between two adjacent nucleotides in the sequence; the inserted sequence derives from, or is identical in sequence to, nucleotides adjacent to insertion point."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000035 "nucleotide duplication"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000035 "nucleotide_duplication"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000035 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000035 "SO:1000035"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000035 "duplication"^^xsd:string)
SubClassOf(obo:SO_1000035 obo:SO_0000667)

# Class: obo:SO_1000036 (inversion)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000036 "A continuous nucleotide sequence is inverted in the same position."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000036 "inversion"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000036 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000036 "SO:1000036"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_1000036 "DBVAR"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_1000036 "SOFA"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000036 "inversion"^^xsd:string)
SubClassOf(obo:SO_1000036 obo:SO_0001059)

# Class: obo:SO_1000039 (direct_tandem_duplication)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000039 "A tandem duplication where the individual regions are in the same orientation."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000039 "direct tandem duplication"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000039 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000039 "SO:1000039"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000039 "direct_tandem_duplication"^^xsd:string)
SubClassOf(obo:SO_1000039 obo:SO_1000173)

# Class: obo:SO_1000040 (inverted_tandem_duplication)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000040 "A tandem duplication where the individual regions are not in the same orientation."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000040 "inverted tandem duplication"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000040 "mirror duplication"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000040 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000040 "SO:1000040"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000040 "inverted_tandem_duplication"^^xsd:string)
SubClassOf(obo:SO_1000040 obo:SO_1000173)

# Class: obo:SO_1000173 (tandem_duplication)

AnnotationAssertion(obo:IAO_0000115 obo:SO_1000173 "A duplication consisting of 2 identical adjacent regions."^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000173 "erverted"^^xsd:string)
AnnotationAssertion(obo:IAO_0000118 obo:SO_1000173 "tandem duplication"^^xsd:string)
AnnotationAssertion(obo:IAO_0000412 obo:SO_1000173 obo:so.owl)
AnnotationAssertion(obo:IAO_id obo:SO_1000173 "SO:1000173"^^xsd:string)
AnnotationAssertion(obo:IAO_subset obo:SO_1000173 "DBVAR"^^xsd:string)
AnnotationAssertion(rdfs:label obo:SO_1000173 "tandem_duplication"^^xsd:string)
SubClassOf(obo:SO_1000173 obo:SO_1000035)

# Class: obo:UBERON_0000105 (life cycle stage)

AnnotationAssertion(obo:IAO_0000116 obo:UBERON_0000105 "Stub class to serve as root of hierarchy for imports of developmental stages from Uberon or  taxon specific vocabularies such as ZFIN stages terms)")
AnnotationAssertion(rdfs:label obo:UBERON_0000105 "life cycle stage")
SubClassOf(obo:UBERON_0000105 obo:GENO_0000351)

# Class: obo:UBERON_0001062 (anatomical entity)

AnnotationAssertion(obo:IAO_0000116 obo:UBERON_0001062 "Stub class to serve as root of hierarchy for imports of anatomical entities from UBERON, CARO, or taxon-specific anatomy ontologies.")
AnnotationAssertion(oboInOwl:hasDbXref obo:UBERON_0001062 "http://purl.obolibrary.org/obo/CARO_0000000")
AnnotationAssertion(rdfs:label obo:UBERON_0001062 "anatomical entity"^^xsd:string)
SubClassOf(obo:UBERON_0001062 obo:BFO_0000040)
SubClassOf(obo:UBERON_0001062 ObjectSomeValuesFrom(obo:RO_0001000 obo:OBI_0100026))

# Class: obo:UPHENO_0001001 (Phenotype)

AnnotationAssertion(obo:IAO_0000116 obo:UPHENO_0001001 "Stub node that gathers root classes from various taxon-specific phenotype ontologies, as connectors to bringing classes from these ontolgies into the GENO framework.")
AnnotationAssertion(rdfs:comment obo:UPHENO_0001001 "1. From OGMS: A (combination of) quality(ies) of an organism determined by the interaction of its genetic make-up and environment that differentiates specific instances of a species from other instances of the same species (from OGMS, and used in OBI, but treatment as a quality is at odds with previous OBI discussions and their treatemnt of 'comparative phenotype assessment, where a phenotype is described as a quality or disposition)

2. From OBI calls: quality or disposition inheres in organism or part of an organism towards some growth environment")
AnnotationAssertion(rdfs:label obo:UPHENO_0001001 "Phenotype")
SubClassOf(obo:UPHENO_0001001 obo:BFO_0000020)

# Class: obo:WBPhenotype_0000886 (worm phenotype)

AnnotationAssertion(obo:IAO_0000115 obo:WBPhenotype_0000886 "Animals exhibit variations compared to a given control.")
AnnotationAssertion(obo:IAO_0000116 obo:WBPhenotype_0000886 "'Variant' is the given label of the root class in the Worm Phenotype ontology.  Renamng it here to be consisent with our hierarchy of phenotype classes.")
AnnotationAssertion(obo:IAO_0000118 obo:WBPhenotype_0000886 "Variant")
AnnotationAssertion(obo:IAO_0000118 obo:WBPhenotype_0000886 "c. elegans phenotype")
AnnotationAssertion(rdfs:label obo:WBPhenotype_0000886 "worm phenotype"@en)
SubClassOf(obo:WBPhenotype_0000886 obo:UPHENO_0001001)

# Class: obo:ZP_0000199 (abnormal(ly) malformed endocardium cell)

AnnotationAssertion(rdfs:label obo:ZP_0000199 "abnormal(ly) malformed endocardium cell"@en)
SubClassOf(obo:ZP_0000199 obo:GENO_0000575)

# Class: obo:ZP_0000386 (abnormal(ly) absent dorso-rostral cluster)

AnnotationAssertion(rdfs:label obo:ZP_0000386 "abnormal(ly) absent dorso-rostral cluster"@en)
SubClassOf(obo:ZP_0000386 obo:GENO_0000575)

# Class: obo:ZP_0000755 (abnormal(ly) disrupted  diencephalon development)

AnnotationAssertion(rdfs:label obo:ZP_0000755 "abnormal(ly) disrupted  diencephalon development"@en)
SubClassOf(obo:ZP_0000755 obo:GENO_0000575)

# Class: obo:ZP_0005531 (abnormal(ly) disrupted neutrophil aggregation)

AnnotationAssertion(rdfs:label obo:ZP_0005531 "abnormal(ly) disrupted neutrophil aggregation"@en)
SubClassOf(obo:ZP_0005531 obo:GENO_0000575)

# Class: obo:ZP_0005692 (abnormal(ly) absent adaxial cell)

AnnotationAssertion(rdfs:label obo:ZP_0005692 "abnormal(ly) absent adaxial cell")
SubClassOf(obo:ZP_0005692 obo:GENO_0000575)

# Class: <http://purl.org/oban/association> (association)

AnnotationAssertion(rdfs:label <http://purl.org/oban/association> "association"@en)
SubClassOf(<http://purl.org/oban/association> obo:IAO_0000030)

# Class: <http://www.ncbi.nlm.nih.gov/gene/20423> (mus musculus shh gene)

AnnotationAssertion(obo:IAO_0000114 <http://www.ncbi.nlm.nih.gov/gene/20423> obo:GENO_0000514)
AnnotationAssertion(rdfs:comment <http://www.ncbi.nlm.nih.gov/gene/20423> "Equivalent to: http://www.informatics.jax.org/marker/MGI:98297")
AnnotationAssertion(rdfs:label <http://www.ncbi.nlm.nih.gov/gene/20423> "mus musculus shh gene")
SubClassOf(<http://www.ncbi.nlm.nih.gov/gene/20423> obo:GENO_0000057)

# Class: <http://www.ncbi.nlm.nih.gov/gene/30269> (danio rerio shha gene)

AnnotationAssertion(obo:IAO_0000114 <http://www.ncbi.nlm.nih.gov/gene/30269> obo:GENO_0000514)
AnnotationAssertion(oboInOwl:hasDbXref <http://www.ncbi.nlm.nih.gov/gene/30269> "http://zfin.org/ZDB-GENE-980526-166")
AnnotationAssertion(rdfs:label <http://www.ncbi.nlm.nih.gov/gene/30269> "danio rerio shha gene")
SubClassOf(<http://www.ncbi.nlm.nih.gov/gene/30269> obo:GENO_0000047)

# Class: <http://www.ncbi.nlm.nih.gov/gene/399483> (danio rerio cdkn1ca gene)

AnnotationAssertion(obo:IAO_0000114 <http://www.ncbi.nlm.nih.gov/gene/399483> obo:GENO_0000514)
AnnotationAssertion(oboInOwl:hasDbXref <http://www.ncbi.nlm.nih.gov/gene/399483> "http://zfin.org/ZDB-GENE-040123-1")
AnnotationAssertion(rdfs:label <http://www.ncbi.nlm.nih.gov/gene/399483> "danio rerio cdkn1ca gene")
SubClassOf(<http://www.ncbi.nlm.nih.gov/gene/399483> obo:GENO_0000047)

# Class: <http://www.ncbi.nlm.nih.gov/gene/6469> (homo sapiens SHH gene)

AnnotationAssertion(obo:IAO_0000114 <http://www.ncbi.nlm.nih.gov/gene/6469> obo:GENO_0000514)
AnnotationAssertion(rdfs:comment <http://www.ncbi.nlm.nih.gov/gene/6469> "Equivalent to: http://www.ensembl.org/Gene/Summary?g=ENSG00000164690

Codes for: http://www.uniprot.org/uniprot/Q15465")
AnnotationAssertion(rdfs:label <http://www.ncbi.nlm.nih.gov/gene/6469> "homo sapiens SHH gene"@en)
SubClassOf(<http://www.ncbi.nlm.nih.gov/gene/6469> obo:GENO_0000054)


############################
#   Named Individuals
############################

# Individual: obo:GENO_0000484 (exploratory term)

AnnotationAssertion(rdfs:label obo:GENO_0000484 "exploratory term"@en)
ClassAssertion(obo:IAO_0000102 obo:GENO_0000484)

# Individual: obo:GENO_0000514 (exemplar term)

AnnotationAssertion(rdfs:label obo:GENO_0000514 "exemplar term"@en)
ClassAssertion(obo:IAO_0000102 obo:GENO_0000514)


SubClassOf(Annotation(rdfs:comment "Initially created such that integrated transgene infers as child of sequence_alteration.") ObjectSomeValuesFrom(obo:BFO_0000050 obo:SO_0001059) obo:SO_0001059)
SubObjectPropertyOf(ObjectPropertyChain(obo:BFO_0000051 obo:GENO_0000639) obo:GENO_0000639)
SubObjectPropertyOf(ObjectPropertyChain(obo:GENO_0000382 obo:GENO_0000418) obo:GENO_0000418)
SubObjectPropertyOf(Annotation(rdfs:comment "This is a case of inter-gneotype phenotype propagation, requiring propagation down oen genotype and then up another.  Given the data in hand, however, the conditions for this will likely never occur, so probably ok not to have this chain.

This property chain propagates a phenotype asserted on a sex-qualified intrinsic genotype, down to its sex-agnostic genotype part, and then up to a parent effective genotype that has it as a variant part. I think this is OK in all cases, so we can implement this as the one case where we can have inter-genotype pheno propagation.  But as noted, there will likely be no data that actually meets criteria to use this chain, so we can probably leave it out.") ObjectPropertyChain(obo:GENO_0000382 obo:GENO_0000661 obo:RO_0003303) obo:GENO_0000791)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred phenotype associations 'up' a genotype partonomy in the direction of sequence alteration -> VL -> VSLC -> GVC -> genotype.") ObjectPropertyChain(obo:GENO_0000382 obo:GENO_0000743) obo:GENO_0000740)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred condition associations 'up' a genotype partonomy in the direction of sequence alteration -> VL -> VSLC -> GVC -> genotype.") ObjectPropertyChain(obo:GENO_0000382 obo:RO_0003303) obo:GENO_0000791)
SubObjectPropertyOf(ObjectPropertyChain(obo:GENO_0000383 obo:GENO_0000408) obo:GENO_0000742)
SubObjectPropertyOf(ObjectPropertyChain(obo:GENO_0000383 obo:GENO_0000418) obo:GENO_0000418)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred condition associations from an effective genotype through a sex-qualified intrinsic genotype, through a sex-agnostic intrinsic genotype, to the coompnent variant parts of this sex-agnostic genotype.") ObjectPropertyChain(obo:GENO_0000383 obo:GENO_0000661 obo:GENO_0000383 obo:RO_0003303) obo:GENO_0000791)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred phenotype associations 'down' a genotype partonomy from a sex-qualified intrinsic genotype to the components of a sex-agnostic intrinsic genotype.") ObjectPropertyChain(obo:GENO_0000383 obo:GENO_0000661 obo:GENO_0000743) obo:GENO_0000740)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred condition associations 'down' a genotype partonomy from a sex-qualified intrinsic genotype to the components of a sex-agnostic intrinsic genotype.  This chain in particuular is needed to get the conditions to move past the sex-agnostic genotype and down to its parts.

The following shorter chain would also suffice here:
is_variant_part_of  o  inferred_to_cause_condition") ObjectPropertyChain(obo:GENO_0000383 obo:GENO_0000661 obo:RO_0003303) obo:GENO_0000791)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred phenotype associations 'down' a genotype partonomy in the direction of genotype -> GVC -> VSLC -> VL -> sequence alteration.") ObjectPropertyChain(obo:GENO_0000383 obo:GENO_0000743) obo:GENO_0000740)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred condition associations 'down' a genotype partonomy in the direction of genotype -> GVC -> VSLC -> VL -> sequence alteration.") ObjectPropertyChain(obo:GENO_0000383 obo:RO_0003303) obo:GENO_0000791)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred condition associations from an effective genotype through a sex-qualified intrinsic genotype, through a sex-agnostic intrinsic genotype, through the coompnent variant parts of this sex-agnostic genotype, and to the affected gene.") ObjectPropertyChain(obo:GENO_0000413 obo:GENO_0000383 obo:GENO_0000661 obo:GENO_0000383 obo:RO_0003303) obo:GENO_0000791)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred condition associations 'down' a genotype partonomy from a sex-qualified intrinsic genotype to the components of a sex-agnostic intrinsic genotype.  This chain in particuular is needed to get the conditions to propagate to genes.

The shorter chain below would also suffice for this propagation:
has_allele o inferred_to_cause_condition") ObjectPropertyChain(obo:GENO_0000413 obo:GENO_0000383 obo:GENO_0000661 obo:RO_0003303) obo:GENO_0000791)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred phenotype associations from an intrinsic genotype component (e.g. a (sequence-)variant locus instance) to a gene class.") ObjectPropertyChain(obo:GENO_0000413 obo:GENO_0000383 obo:GENO_0000743) obo:GENO_0000740)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred phenotype associations from a (sequence-)variant locus instance to a gene class (to support cases where the phenotype association is made at the level of the variant gene locus).") ObjectPropertyChain(obo:GENO_0000413 obo:GENO_0000743) obo:GENO_0000740)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred condition associations from an sequence alteration through the variant locus to a gene class. (separate chains are needed to propagate from the variant locus to the gene class, and another to propagate from a genotype, GVC, or VSLC to the gene class).


NOTE that i dont need this property chain if I have a property chain to infer a has_affected_locus link from a sequence alteration to a gene when the link is asserted from the variant locus to the gene:

is_variant_part_of  o  has_affected_locus  --> has_affected_locus") ObjectPropertyChain(obo:GENO_0000445 obo:GENO_0000382 obo:RO_0003303) obo:GENO_0000791)
SubObjectPropertyOf(Annotation(rdfs:comment "Obsolete comment: Property chain to propagate inferred condition associations from an intrinsic genotype, GC, or VLSC to a gene class. (a separate chain is needed to propagate from the variant locus to the gene class, and another to propagate from a sequence alteration to the gene class).

The following, shorter chain, would also suffice here:
has_allele  o  inferred_to_cause_condition   ->    inferred_to_cause_condition") Annotation(rdfs:comment "Property chain to propagate inferred condition associations from an intrinsic genotype, GVC, or VLSC to an affected gene class, or from an extrinsic gneotype or component to an affected gene class. 

The following, shorter chain, would also suffice here:
has_affected_locus  o  inferred_to_cause_condition   ->    inferred_to_cause_condition

Note that a separate chain is needed to propagate from the variant locus to the gene class, and another to propagate from a sequence alteration to the gene class in cases where the link to gene is through the variant locus rather than the seq alteration).") ObjectPropertyChain(obo:GENO_0000445 obo:GENO_0000383 obo:RO_0003303) obo:GENO_0000791)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred condition associations from a variant locus instance to a gene class (to support cases where the phenotype association is made directly at the level of the variant locus/allele).") ObjectPropertyChain(obo:GENO_0000445 obo:RO_0003303) obo:GENO_0000791)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred phenotype associations from an extrinnsic genotype component (e.g. a expression-variant gene instance) to a gene class.") ObjectPropertyChain(obo:GENO_0000449 obo:GENO_0000383 obo:GENO_0000743) obo:GENO_0000740)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred phenotype associations from an expression-variant gene instance to a gene class (to support cases where the phenotype association is made at the level of the expression-variant gene).") ObjectPropertyChain(obo:GENO_0000449 obo:GENO_0000743) obo:GENO_0000740)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred condition associations from an effective genotype through a sex-qualified intrinsic genotype to a sex-agnostic intrinsic genotype.") ObjectPropertyChain(obo:GENO_0000661 obo:GENO_0000383 obo:RO_0003303) obo:GENO_0000791)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred phenotype associations 'down' a genotype partonomy just from a sex-qualified intrinsic genotype to the immediate sex-agnostic intrinsic genotype. (An additional property chain is needed to then propagate to the intrinsic genotype components)") ObjectPropertyChain(obo:GENO_0000661 obo:GENO_0000743) obo:GENO_0000740)
SubObjectPropertyOf(Annotation(rdfs:comment "Property chain to propagate inferred condition associations 'down' a genotype partonomy just from a sex-qualified intrinsic genotype to the immediate sex-agnostic intrinsic genotype. (An additional property chain is needed to then propagate to the intrinsic genotype components)") ObjectPropertyChain(obo:GENO_0000661 obo:RO_0003303) obo:GENO_0000791)
SubObjectPropertyOf(ObjectPropertyChain(obo:RO_0000053 obo:RO_0000059) obo:GENO_0000211)
)